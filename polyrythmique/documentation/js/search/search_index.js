var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddOn.html",[0,0.074,1,2.149]],["body/classes/AddOn.html",[0,0.102,1,4.064,2,1.205,3,0.288,4,0.256,5,0.256,6,3.799,7,1.736,8,0.321,9,3.248,10,2.055,11,3.798,12,3.595,13,0.572,14,1.02,15,2.519,16,1.412,17,5.212,18,0.806,19,3.248,20,4.165,21,3.847,22,3.847,23,0.879,24,3.229,25,1.815,26,1.004,27,3.847,28,1.2,29,0.03,30,0.615,31,0.665,32,1.2,33,2.654,34,3.229,35,3.229,36,3.229,37,4.422,38,2.654,39,1.093,40,2.654,41,2.517,42,4.157,43,3.229,44,3.229,45,4.165,46,3.229,47,2.654,48,1.696,49,0.919,50,3.229,51,2.654,52,3.229,53,0.288,54,1.569,55,1.946,56,0.417,57,3.319,58,1.742,59,1.622,60,3.798,61,3.798,62,3.798,63,3.798,64,1.72,65,2.227,66,2.227,67,1.112,68,1.782,69,2.227,70,1.736,71,1.736,72,2.437,73,0.742,74,2.274,75,2.227,76,1.569,77,2.227,78,1.946,79,1.946,80,4.03,81,2.821,82,1.31,83,0.883,84,3.229,85,2.227,86,0.957,87,1.569,88,3.417,89,2.227,90,1.946,91,3.229,92,1.205,93,0.873,94,2.227,95,2.227,96,3.229,97,2.227,98,1.569,99,1.946,100,2.227,101,3.229,102,2.227,103,1.31,104,0.883,105,2.227,106,1.569,107,1.02,108,3.798,109,2.227,110,2.227,111,1.973,112,2.393,113,3.229,114,2.517,115,3.229,116,1.736,117,2.227,118,3.229,119,2.227,120,3.798,121,2.227,122,3.798,123,2.227,124,2.227,125,2.227,126,1.111,127,2.227,128,2.227,129,3.319,130,2.227,131,2.227,132,3.229,133,2.227,134,2.227,135,2.227,136,3.229,137,2.227,138,2.227,139,0.651,140,2.227,141,0.43,142,1.946,143,2.227,144,2.227,145,0.012,146,0.017,147,0.012]],["title/components/AppComponent.html",[148,0.014,149,0.582]],["body/components/AppComponent.html",[0,0.076,3,0.364,4,0.323,5,0.323,8,0.406,13,0.364,14,1.202,25,1.297,26,0.803,29,0.03,30,0.492,31,0.549,53,0.364,56,0.492,68,1.628,76,1.202,103,2.238,126,1.113,139,0.824,141,0.735,145,0.015,146,0.02,147,0.015,148,0.027,149,0.975,150,1.029,151,0.824,152,0.824,153,0.824,154,0.824,155,2.815,156,4.343,157,1.166,158,0.824,159,1.619,160,1.272,161,3.325,162,1.113,163,5.136,164,1.113,165,4.534,166,5.136,167,5.746,168,0.95,169,4.534,170,4.534,171,4.534,172,4.534,173,4.534,174,4.534,175,4.534,176,4.534,177,4.534,178,4.534,179,4.534,180,4.534,181,4.534,182,4.534,183,4.534,184,4.534,185,4.534,186,4.534,187,4.534,188,4.534,189,4.534,190,4.534,191,4.534,192,4.534,193,4.534,194,4.534,195,4.534,196,4.534,197,4.534,198,4.534,199,4.534,200,4.534,201,4.534,202,4.534,203,4.534,204,4.534,205,4.534,206,4.534,207,4.534,208,4.534,209,4.534,210,4.534,211,4.534,212,4.534,213,4.534,214,1.901,215,4.534,216,4.534,217,4.534,218,4.534,219,4.534,220,4.534,221,4.534,222,4.534,223,5.501,224,4.534,225,4.534,226,4.534,227,4.534,228,4.534,229,4.534,230,4.534,231,4.534,232,4.534,233,4.534,234,4.534,235,4.534,236,3.355,237,2.967,238,2.442,239,4.534,240,4.534,241,3.805,242,3.355,243,0.647,244,3.355,245,3.355,246,1.524,247,1.656,248,1.205,249,1.205,250,1.901,251,2.059,252,1.983,253,0.703,254,1.113,255,1.113,256,0.824,257,1.35,258,0.824,259,0.824,260,0.594,261,0.594,262,0.824,263,0.544,264,0.824,265,0.594,266,1.261,267,0.594,268,0.594,269,0.824,270,0.544,271,0.824,272,0.594,273,0.703,274,0.824,275,0.594,276,0.824,277,0.594,278,0.824,279,0.544,280,0.824,281,0.594,282,0.761,283,0.594,284,0.824,285,0.594,286,0.544,287,0.824,288,0.594,289,0.824,290,0.594,291,0.544,292,0.824,293,0.824]],["title/modules/AppModule.html",[294,2.149,295,2.149]],["body/modules/AppModule.html",[0,0.081,3,0.387,4,0.344,5,0.344,29,0.03,53,0.724,56,0.513,145,0.016,146,0.021,147,0.016,149,1.147,157,0.81,160,0.688,243,0.688,253,0.747,260,1.068,261,0.632,263,0.978,265,1.068,267,1.068,268,1.068,270,0.978,272,1.068,273,0.747,275,1.068,277,1.068,279,0.978,281,1.068,282,0.81,283,1.068,285,1.068,286,0.579,288,1.068,290,1.068,294,2.334,295,4.465,296,2.109,297,2.334,298,4.445,299,4.445,300,3.965,301,2.334,302,2.994,303,2.994,304,2.994,305,2.994,306,3.563,307,3.965,308,2.994,309,2.334,310,3.567,311,3.965,312,4.724,313,2.994,314,2.616,315,3.965,316,4.724,317,2.994,318,3.567,319,3.567,320,2.616,321,5.297,322,2.994,323,3.567,324,2.994,325,2.616,326,3.567,327,3.567,328,2.616,329,2.616,330,3.567,331,3.567,332,2.994,333,3.567,334,3.567,335,2.616,336,3.567,337,2.334,338,2.994]],["title/modules/AppRoutingModule.html",[294,2.149,306,1.941]],["body/modules/AppRoutingModule.html",[0,0.107,3,0.515,4,0.457,5,0.457,29,0.03,53,0.693,56,0.515,145,0.021,146,0.025,147,0.021,148,0.028,243,0.915,263,0.917,270,0.917,273,0.994,279,1.014,286,0.77,296,2.805,301,3.105,306,3.342,311,3.982,315,4.745,322,3.982,324,3.982,332,3.982,339,4.745,340,4.745,341,3.951,342,5.653,343,3.982,344,4.745,345,3.199,346,3.699,347,4.745,348,4.745,349,4.745,350,4.745,351,4.745]],["title/components/CreateTrackComponent.html",[148,0.014,260,0.582]],["body/components/CreateTrackComponent.html",[0,0.078,3,0.376,4,0.334,5,0.334,8,0.42,10,1.574,13,0.376,18,0.971,23,0.614,26,0.821,29,0.03,30,0.503,31,0.42,39,0.668,49,0.847,53,0.376,56,0.503,68,2.001,73,0.894,86,1.007,104,1.542,107,1.229,111,1.244,145,0.015,146,0.02,147,0.015,148,0.023,149,0.614,150,1.052,151,0.851,152,0.851,153,0.851,154,0.851,157,0.786,158,0.851,159,1.624,160,1.277,162,1.137,164,1.137,243,0.668,247,1.71,248,1.875,249,1.244,250,1.453,253,0.726,254,1.137,255,1.467,256,0.851,257,1.368,258,0.851,259,0.851,260,0.988,261,1.16,262,0.851,263,0.562,264,0.851,265,0.614,266,1.282,267,0.614,268,0.614,269,0.851,270,0.562,271,0.851,272,0.614,273,0.726,274,0.851,275,0.614,276,0.851,277,0.614,278,0.851,279,0.562,280,0.851,281,0.614,282,0.786,283,0.614,284,0.851,285,0.614,286,0.562,287,0.851,288,0.614,289,0.851,290,0.614,291,0.99,292,0.851,293,0.851,325,3.829,352,4.381,353,2.908,354,4.634,355,4.634,356,4.634,357,3.889,358,4.634,359,1.229,360,1.384,361,4.381,362,3.889,363,5.574,364,3.889,365,2.751,366,3.465,367,2.739,368,4.634,369,4.634,370,4.088,371,3.465,372,3.889,373,2.287,374,0.919,375,3.465,376,4.634,377,3.398,378,4.634,379,4.634,380,3.465,381,5.809,382,2.541,383,2.639,384,2.048,385,1.453,386,1.942,387,2.105,388,1.71,389,3.398,390,2.739,391,2.048,392,2.048,393,2.048,394,2.496,395,2.048,396,1.574,397,2.541,398,2.287,399,2.267,400,2.287,401,2.048,402,4.634,403,4.634,404,2.541,405,2.267,406,1.343,407,2.371,408,3.465,409,3.398,410,3.032,411,2.048,412,2.541,413,2.541]],["title/components/DashboardComponent.html",[148,0.014,263,0.533]],["body/components/DashboardComponent.html",[0,0.084,3,0.405,4,0.36,5,0.36,8,0.452,23,0.661,29,0.03,30,0.528,49,0.605,53,0.405,56,0.528,73,0.939,83,1.242,107,1.29,139,0.916,145,0.016,146,0.021,147,0.016,148,0.024,149,0.661,150,1.104,151,0.916,152,0.916,153,0.916,154,0.916,157,0.847,158,0.916,159,1.637,160,1.286,162,1.194,164,1.194,243,0.72,246,1.694,248,1.944,249,1.944,250,2.405,251,1.694,253,0.781,254,1.194,255,1.194,256,0.916,257,1.409,258,0.916,259,0.916,260,0.661,261,0.661,262,0.916,263,0.931,264,0.916,265,0.661,266,1.329,267,0.661,268,0.661,269,0.916,270,0.605,271,0.916,272,0.661,273,0.781,274,0.916,275,0.661,276,0.916,277,0.661,278,0.916,279,0.605,280,0.916,281,0.661,282,0.847,283,0.661,284,0.916,285,0.661,286,0.605,287,0.916,288,0.661,289,0.916,290,0.661,291,0.605,292,0.916,293,0.916,347,4.083,359,1.29,360,1.436,374,0.989,383,2.459,384,2.205,385,2.039,386,2.039,387,1.694,388,2.401,390,2.205,391,2.205,392,2.205,395,2.205,396,1.694,400,2.401,406,1.886,407,1.694,414,3.131,415,4.865,416,4.083,417,5.414,418,4.865,419,4.865,420,4.865,421,4.865,422,4.865,423,5.738,424,5.738,425,4.865,426,4.865,427,4.865,428,4.083,429,4.865,430,4.865,431,4.083,432,4.865,433,4.865,434,3.131,435,2.736,436,3.73,437,4.865,438,3.73,439,3.73,440,2.401,441,2.876,442,2.441,443,2.205,444,2.205,445,2.205,446,2.009,447,2.205,448,2.401,449,2.205,450,2.441,451,4.083,452,2.441,453,3.568,454,2.736,455,3.568]],["title/components/ExportMenuComponent.html",[148,0.014,265,0.582]],["body/components/ExportMenuComponent.html",[0,0.093,3,0.447,4,0.397,5,0.397,8,0.498,23,0.729,29,0.03,30,0.562,49,0.668,53,0.447,56,0.704,73,1,82,2.032,139,1.01,145,0.018,146,0.023,147,0.018,148,0.025,149,0.729,150,1.176,151,1.01,152,1.01,153,1.01,154,1.01,157,0.934,158,1.01,159,1.652,160,1.298,162,1.272,164,1.272,243,0.794,253,0.862,254,1.272,255,1.272,256,1.01,257,1.461,258,1.01,259,1.01,260,0.729,261,0.729,262,1.01,263,0.668,264,1.01,265,1.055,266,1.392,267,0.729,268,0.729,269,1.01,270,0.668,271,1.01,272,0.729,273,0.862,274,1.01,275,0.729,276,1.01,277,0.729,278,1.01,279,0.668,280,1.01,281,0.729,282,0.934,283,0.729,284,1.01,285,0.729,286,0.668,287,1.01,288,0.729,289,1.01,290,0.729,291,0.668,292,1.01,293,1.01,301,3.391,329,3.019,359,1.374,360,1.504,374,1.091,456,3.455,457,2.693,458,4.365,459,4.349,460,5.182,461,2.172,462,4.159,463,3.8,464,2.433]],["title/components/MainMenuComponent.html",[148,0.014,267,0.582]],["body/components/MainMenuComponent.html",[0,0.065,3,0.31,4,0.275,5,0.275,8,0.491,10,2.142,13,0.611,16,1.279,18,0.849,23,0.506,26,0.718,28,0.757,29,0.03,30,0.512,31,0.491,32,0.757,39,0.551,48,1.251,49,0.765,53,0.31,56,0.44,58,0.817,73,0.782,83,1.35,103,2.327,107,1.68,126,1.383,139,0.701,141,0.463,145,0.013,146,0.018,147,0.013,148,0.021,149,0.506,150,0.92,151,0.701,152,0.701,153,0.701,154,0.701,156,2.974,157,1.386,158,0.701,159,1.589,160,1.248,162,0.995,164,0.995,168,0.598,214,1.977,243,0.551,246,1.297,248,2.08,249,1.843,250,2.713,251,2.462,252,1.688,253,0.598,254,0.995,255,0.995,256,0.701,257,1.26,258,0.701,259,0.701,260,0.506,261,0.506,262,0.701,263,0.463,264,0.701,265,0.506,266,1.158,267,0.909,268,0.506,269,0.701,270,0.463,271,0.701,272,0.506,273,0.988,274,0.701,275,0.506,276,0.701,277,0.506,278,0.701,279,0.463,280,0.701,281,0.506,282,0.648,283,0.506,284,0.701,285,0.506,286,0.765,287,0.701,288,0.506,289,0.701,290,0.506,291,0.463,292,0.701,293,0.701,320,3.458,346,3.359,359,1.075,360,1.25,374,0.757,377,4.131,384,1.688,385,1.977,386,2.273,387,1.842,389,2.974,390,2.397,396,1.297,398,2.78,399,1.868,400,2.327,401,2.787,404,3.976,405,2.653,406,2.184,407,2.558,411,2.397,412,2.094,431,3.403,435,2.094,440,1.409,441,1.688,442,1.868,443,1.688,444,1.688,446,3.244,448,3.014,452,1.868,453,2.974,454,2.094,457,1.868,458,4.131,462,3.458,463,2.974,465,3.957,466,4.055,467,1.842,468,6.239,469,2.856,470,4.727,471,4.055,472,2.856,473,2.001,474,1.7,475,2.856,476,4.308,477,4.308,478,4.055,479,4.055,480,4.715,481,2.856,482,2.856,483,4.715,484,2.856,485,4.055,486,1.538,487,4.055,488,1.688,489,3.403,490,4.055,491,2.397,492,4.727,493,1.538,494,2.397,495,3.957,496,5.421,497,2.094,498,4.479,499,2.094,500,1.868,501,1.538,502,2.856,503,2.094,504,2.856,505,2.094,506,2.856,507,2.856,508,4.715,509,2.397,510,2.856,511,3.403,512,2.397,513,2.397,514,2.856,515,2.856,516,2.856,517,2.856,518,2.856,519,2.856,520,2.856,521,2.856,522,2.856,523,2.856,524,1.409,525,1.868,526,2.856]],["title/classes/Measure.html",[0,0.074,527,1.377]],["body/classes/Measure.html",[0,0.122,2,1.689,3,0.403,4,0.358,5,0.358,8,0.45,13,0.403,14,1.287,15,2.67,16,1.245,18,1.017,26,1.053,29,0.03,31,0.655,39,1.105,53,0.403,56,0.403,64,1.64,67,2.731,73,0.717,74,3.388,76,1.617,86,1.043,87,3.195,92,2.205,93,1.43,106,2.198,112,2.769,126,1.192,141,0.877,145,0.016,146,0.021,147,0.016,168,0.779,291,0.877,398,3.065,440,2.396,527,2.787,528,3.12,529,3.176,530,5.405,531,4.809,532,3.749,533,3.718,534,4.074,535,3.176,536,4.074,537,4.854,538,4.854,539,3.718,540,3.718,541,3.718,542,3.718,543,3.56,544,3.176,545,2.87,546,3.718,547,3.12,548,3.718,549,3.718,550,3.718,551,3.718,552,3.718,553,4.854,554,3.718,555,4.854,556,5.405,557,3.718,558,4.536,559,3.718,560,3.718,561,5.945,562,3.718,563,3.718,564,3.718,565,3.718]],["title/components/MeasureComponent.html",[148,0.014,268,0.582]],["body/components/MeasureComponent.html",[0,0.075,3,0.359,4,0.319,5,0.319,8,0.4,13,0.359,16,1.146,18,0.941,23,0.586,26,0.969,29,0.03,30,0.487,31,0.617,39,0.866,49,0.728,53,0.593,56,0.487,59,1.285,64,0.946,73,0.984,86,1.138,98,2.655,116,2.938,126,0.812,139,0.812,141,0.827,145,0.015,146,0.02,147,0.015,148,0.022,149,0.586,150,1.019,151,0.812,152,0.812,153,0.812,154,0.812,157,0.751,158,0.812,159,1.616,160,1.27,162,1.102,164,1.102,168,1.068,243,0.638,246,1.502,247,1.632,248,1.612,249,1.831,250,2.397,251,2.039,253,0.693,254,1.102,255,1.102,256,0.812,257,1.342,258,0.812,259,0.812,260,0.586,261,0.586,262,0.812,263,0.536,264,0.812,265,0.586,266,1.252,267,0.586,268,0.969,269,0.812,270,0.536,271,0.812,272,0.586,273,0.693,274,0.812,275,0.586,276,0.812,277,0.586,278,0.812,279,0.536,280,0.812,281,0.586,282,0.751,283,0.586,284,0.812,285,0.586,286,0.536,287,0.812,288,0.586,289,0.812,290,0.903,291,0.536,292,0.812,293,0.812,359,1.191,360,1.352,374,0.877,388,1.632,406,1.741,447,1.955,448,1.632,452,2.938,461,2.292,467,2.039,473,1.632,474,2.292,488,1.955,500,2.164,505,3.293,527,2.776,547,2.776,566,2.776,567,2.938,568,2.938,569,4.49,570,3.293,571,4.49,572,3.769,573,4.49,574,3.014,575,5.098,576,4.49,577,5.469,578,2.906,579,2.637,580,4.49,581,3.307,582,3.307,583,3.307,584,3.307,585,2.655,586,1.955,587,1.781,588,3.307,589,1.955,590,4.49,591,2.164,592,2.425,593,3.307,594,3.307,595,2.776,596,3.307,597,3.307,598,2.425,599,2.776,600,3.307,601,3.307,602,2.425,603,2.425,604,2.776,605,2.425]],["title/components/MetronomeComponent.html",[148,0.014,270,0.533]],["body/components/MetronomeComponent.html",[0,0.052,3,0.25,4,0.222,5,0.222,8,0.561,13,0.25,14,0.919,16,1.135,18,0.726,23,0.408,25,1.326,26,1.071,28,1.105,29,0.03,30,0.656,31,0.675,32,1.105,39,1.121,48,1.721,49,0.97,53,0.503,56,0.376,58,1.192,59,1.192,64,0.992,68,1.245,73,0.669,76,1.437,80,2.543,82,1.138,83,0.767,86,0.959,93,0.523,104,0.767,107,0.611,111,0.828,112,2.105,126,0.566,139,0.566,141,0.879,145,0.01,146,0.015,147,0.01,148,0.018,149,0.408,150,0.787,151,0.566,152,0.566,153,0.566,154,0.566,157,0.523,158,0.566,159,1.542,160,1.212,162,0.851,164,0.851,168,0.971,237,2.268,238,2.813,243,0.445,247,1.138,248,1.496,249,1.496,250,1.747,251,1.893,253,0.483,254,0.851,255,0.851,256,0.566,257,1.138,258,0.566,259,0.566,260,0.408,261,0.408,262,0.566,263,0.374,264,0.566,265,0.408,266,1.023,267,0.408,268,0.408,269,0.566,270,0.806,271,0.566,272,0.408,273,1.384,274,0.566,275,0.408,276,0.566,277,0.408,278,0.566,279,0.374,280,0.566,281,0.408,282,0.523,283,0.408,284,0.566,285,0.408,286,0.981,287,0.566,288,0.408,289,0.566,290,0.408,291,0.374,292,0.566,293,0.566,309,1.508,359,0.919,360,1.105,367,2.05,374,0.611,383,1.575,385,0.966,386,1.747,387,1.575,390,1.363,393,2.464,394,2.497,396,1.047,398,2.057,399,1.508,401,1.363,405,1.508,406,1.797,407,2.105,409,2.543,410,3.732,411,2.05,413,3.83,440,1.138,441,1.363,442,1.508,443,1.363,444,1.363,455,3.056,464,1.363,473,1.711,486,2.245,491,1.363,493,1.241,501,1.241,513,1.363,524,2.288,579,2.6,587,1.241,606,1.934,607,2.91,608,4.167,609,3.467,610,4.167,611,4.167,612,4.167,613,4.635,614,4.635,615,2.543,616,2.91,617,2.91,618,3.4,619,3.89,620,2.305,621,3.4,622,3.467,623,3.467,624,2.305,625,4.089,626,4.635,627,1.711,628,3.467,629,2.91,630,3.467,631,3.467,632,2.543,633,2.305,634,4.383,635,3.89,636,3.89,637,3.467,638,3.467,639,2.305,640,2.543,641,2.268,642,2.543,643,2.91,644,2.305,645,2.305,646,2.268,647,2.305,648,2.91,649,2.305,650,3.4,651,2.268,652,1.785,653,2.305,654,2.91,655,2.305,656,2.91,657,2.268,658,2.305,659,2.543,660,2.91,661,2.305,662,2.543,663,1.934,664,2.268,665,3.467,666,2.543,667,2.305,668,1.934,669,1.138,670,1.363,671,1.934,672,2.305,673,1.934,674,3.467,675,3.467,676,1.934,677,2.305,678,2.305,679,1.934,680,2.305,681,1.934,682,2.305,683,3.467,684,3.467,685,2.305,686,2.305,687,2.305,688,2.305,689,3.467,690,3.467,691,2.305,692,2.305,693,2.305,694,1.69,695,2.305,696,3.467,697,3.467,698,2.91,699,4.635,700,2.305,701,4.167,702,2.305,703,2.305,704,1.934,705,1.69,706,2.305,707,2.305,708,2.305,709,2.305,710,2.305,711,2.305,712,2.305,713,2.305,714,2.543,715,3.89,716,1.934,717,4.383,718,1.934,719,3.417,720,2.305,721,4.171,722,3.467,723,3.467,724,1.934,725,2.91,726,2.543,727,1.934,728,1.934,729,2.305,730,2.305,731,2.305,732,2.305,733,2.305,734,2.305,735,2.305,736,2.305]],["title/components/MetronomeSoundComponent.html",[148,0.014,272,0.582]],["body/components/MetronomeSoundComponent.html",[0,0.055,3,0.263,4,0.234,5,0.234,8,0.436,13,0.263,14,0.954,16,0.899,18,0.754,23,0.429,25,1.03,26,1.042,28,0.642,29,0.03,30,0.466,31,0.7,32,0.642,39,0.979,49,0.893,53,0.516,56,0.391,58,0.693,59,1.36,64,0.693,68,1.91,73,0.694,82,1.196,86,1.026,98,2.128,103,1.196,104,1.429,107,1.583,126,1.306,139,0.595,141,0.823,145,0.011,146,0.016,147,0.011,148,0.028,149,0.429,150,0.817,151,0.595,152,0.595,153,0.595,154,0.595,157,0.55,158,0.595,159,1.554,160,1.221,162,0.883,164,0.883,168,1.064,214,2.128,237,2.355,243,0.467,253,0.508,254,0.883,255,0.883,256,0.595,257,1.166,258,0.595,259,0.595,260,0.429,261,0.429,262,0.595,263,0.393,264,0.595,265,0.429,266,1.054,267,0.429,268,0.429,269,0.595,270,0.393,271,0.595,272,0.842,273,1.366,274,0.595,275,0.429,276,0.595,277,0.429,278,0.595,279,0.393,280,0.595,281,0.429,282,0.55,283,0.429,284,0.595,285,0.429,286,1.067,287,0.595,288,0.429,289,0.595,290,0.429,291,0.393,292,0.595,293,0.595,335,4.377,359,0.954,360,1.138,367,3.643,370,4.314,374,0.642,459,3.02,464,1.432,467,1.635,474,1.509,491,2.128,503,2.639,524,2.345,527,1.509,567,2.809,570,3.724,574,2.538,578,2.672,579,2.502,585,3.001,586,1.432,587,1.305,589,2.128,591,1.585,592,1.777,618,3.485,627,2.345,629,2.034,646,2.355,652,1.823,657,2.355,659,2.639,660,3.02,662,2.639,663,2.034,664,2.355,668,2.034,671,2.034,673,3.02,694,2.639,737,5.009,738,2.034,739,3.599,740,3.02,741,5.883,742,3.481,743,4.752,744,4.852,745,3.599,746,4.752,747,4.293,748,3.599,749,3.599,750,3.603,751,4.752,752,4.752,753,4.752,754,2.423,755,1.938,756,3.599,757,3.481,758,5.32,759,5.658,760,2.423,761,2.423,762,2.423,763,3.02,764,3.02,765,3.988,766,2.423,767,3.599,768,3.724,769,3.599,770,3.02,771,4.261,772,3.603,773,2.423,774,2.423,775,1.938,776,2.423,777,2.423,778,3.599,779,2.423,780,2.423,781,2.423,782,2.423,783,3.599,784,2.423,785,2.034,786,2.034,787,2.034,788,3.02,789,2.034,790,2.423,791,2.423,792,3.599,793,3.599,794,3.599,795,2.423,796,2.423,797,2.034,798,2.423,799,1.585,800,2.423]],["title/classes/Note.html",[0,0.074,93,0.745]],["body/classes/Note.html",[0,0.116,2,1.521,3,0.363,4,0.323,5,0.323,8,0.405,13,0.363,14,1.201,15,2.687,16,1.381,18,0.948,25,1.296,26,1.117,28,1.201,29,0.03,30,0.491,31,0.789,32,1.201,39,1.237,48,1.696,49,0.891,53,0.491,56,0.363,58,1.296,59,1.573,64,1.643,67,1.898,68,1.626,70,3.757,71,3.757,73,0.646,76,1.522,92,2.056,93,1.528,104,1.507,141,0.543,145,0.015,146,0.02,147,0.015,168,0.701,291,0.734,461,1.403,532,3.596,544,2.962,545,2.677,602,2.455,627,2.235,646,2.962,801,2.81,802,4.528,803,4.732,804,5.13,805,4.624,806,5.496,807,5.496,808,5.496,809,4.528,810,4.528,811,3.348,812,3.348,813,4.613,814,3.348,815,3.348,816,3.8,817,3.348,818,3.348,819,3.348,820,4.528,821,3.348,822,4.528,823,3.348,824,3.348,825,3.348,826,3.348,827,3.348,828,5.13,829,5.13,830,2.81,831,3.348,832,3.348,833,2.81,834,3.348,835,3.348,836,3.348,837,4.528,838,4.528,839,3.348,840,3.348,841,3.348,842,3.348,843,3.348]],["title/components/NoteComponent.html",[148,0.014,275,0.582]],["body/components/NoteComponent.html",[0,0.091,3,0.435,4,0.386,5,0.386,8,0.485,13,0.435,23,0.71,26,0.71,29,0.03,30,0.553,31,0.485,49,0.65,53,0.553,56,0.553,67,2.135,73,0.983,86,0.983,93,1.494,116,3.332,141,0.65,145,0.018,146,0.022,147,0.018,148,0.025,149,0.71,150,1.156,151,0.983,152,0.983,153,0.983,154,0.983,157,0.909,158,0.983,159,1.648,160,1.295,162,1.25,164,1.25,168,0.839,243,0.773,253,0.839,254,1.25,255,1.25,256,0.983,257,1.447,258,0.983,259,0.983,260,0.71,261,0.71,262,0.983,263,0.65,264,0.983,265,0.71,266,1.375,267,0.71,268,0.992,269,0.983,270,0.65,271,0.983,272,0.71,273,0.839,274,0.983,275,1.044,276,0.983,277,0.71,278,0.983,279,0.65,280,0.983,281,0.71,282,0.909,283,0.71,284,0.983,285,0.71,286,0.65,287,0.983,288,0.71,289,0.983,290,0.71,291,0.65,292,0.983,293,0.983,359,1.35,360,1.485,374,1.062,461,2.135,467,2.313,474,2.135,568,3.332,844,3.361,845,5.6,846,5.093,847,5.093,848,4.005,849,2.937,850,5.093]],["title/classes/NoteRepresentation.html",[0,0.074,72,1.769]],["body/classes/NoteRepresentation.html",[0,0.103,1,4.188,2,1.017,3,0.243,4,0.216,5,0.216,6,3.972,7,1.465,8,0.65,9,3.211,10,1.859,11,3.436,12,3.701,13,0.6,14,0.899,15,2.49,16,1.401,17,4.84,18,0.71,19,1.465,20,1.879,23,0.809,24,1.879,25,1.7,26,1.065,28,1.422,29,0.03,30,0.682,31,0.698,32,1.422,34,1.879,35,1.879,36,1.879,37,3.833,39,1.159,41,1.465,42,4.149,43,1.879,44,1.879,45,2.846,46,1.879,48,1.515,49,0.918,50,1.879,52,1.879,53,0.243,54,1.323,55,1.642,56,0.368,57,3.934,58,1.677,59,1.535,60,3.436,61,3.436,62,3.436,63,3.436,64,1.65,65,2.846,66,2.846,67,1.422,68,1.984,69,2.846,70,2.219,71,2.219,72,2.781,73,0.654,74,2.005,75,1.879,76,1.684,77,1.879,78,1.642,79,1.642,80,4.452,81,3.35,82,1.674,83,1.129,84,3.833,85,3.436,86,1.035,87,2.005,88,3.491,89,2.846,90,2.487,91,4.119,92,1.54,93,1.037,94,2.846,95,2.846,96,2.846,97,2.846,98,2.005,99,2.487,100,2.846,101,3.833,102,2.846,103,1.674,104,1.129,105,2.846,106,1.323,107,0.899,108,3.436,109,1.879,110,3.833,111,2.246,112,2.73,113,4.119,114,2.219,115,3.833,116,2.219,117,2.846,118,2.846,119,1.879,120,3.436,121,1.879,122,4.334,123,2.846,124,1.879,125,1.879,126,1.005,127,2.846,128,2.846,129,3.787,130,2.846,131,1.879,132,2.846,133,1.879,134,1.879,135,3.833,136,2.846,137,1.879,138,2.846,139,0.833,140,1.879,141,0.741,142,2.487,143,3.833,144,1.879,145,0.01,146,0.015,147,0.01,168,0.71,345,1.674,398,1.105,851,3.391,852,3.391,853,3.391,854,4.094,855,3.391,856,3.391,857,3.391,858,3.391,859,2.239,860,2.239,861,2.239,862,2.239,863,2.239,864,2.239,865,2.239,866,2.239,867,1.879,868,2.239,869,2.239,870,2.239,871,2.239,872,2.239]],["title/components/PlaybarComponent.html",[148,0.014,277,0.582]],["body/components/PlaybarComponent.html",[0,0.083,3,0.397,4,0.353,5,0.353,8,0.443,13,0.397,15,1.534,18,1.006,23,0.648,25,1.375,26,0.851,29,0.03,30,0.521,31,0.443,39,0.706,49,0.87,53,0.397,56,0.521,59,1.047,73,1.099,82,1.806,86,0.706,139,0.898,141,0.594,145,0.016,146,0.021,147,0.016,148,0.024,149,0.648,150,1.09,151,0.898,152,0.898,153,0.898,154,0.898,157,0.831,158,0.898,159,1.634,160,1.284,162,1.179,164,1.179,168,0.767,243,0.706,247,1.806,248,1.314,249,1.314,253,0.767,254,1.179,255,1.179,256,0.898,257,1.398,258,0.898,259,0.898,260,0.648,261,0.648,262,0.898,263,0.594,264,0.898,265,0.648,266,1.317,267,0.648,268,0.648,269,0.898,270,0.594,271,0.898,272,0.648,273,0.767,274,0.898,275,0.648,276,0.898,277,1.048,278,0.898,279,0.594,280,0.898,281,0.648,282,0.831,283,0.648,284,0.898,285,0.648,286,0.594,287,0.898,288,0.648,289,0.898,290,0.648,291,0.87,292,0.898,293,0.898,359,1.274,360,1.422,365,2.647,373,2.371,374,0.97,383,2.182,385,1.534,386,1.534,411,2.163,441,2.163,445,2.163,461,2.014,464,2.163,467,2.182,474,2.014,488,2.84,525,2.394,535,3.143,572,4.032,574,3.171,585,2.84,589,2.163,652,1.725,657,3.726,742,3.509,755,3.067,775,2.588,799,3.143,873,3.071,874,4.804,875,4.804,876,4.032,877,4.804,878,4.804,879,4.804,880,5.364,881,4.804,882,5.695,883,3.659,884,3.659,885,3.659,886,3.659,887,3.659,888,3.659,889,2.684,890,2.163,891,4.804,892,3.071,893,3.659,894,3.659]],["title/components/RhythmComponent.html",[148,0.014,279,0.533]],["body/components/RhythmComponent.html",[0,0.032,3,0.154,4,0.137,5,0.137,8,0.608,9,2.308,10,1.602,13,0.486,14,0.626,16,1.305,18,0.494,23,0.251,25,1.562,26,1.081,28,1.331,29,0.03,30,0.609,31,0.723,32,1.331,39,1.107,48,1.626,49,0.931,53,0.459,56,0.256,58,1.282,59,1.12,64,1.12,68,0.847,73,0.455,76,1.038,83,0.472,86,1.145,87,2.878,88,2.622,92,0.644,93,1.017,99,1.73,104,0.785,106,1.395,107,1.331,111,0.51,112,1.919,114,0.928,126,1.232,139,0.348,141,0.871,145,0.013,146,0.01,147,0.006,148,0.017,149,0.251,150,0.687,151,0.348,152,0.348,153,0.348,154,0.348,157,0.322,158,0.348,159,1.409,160,1.118,162,0.579,164,0.579,168,1.125,214,1.642,238,2.622,243,0.455,246,0.644,247,0.7,248,1.517,249,1.961,250,2.251,251,2.211,252,2.086,253,0.297,254,0.579,255,0.579,256,0.348,257,0.866,258,0.348,259,0.348,260,0.251,261,0.251,262,0.348,263,0.23,264,0.348,265,0.251,266,0.743,267,0.251,268,0.251,269,0.348,270,0.23,271,0.348,272,0.251,273,0.297,274,0.348,275,0.251,276,0.348,277,0.251,278,0.348,279,0.726,280,0.348,281,0.251,282,0.322,283,0.251,284,0.348,285,0.251,286,0.383,287,0.348,288,0.251,289,0.348,290,0.251,291,0.995,292,0.348,293,0.348,346,2.562,359,0.626,360,0.803,365,0.7,367,2.498,372,1.191,373,0.7,374,0.376,377,1.73,383,1.919,385,1.479,386,1.771,387,2.034,388,1.164,393,1.79,394,1.9,395,0.839,396,1.602,398,1.494,400,1.164,401,0.839,404,1.73,406,1.946,407,1.602,410,3.285,413,2.221,434,1.191,435,1.041,440,1.164,441,1.395,442,0.928,443,1.395,444,1.395,445,0.839,446,1.631,448,2.211,449,1.79,450,1.981,451,1.191,461,0.989,467,1.919,470,1.98,473,0.7,474,0.595,476,1.98,477,1.98,486,1.271,488,0.839,489,1.191,491,2.878,492,1.98,493,1.631,494,1.191,495,1.191,498,1.041,499,1.041,500,0.928,501,1.631,503,1.73,505,1.041,513,0.839,524,2.086,525,2.765,527,2.104,532,2.308,535,3.954,543,1.041,544,1.544,545,1.395,567,2.562,568,2.765,578,2.632,579,2.381,586,0.839,587,0.764,591,0.928,592,1.041,602,1.041,603,1.73,605,2.221,617,1.98,618,1.73,627,1.741,641,2.308,643,1.98,652,1.85,666,1.041,679,1.191,681,1.191,704,1.191,714,1.73,715,2.961,716,1.191,717,3.547,718,1.191,719,2.765,721,2.541,724,1.191,725,1.98,726,2.221,727,1.191,728,1.191,740,2.961,750,2.541,755,1.631,757,1.544,763,1.191,765,1.98,768,1.041,770,1.191,771,3.286,772,2.541,775,1.271,797,1.191,803,3.099,805,1.041,849,1.041,889,1.73,890,0.839,892,1.191,895,1.191,896,2.359,897,2.359,898,3.028,899,2.359,900,3.028,901,3.028,902,3.028,903,3.028,904,5.152,905,3.028,906,3.028,907,3.028,908,3.028,909,3.028,910,1.98,911,2.359,912,4.226,913,2.359,914,2.359,915,2.359,916,2.359,917,2.359,918,2.359,919,2.359,920,3.528,921,3.528,922,1.98,923,1.419,924,4.085,925,2.359,926,1.419,927,2.961,928,3.528,929,1.98,930,1.419,931,2.359,932,3.528,933,2.359,934,3.936,935,1.419,936,3.528,937,5.614,938,2.359,939,2.961,940,3.528,941,2.359,942,1.419,943,2.359,944,2.359,945,4.117,946,2.359,947,2.359,948,2.359,949,2.359,950,2.359,951,2.359,952,1.419,953,1.419,954,1.419,955,2.359,956,1.419,957,2.359,958,1.419,959,1.419,960,1.419,961,1.419,962,1.191,963,1.191,964,1.041,965,2.587,966,1.419,967,1.419,968,2.359,969,1.419,970,2.359,971,3.528,972,1.419,973,1.419,974,2.359,975,2.359,976,2.359,977,1.419,978,2.359,979,2.359,980,5.68,981,1.419,982,4.226,983,1.419,984,1.419,985,2.541,986,1.419,987,2.359,988,1.419,989,1.419,990,2.359,991,1.419,992,1.419,993,2.961,994,1.98,995,1.419,996,1.98,997,1.419,998,1.419,999,1.419,1000,1.419,1001,2.359,1002,3.916,1003,1.191,1004,3.028,1005,1.419,1006,1.419,1007,1.419,1008,2.359,1009,2.359,1010,3.028,1011,1.419,1012,3.028,1013,3.028,1014,3.528,1015,1.419,1016,1.419,1017,1.419,1018,1.419,1019,1.419,1020,1.419,1021,2.359,1022,1.419,1023,1.419,1024,1.419,1025,1.419,1026,1.419,1027,2.359,1028,1.419,1029,1.419,1030,1.419,1031,1.419,1032,1.419,1033,1.419,1034,1.191,1035,1.419,1036,1.191,1037,1.419,1038,1.419,1039,1.419,1040,1.419,1041,1.419,1042,1.419,1043,2.359,1044,1.98,1045,1.419,1046,2.359,1047,1.419,1048,1.419,1049,4.868,1050,1.419,1051,2.359,1052,1.419,1053,2.541,1054,1.419,1055,2.359,1056,1.191,1057,1.419,1058,1.419,1059,1.419,1060,1.419,1061,1.419,1062,2.359,1063,4.868,1064,1.419,1065,3.028,1066,3.028,1067,1.191,1068,1.98,1069,1.419,1070,1.191,1071,1.419,1072,1.191,1073,1.191,1074,1.191,1075,1.419,1076,1.191,1077,1.98,1078,2.359,1079,2.359,1080,1.419,1081,1.419,1082,1.98,1083,2.359,1084,1.98,1085,1.419,1086,1.98,1087,1.191,1088,1.419,1089,1.419,1090,0.839,1091,3.028,1092,3.028,1093,1.419,1094,1.419,1095,2.359]],["title/components/SaveMenuComponent.html",[148,0.014,281,0.582]],["body/components/SaveMenuComponent.html",[0,0.093,3,0.448,4,0.398,5,0.398,8,0.5,23,0.731,29,0.03,30,0.563,49,0.669,53,0.448,56,0.563,73,1.001,82,2.037,139,1.013,145,0.018,146,0.023,147,0.018,148,0.027,149,0.731,150,1.178,151,1.013,152,1.013,153,1.013,154,1.013,157,0.937,158,1.013,159,1.653,160,1.299,162,1.274,164,1.274,243,0.796,253,0.864,254,1.274,255,1.274,256,1.013,257,1.463,258,1.013,259,1.013,260,0.731,261,0.731,262,1.013,263,0.669,264,1.013,265,0.731,266,1.394,267,0.731,268,0.731,269,1.013,270,0.669,271,1.013,272,0.731,273,0.864,274,1.013,275,0.731,276,1.013,277,0.731,278,1.013,279,0.669,280,1.013,281,1.056,282,1.484,283,0.731,284,1.013,285,0.731,286,0.669,287,1.013,288,0.731,289,1.013,290,0.731,291,0.669,292,1.013,293,1.013,328,3.027,359,1.376,360,1.506,374,1.094,457,2.7,458,4.369,461,2.176,462,4.164,463,3.806,464,2.44,1096,3.463]],["title/classes/Signature.html",[0,0.074,578,1.492]],["body/classes/Signature.html",[0,0.104,2,1.246,3,0.298,4,0.264,5,0.264,8,0.61,10,2.975,13,0.298,14,1.045,15,2.501,16,1.385,18,0.825,23,0.486,25,1.127,26,1.097,28,1.415,29,0.03,30,0.636,31,0.693,32,1.553,39,1.214,41,2.578,48,1.808,49,0.866,53,0.298,56,0.298,58,1.442,59,1.85,64,1.638,68,1.415,76,1.336,86,0.972,93,1.261,104,0.913,107,0.727,111,1.656,126,0.967,141,1.004,145,0.012,146,0.017,147,0.012,168,1.056,261,0.698,345,2.488,501,3.614,527,1.652,529,2.578,578,3.003,598,3.696,627,1.945,652,0.985,669,3.191,670,1.621,764,3.307,1097,2.302,1098,5.04,1099,5.04,1100,5.04,1101,5.04,1102,5.04,1103,3.94,1104,3.94,1105,3.94,1106,3.94,1107,3.94,1108,3.94,1109,2.89,1110,5.04,1111,5.04,1112,3.696,1113,3.307,1114,2.743,1115,3.94,1116,2.743,1117,3.94,1118,2.743,1119,3.636,1120,5.557,1121,2.743,1122,2.743,1123,2.743,1124,3.94,1125,3.94,1126,2.743,1127,3.94,1128,3.94,1129,2.743,1130,3.94,1131,2.743,1132,3.94,1133,2.743,1134,2.578,1135,4.611,1136,5.557,1137,2.743,1138,5.338,1139,5.557,1140,3.94,1141,3.94,1142,3.94,1143,2.743,1144,2.743,1145,2.743,1146,3.382,1147,2.743,1148,2.302,1149,2.743,1150,2.302,1151,2.743]],["title/components/SignatureComponent.html",[148,0.014,283,0.582]],["body/components/SignatureComponent.html",[0,0.057,3,0.274,4,0.243,5,0.243,8,0.587,10,1.685,13,0.274,14,0.984,16,1.199,18,0.777,23,0.447,25,1.387,26,1.067,28,1.166,29,0.03,30,0.654,31,0.693,32,1.166,39,1.127,48,1.145,49,0.876,53,0.477,56,0.402,58,1.258,59,1.723,64,1.258,67,2.032,68,1.332,73,0.848,76,1.285,83,0.84,86,0.848,93,1.478,107,1.369,111,1.939,139,1.08,141,0.838,145,0.011,146,0.016,147,0.011,148,0.023,149,0.447,150,0.842,151,0.62,152,0.62,153,0.62,154,0.62,157,0.573,158,0.62,159,1.563,160,1.228,161,1.851,162,0.911,164,0.911,168,1.082,238,3.084,243,0.487,246,1.147,248,0.906,249,1.332,253,0.529,254,0.911,255,0.911,256,0.62,257,1.19,258,0.62,259,0.62,260,0.447,261,0.447,262,0.62,263,0.409,264,0.62,265,0.447,266,1.08,267,0.447,268,0.447,269,0.62,270,0.409,271,0.62,272,0.447,273,0.529,274,0.62,275,0.447,276,0.62,277,0.447,278,0.62,279,0.409,280,0.62,281,0.447,282,0.573,283,1.035,284,0.62,285,0.447,286,0.409,287,0.62,288,0.657,289,0.62,290,0.447,291,0.409,292,0.62,293,0.62,345,2.665,359,0.984,360,1.166,365,2.171,373,1.831,374,0.669,382,1.851,383,1.685,384,1.492,385,1.058,386,1.058,387,1.997,388,1.246,391,2.193,392,2.193,393,1.492,394,1.36,395,1.492,396,1.685,397,1.851,400,2.171,406,0.979,407,1.147,443,1.492,444,1.492,446,1.36,447,1.492,448,1.246,449,1.492,450,1.652,461,1.555,486,1.36,493,1.36,501,2.781,513,1.492,527,1.555,578,2.876,586,1.492,591,2.427,607,3.113,641,2.427,651,3.746,652,1.74,669,3.126,670,1.492,705,1.851,775,2.611,889,1.851,890,2.193,1112,2.72,1113,3.113,1119,2.427,1146,2.72,1152,2.119,1153,3.709,1154,3.709,1155,3.113,1156,4.397,1157,3.709,1158,4.397,1159,4.397,1160,4.397,1161,4.397,1162,4.068,1163,2.427,1164,2.427,1165,3.709,1166,4.847,1167,4.847,1168,2.524,1169,4.068,1170,4.068,1171,1.851,1172,2.72,1173,2.524,1174,3.555,1175,2.72,1176,2.524,1177,3.709,1178,2.524,1179,2.524,1180,2.524,1181,2.524,1182,2.524,1183,3.709,1184,2.524,1185,2.524,1186,3.709,1187,2.524,1188,2.524,1189,2.524,1190,3.709,1191,3.709,1192,2.524,1193,3.709,1194,3.709,1195,3.709,1196,2.524,1197,3.709,1198,3.709,1199,2.524,1200,2.119,1201,1.851,1202,2.119,1203,2.119,1204,2.119,1205,2.524,1206,2.524,1207,2.524,1208,3.709,1209,3.709,1210,2.524,1211,3.225,1212,2.524,1213,2.119,1214,2.119,1215,3.113,1216,3.113,1217,3.113,1218,2.119,1219,3.113,1220,4.068,1221,2.427,1222,2.119]],["title/components/SoundPlayerComponent.html",[148,0.014,285,0.582]],["body/components/SoundPlayerComponent.html",[0,0.065,3,0.31,4,0.275,5,0.454,8,0.571,13,0.31,14,1.075,15,1.976,16,1.213,18,0.849,23,0.506,25,1.16,26,1.026,28,1.075,29,0.03,30,0.611,31,0.656,32,1.075,39,0.99,48,1.673,49,0.879,53,0.44,54,1.687,55,2.092,56,0.44,58,1.16,73,0.99,76,1.075,86,0.909,104,0.95,107,1.075,126,0.995,141,0.879,145,0.013,146,0.018,147,0.013,148,0.024,149,0.506,150,0.92,151,0.7,152,0.7,153,0.7,154,0.7,157,0.648,158,0.7,159,1.588,160,1.248,162,0.995,164,0.995,168,0.987,243,0.55,253,0.598,254,0.995,255,0.995,256,0.7,257,1.26,258,0.7,259,0.7,260,0.506,261,0.506,262,0.7,263,0.463,264,0.7,265,0.506,266,1.157,267,0.506,268,0.506,269,0.7,270,0.463,271,0.7,272,0.506,273,0.598,274,0.7,275,0.506,276,0.7,277,0.506,278,0.7,279,0.463,280,0.7,281,0.506,282,0.648,283,0.506,284,0.7,285,0.909,286,1.08,287,0.7,288,0.506,289,0.7,290,0.506,291,0.463,292,0.7,293,0.7,337,3.873,359,1.075,360,1.25,365,2.326,373,2,374,0.757,445,2.786,467,1.841,474,1.976,570,2.092,574,2.786,585,2.396,589,1.687,627,2.533,640,3.763,642,3.456,646,3.357,652,1.842,657,3.357,694,2.972,742,3.357,755,3.033,785,2.395,786,2.395,787,2.395,788,2.395,789,2.395,799,3.084,867,3.401,876,4.725,985,3.401,996,3.401,1223,4.967,1224,2.395,1225,3.401,1226,4.967,1227,4.053,1228,4.053,1229,3.401,1230,4.713,1231,4.053,1232,4.053,1233,5.131,1234,3.401,1235,2.853,1236,2.853,1237,2.853,1238,5.419,1239,4.053,1240,2.853,1241,4.053,1242,5.419,1243,4.053,1244,4.053,1245,2.853,1246,3.401,1247,2.853,1248,5.053,1249,4.713,1250,3.955,1251,2.853,1252,2.853,1253,2.853,1254,2.853,1255,2.853,1256,2.853,1257,4.713,1258,2.853,1259,2.853,1260,2.853,1261,2.853,1262,2.853,1263,2.853,1264,2.853,1265,2.853,1266,2.395,1267,2.853,1268,2.395,1269,2.853,1270,2.853,1271,2.853]],["title/classes/Tempo.html",[0,0.074,579,1.377]],["body/classes/Tempo.html",[0,0.112,2,1.428,3,0.341,4,0.303,5,0.303,8,0.648,13,0.341,14,1.15,15,2.434,16,1.347,18,0.909,23,0.557,25,1.241,26,1.104,28,1.317,29,0.03,30,0.581,31,0.68,32,1.317,39,1.224,48,1.652,49,0.704,53,0.341,56,0.341,58,1.532,59,1.9,64,1.703,76,1.42,86,1.12,93,1.48,104,1.047,107,0.834,111,1.129,114,2.058,126,1.065,145,0.014,146,0.019,147,0.014,261,0.769,345,2.451,579,2.789,615,3.181,625,4.763,632,3.181,634,4.494,635,3.641,636,3.641,652,1.129,662,3.181,664,2.838,666,2.306,669,3.154,670,1.859,1109,3.181,1112,2.306,1119,4.027,1148,3.641,1150,3.641,1171,4.365,1201,4.614,1225,3.641,1272,2.639,1273,5.354,1274,5.354,1275,5.354,1276,5.354,1277,5.354,1278,3.641,1279,4.338,1280,4.338,1281,3.145,1282,4.338,1283,3.145,1284,3.145,1285,3.145,1286,3.145,1287,3.145,1288,3.145,1289,3.641,1290,3.145,1291,3.145,1292,3.145,1293,4.714,1294,4.966,1295,4.966,1296,3.145,1297,4.338,1298,3.145,1299,3.145,1300,3.145]],["title/components/TempoComponent.html",[148,0.014,288,0.582]],["body/components/TempoComponent.html",[0,0.055,3,0.262,4,0.232,5,0.232,8,0.613,13,0.262,14,0.951,16,0.993,18,0.751,23,0.427,25,1.356,26,1.069,28,1.257,29,0.03,30,0.655,31,0.699,32,1.257,39,1.133,48,1.463,49,0.936,53,0.464,56,0.389,58,1.356,59,1.727,64,1.225,67,1.987,73,0.692,76,1.408,83,1.578,86,1.114,93,1.486,107,1.458,111,1.907,139,0.592,141,0.769,145,0.011,146,0.016,147,0.011,148,0.024,149,0.427,150,0.814,151,0.592,152,0.592,153,0.592,154,0.592,157,0.547,158,0.592,159,1.552,160,1.22,161,1.768,162,0.88,164,0.88,168,0.993,237,3.101,238,2.553,243,0.465,246,1.095,248,0.866,249,0.866,250,1.01,252,1.425,253,0.505,254,0.88,255,0.88,256,0.592,257,1.164,258,0.592,259,0.592,260,0.427,261,0.427,262,0.592,263,0.391,264,0.592,265,0.427,266,1.051,267,0.427,268,0.427,269,0.592,270,0.391,271,0.592,272,0.427,273,0.505,274,0.592,275,0.427,276,0.592,277,0.427,278,0.592,279,0.391,280,0.592,281,0.427,282,0.547,283,0.427,284,0.592,285,0.427,286,0.391,287,0.592,288,0.84,289,0.592,290,0.427,291,0.391,292,0.592,293,0.592,345,2.621,359,0.951,360,1.135,364,3.009,365,2.339,367,2.119,370,2.629,373,1.769,374,0.639,382,1.768,383,1.095,385,1.01,386,1.01,387,1.944,388,1.19,391,2.119,392,2.119,393,1.425,394,1.298,395,1.425,396,1.628,397,1.768,400,2.113,406,1.39,407,1.095,446,1.298,447,1.425,448,1.19,449,1.425,450,2.346,455,1.768,474,1.01,486,1.298,493,1.298,497,1.768,543,2.629,579,2.707,587,1.298,615,2.629,625,4.309,632,2.629,651,3.474,652,1.819,654,3.009,669,3.063,670,1.425,676,2.023,705,2.629,757,2.346,775,2.553,890,2.119,1034,3.009,1036,3.009,1090,2.119,1146,2.629,1162,3.978,1163,2.346,1164,2.346,1169,5.066,1170,3.978,1171,4.234,1172,2.629,1174,3.476,1175,2.629,1200,2.023,1201,3.139,1202,2.023,1203,2.023,1204,2.023,1211,2.629,1213,2.023,1214,2.023,1215,3.009,1216,3.009,1217,3.009,1218,2.023,1219,3.009,1220,3.978,1221,2.346,1222,2.023,1278,3.009,1289,3.009,1293,3.009,1301,2.023,1302,3.585,1303,4.74,1304,4.28,1305,3.585,1306,4.28,1307,4.28,1308,4.28,1309,4.74,1310,4.74,1311,4.28,1312,2.411,1313,3.585,1314,2.411,1315,2.411,1316,2.411,1317,2.411,1318,2.411,1319,2.411,1320,2.411,1321,2.411,1322,4.74,1323,2.411,1324,2.411,1325,3.585,1326,2.411,1327,4.74,1328,2.411,1329,2.411,1330,4.74,1331,2.411,1332,2.411,1333,4.28,1334,3.585,1335,2.411,1336,3.585,1337,2.411,1338,3.585,1339,2.411]],["title/classes/Track.html",[0,0.074,291,0.533]],["body/classes/Track.html",[0,0.097,2,1.088,3,0.26,4,0.231,5,0.231,8,0.698,9,2.335,13,0.463,14,0.946,15,2.649,16,1.382,18,0.748,23,0.756,26,1.139,28,1.556,29,0.03,30,0.637,31,0.745,32,1.631,39,1.219,48,1.837,49,0.935,53,0.387,56,0.26,58,1.57,59,1.614,64,1.352,67,2.649,68,1.282,74,2.522,76,1.655,86,0.912,87,2.11,88,1.291,92,1.088,93,1.469,98,2.11,106,1.417,107,1.528,112,2.562,126,1.301,141,0.692,145,0.011,146,0.016,147,0.011,168,0.502,214,1.981,261,0.632,286,0.82,291,1.09,440,2.333,524,1.762,527,2.364,529,2.335,531,3.58,532,2.791,534,2.996,535,2.335,536,2.996,544,1.568,545,1.417,558,2.011,567,3.944,568,2.335,616,2.996,641,2.335,650,4.658,698,3.58,755,2.545,805,3.466,910,2.996,922,2.011,945,4.366,964,4.762,965,3.466,1090,2.11,1229,2.996,1340,2.011,1341,4.265,1342,4.265,1343,3.569,1344,3.966,1345,4.726,1346,4.265,1347,3.569,1348,3.569,1349,4.726,1350,4.265,1351,3.569,1352,3.569,1353,3.569,1354,3.569,1355,3.569,1356,3.569,1357,3.569,1358,2.396,1359,2.396,1360,2.396,1361,2.396,1362,2.396,1363,3.569,1364,3.966,1365,2.396,1366,2.396,1367,2.396,1368,3.569,1369,2.396,1370,3.569,1371,3.569,1372,5.298,1373,3.569,1374,2.396,1375,2.396,1376,2.396,1377,2.396,1378,2.396,1379,2.396,1380,2.396,1381,2.396,1382,2.396,1383,2.396,1384,2.396,1385,3.569,1386,2.396,1387,2.396,1388,2.396,1389,3.569,1390,2.396,1391,2.396,1392,2.396,1393,2.396,1394,2.396,1395,2.396,1396,3.569,1397,3.569,1398,3.569,1399,3.569,1400,3.569,1401,2.396,1402,3.569,1403,2.996]],["title/components/TrackComponent.html",[148,0.014,290,0.582]],["body/components/TrackComponent.html",[0,0.042,3,0.201,4,0.35,5,0.178,8,0.439,10,1.873,12,1.209,13,0.201,14,0.775,16,1.119,18,0.612,23,0.327,25,1.565,26,1.073,28,0.962,29,0.03,30,0.487,31,0.676,32,0.962,39,1.03,48,1.601,49,0.966,53,0.563,56,0.317,58,1.038,59,1.431,64,0.529,72,1.575,73,0.921,74,1.093,76,0.775,83,0.973,86,1.138,88,0.995,92,1.328,93,0.823,103,0.912,104,0.615,107,1.637,111,1.796,126,1.273,139,0.454,141,0.905,142,3.916,145,0.008,146,0.013,147,0.008,148,0.02,149,0.327,150,0.664,151,0.454,152,0.454,153,0.454,154,0.454,157,0.419,158,0.454,159,1.487,160,1.168,162,0.718,164,0.718,168,1.146,214,0.775,238,1.575,243,0.357,246,0.839,247,0.912,248,1.715,249,1.964,250,2.497,251,2.578,252,2.957,253,0.387,254,0.718,255,0.718,256,0.454,257,1.012,258,0.454,259,0.454,260,0.327,261,0.796,262,0.454,263,0.3,264,0.454,265,0.327,266,0.89,267,0.327,268,0.327,269,0.454,270,0.3,271,0.454,272,0.327,273,0.387,274,0.454,275,0.327,276,0.454,277,0.327,278,0.454,279,0.3,280,0.454,281,0.327,282,0.419,283,0.327,284,0.454,285,0.518,286,0.775,287,0.454,288,0.327,289,0.454,290,0.989,291,1.058,292,0.454,293,0.454,337,1.209,338,1.551,346,1.913,359,0.775,360,0.962,361,3.044,362,2.454,365,2.469,373,2.035,374,0.49,383,1.647,384,1.093,385,1.225,386,1.728,387,1.873,388,1.79,389,1.355,390,1.728,391,2.144,392,1.093,394,0.995,396,1.328,398,2.357,399,2.373,400,1.443,401,2.144,405,1.913,406,2.261,407,2.356,409,2.66,410,2.698,411,1.728,412,2.144,428,1.551,440,1.443,445,2.144,446,2.794,447,1.093,448,2.801,449,2.437,452,1.209,453,2.66,454,1.355,461,1.225,467,1.328,473,2.217,474,2.097,486,0.995,488,2.437,491,1.093,493,1.575,498,2.144,499,1.355,500,1.913,501,1.575,511,1.551,513,1.093,524,0.912,525,1.209,529,1.913,574,2.144,578,2.484,579,2.293,585,1.728,586,1.093,587,0.995,589,1.093,603,1.355,604,3.044,605,2.66,619,3.044,640,3.024,648,2.454,650,2.66,651,1.913,652,1.918,714,1.355,719,2.373,726,2.144,742,2.373,755,2.221,775,2.419,799,1.209,833,1.551,849,2.144,890,1.093,924,3.044,927,3.044,929,2.454,934,3.77,939,1.551,945,2.144,963,3.044,964,2.144,965,2.144,993,3.46,1003,1.551,1044,3.044,1067,1.551,1068,1.551,1070,1.551,1072,1.551,1073,1.551,1074,1.551,1076,1.551,1077,2.454,1082,2.454,1084,2.454,1086,1.551,1087,1.551,1090,1.093,1211,1.355,1226,1.551,1234,2.454,1246,2.454,1248,4.59,1250,2.454,1266,1.551,1268,2.454,1344,3.46,1364,3.77,1403,1.551,1404,1.551,1405,2.923,1406,2.923,1407,3.627,1408,3.627,1409,4.123,1410,2.923,1411,4.123,1412,2.923,1413,4.123,1414,3.627,1415,1.848,1416,1.848,1417,1.848,1418,1.848,1419,1.848,1420,1.848,1421,2.923,1422,1.848,1423,2.923,1424,1.848,1425,1.848,1426,1.848,1427,2.923,1428,1.848,1429,1.848,1430,2.923,1431,2.923,1432,1.848,1433,1.848,1434,1.848,1435,1.848,1436,1.848,1437,1.848,1438,1.848,1439,2.923,1440,3.627,1441,1.848,1442,1.848,1443,1.848,1444,1.848,1445,1.848,1446,1.848,1447,1.848,1448,1.848,1449,1.551,1450,1.848,1451,1.848,1452,1.848,1453,1.848,1454,2.923,1455,2.923,1456,1.848,1457,1.848,1458,2.923,1459,1.848,1460,2.923,1461,3.627,1462,2.923,1463,1.848,1464,1.848,1465,1.848,1466,2.923,1467,1.848,1468,1.848,1469,1.848,1470,1.848,1471,1.848,1472,2.923,1473,2.923,1474,3.627,1475,1.848,1476,4.123,1477,4.776,1478,1.848,1479,3.627,1480,3.627,1481,1.848,1482,1.551,1483,1.848,1484,3.627,1485,1.848,1486,2.923,1487,1.848,1488,1.848,1489,1.848,1490,1.848,1491,1.848,1492,1.848,1493,1.848,1494,1.848,1495,1.848,1496,1.848,1497,2.923,1498,1.848,1499,2.923,1500,1.848,1501,1.848,1502,1.848]],["title/coverage.html",[1503,3.751]],["body/coverage.html",[0,0.142,1,2.525,5,0.372,6,3.254,7,3.254,19,2.525,29,0.03,31,0.467,54,2.94,72,2.078,86,0.744,93,0.876,145,0.017,146,0.022,147,0.017,148,0.029,149,0.684,155,3.238,251,3.102,260,0.684,263,0.626,265,0.684,267,0.684,268,0.684,270,0.626,272,0.684,275,0.684,277,0.684,279,0.626,281,0.684,283,0.684,285,0.684,288,0.684,290,0.684,291,0.626,320,2.83,325,2.83,328,2.83,329,2.83,335,2.83,337,2.525,352,3.238,353,3.238,414,3.238,456,3.238,457,3.6,465,3.238,527,1.617,528,3.238,566,3.238,578,1.752,579,1.617,606,3.238,737,3.238,738,3.238,801,3.238,844,3.238,873,3.238,895,3.238,962,5.382,1096,3.238,1097,3.238,1134,3.254,1152,3.238,1163,2.525,1164,2.525,1223,3.238,1224,3.238,1272,3.238,1301,3.238,1340,3.238,1404,3.238,1503,3.238,1504,3.858,1505,3.858,1506,3.858,1507,5.812,1508,3.858,1509,4.035,1510,3.238,1511,6.608,1512,3.238,1513,4.973,1514,4.973,1515,5.502,1516,4.973,1517,3.858,1518,4.411,1519,4.516,1520,3.238,1521,2.83,1522,3.238,1523,3.858,1524,3.858,1525,3.858,1526,3.858,1527,3.858,1528,3.238,1529,4.973,1530,3.238,1531,3.858,1532,3.858]],["title/dependencies.html",[297,2.582,1533,2.749]],["body/dependencies.html",[29,0.03,145,0.022,146,0.026,147,0.022,243,0.96,297,3.256,313,4.88,314,4.264,317,4.176,343,4.176,357,4.176,1534,4.976,1535,5.585,1536,4.976,1537,4.976,1538,4.176,1539,4.976,1540,4.976,1541,4.976,1542,4.976,1543,4.976,1544,4.976,1545,4.976,1546,4.976,1547,4.976]],["title/miscellaneous/enumerations.html",[1548,1.249,1549,3.312]],["body/miscellaneous/enumerations.html",[13,0.335,16,1.313,29,0.03,30,0.605,31,0.374,67,2.061,70,2.801,71,2.801,81,2.263,83,1.857,93,1.507,103,1.523,112,1.944,126,1.051,129,3.14,141,1.077,145,0.014,146,0.019,147,0.014,214,1.795,286,0.694,406,1.66,497,2.263,509,2.589,512,3.593,524,2.621,595,2.589,598,3.14,599,3.593,621,2.263,669,2.113,768,3.14,816,2.589,830,3.593,1134,3.475,1221,2.019,1482,2.589,1509,2.263,1518,2.263,1519,4.234,1521,2.263,1548,1.401,1549,2.589,1550,2.589,1551,2.589,1552,4.281,1553,3.085,1554,2.589,1555,3.085,1556,5.311,1557,3.085,1558,3.085,1559,4.457,1560,4.916,1561,3.085,1562,5.579,1563,3.085,1564,4.457,1565,3.085,1566,5.311,1567,3.085,1568,3.085,1569,2.589,1570,4.281,1571,4.281,1572,4.281,1573,5.311,1574,4.281,1575,4.281,1576,4.281,1577,4.281,1578,4.281,1579,4.281,1580,3.085,1581,3.085,1582,4.281,1583,4.281,1584,4.281,1585,6.036,1586,4.281,1587,4.281,1588,4.281,1589,4.281,1590,4.281,1591,4.281,1592,4.281,1593,4.281,1594,3.085,1595,3.085,1596,3.085,1597,4.281,1598,3.085,1599,2.589,1600,3.085,1601,3.085,1602,3.085,1603,3.085,1604,3.085,1605,3.085,1606,3.085,1607,3.085,1608,4.281,1609,3.085,1610,4.281,1611,3.085,1612,3.085,1613,3.085,1614,3.085,1615,3.085,1616,3.085,1617,3.085,1618,3.085,1619,3.085,1620,3.085,1621,3.085,1622,3.085,1623,3.085,1624,3.085,1625,3.085,1626,3.085,1627,3.085,1628,3.085,1629,3.085,1630,3.085,1631,3.085,1632,3.085,1633,3.085,1634,3.085,1635,3.085,1636,3.085,1637,3.085,1638,3.085,1639,3.085,1640,3.085,1641,3.085,1642,3.085,1643,3.085,1644,3.085,1645,3.085,1646,3.085,1647,3.085,1648,3.085,1649,3.085,1650,3.085,1651,3.085,1652,3.085,1653,3.085,1654,3.085,1655,3.085,1656,3.085,1657,3.085,1658,3.085,1659,3.085,1660,3.085,1661,3.085,1662,3.085,1663,3.085,1664,3.085,1665,3.085,1666,3.085,1667,3.085,1668,3.085,1669,3.085,1670,3.085,1671,3.085,1672,3.085,1673,3.085,1674,3.085,1675,3.085,1676,3.085,1677,3.085,1678,3.085,1679,3.085,1680,3.085,1681,3.085,1682,3.085,1683,3.085,1684,3.085,1685,3.085,1686,3.085,1687,3.085,1688,3.085,1689,3.085,1690,3.085,1691,3.085,1692,3.085,1693,3.085,1694,3.085,1695,3.085,1696,3.085,1697,3.085,1698,3.085,1699,3.085,1700,3.085,1701,3.085,1702,3.085,1703,3.085,1704,3.085,1705,3.085,1706,3.085,1707,3.085,1708,3.085,1709,3.085,1710,3.085,1711,3.085,1712,3.085,1713,3.085,1714,3.085,1715,3.085,1716,3.085,1717,3.085,1718,3.085,1719,3.085,1720,3.085,1721,3.085,1722,3.085,1723,3.085,1724,3.085,1725,3.085,1726,3.085,1727,3.085,1728,3.085,1729,3.085,1730,3.085,1731,3.085,1732,3.085,1733,3.085,1734,3.085,1735,3.085,1736,3.085,1737,3.085,1738,3.085,1739,3.085,1740,3.085,1741,2.263,1742,3.085,1743,3.085,1744,3.085,1745,4.281,1746,3.085,1747,3.085,1748,3.085,1749,3.085,1750,3.085,1751,3.085,1752,3.085,1753,3.085,1754,3.085,1755,3.085,1756,3.085,1757,3.085,1758,3.085,1759,3.085,1760,3.085,1761,3.085,1762,3.085,1763,3.085,1764,3.085,1765,3.085,1766,3.085,1767,3.085,1768,3.085]],["title/miscellaneous/functions.html",[1548,1.249,1769,3.312]],["body/miscellaneous/functions.html",[8,0.76,12,3.266,13,0.421,16,1.292,19,3.266,28,1.663,29,0.03,30,0.724,32,1.663,39,1.239,42,3.661,72,2.091,76,1.635,78,2.847,83,1.661,88,2.091,90,2.847,92,2.267,93,1.526,111,2.164,112,1.763,126,0.953,141,0.81,145,0.017,146,0.022,147,0.017,160,0.749,214,1.627,286,0.977,345,3.169,473,1.916,621,4.047,627,1.916,642,2.847,659,2.847,669,2.723,719,2.54,757,3.61,803,2.847,813,3.257,994,3.257,1056,4.631,1119,3.266,1134,4.158,1163,3.266,1164,3.266,1172,2.847,1174,4.272,1175,2.847,1509,2.847,1510,4.189,1512,4.189,1518,2.847,1519,4.661,1520,4.189,1521,2.847,1522,4.189,1538,3.257,1548,1.763,1550,5.057,1551,3.257,1554,4.631,1559,3.257,1564,3.257,1741,2.847,1769,3.257,1770,4.992,1771,3.881,1772,3.881,1773,3.881,1774,3.881,1775,3.881,1776,3.881,1777,3.881,1778,3.881,1779,3.881,1780,3.881,1781,3.881,1782,3.881,1783,3.881,1784,3.881,1785,3.881]],["title/index.html",[13,0.298,1786,2.749,1787,2.749]],["body/index.html",[4,0.444,29,0.024,30,0.5,41,3.017,86,0.889,139,1.464,145,0.02,146,0.024,147,0.02,148,0.026,160,0.889,241,3.87,309,3.017,416,3.87,473,2.276,545,2.726,656,4.664,664,3.017,1053,3.87,1090,3.661,1155,4.664,1449,3.87,1535,3.87,1788,4.611,1789,5.965,1790,5.965,1791,4.611,1792,5.557,1793,6.337,1794,6.511,1795,4.611,1796,4.611,1797,4.611,1798,4.611,1799,4.611,1800,4.611,1801,4.611,1802,4.611,1803,4.611,1804,5.965,1805,4.611,1806,6.337,1807,4.611,1808,4.611,1809,4.611,1810,4.611,1811,4.611,1812,4.611,1813,3.87,1814,5.557,1815,6.192,1816,5.557,1817,5.557,1818,4.611,1819,4.611,1820,4.611,1821,4.611,1822,5.965,1823,3.381,1824,4.611,1825,4.611]],["title/modules.html",[296,2.642]],["body/modules.html",[29,0.026,79,3.843,145,0.023,146,0.026,147,0.023,295,3.429,296,3.098,306,3.098,314,3.843,1826,5.24,1827,5.99,1828,5.24,1829,5.24]],["title/overview.html",[1823,3.278]],["body/overview.html",[2,1.985,29,0.03,145,0.019,146,0.024,147,0.019,149,1.141,150,0.992,214,1.832,253,0.915,260,1.032,263,0.945,265,1.032,267,1.032,268,1.032,270,0.945,272,1.032,275,1.032,277,1.032,279,0.945,281,1.032,283,1.032,285,1.032,288,1.032,290,1.032,294,2.859,295,4.502,296,2.583,297,2.859,298,3.668,299,3.668,300,3.668,301,2.859,302,3.668,303,3.668,304,3.668,305,3.668,306,3.444,307,4.514,308,3.668,309,2.859,341,2.859,1221,2.859,1569,3.668,1599,3.668,1823,3.205]],["title/routes.html",[341,2.924]],["body/routes.html",[29,0.027,145,0.023,146,0.027,147,0.023,341,3.479]],["title/miscellaneous/typealiases.html",[1548,1.249,1830,3.946]],["body/miscellaneous/typealiases.html",[6,3.418,7,3.912,13,0.567,29,0.026,31,0.724,57,4.385,145,0.023,146,0.026,147,0.023,1548,2.372,1831,5.223,1832,5.223,1833,5.223]],["title/miscellaneous/variables.html",[1548,1.249,1834,3.312]],["body/miscellaneous/variables.html",[13,0.533,29,0.03,31,0.699,54,3.862,83,1.636,104,1.636,141,0.936,145,0.022,146,0.025,147,0.022,156,4.234,168,1.209,652,1.765,744,4.126,1109,4.234,1528,4.126,1530,4.126,1548,2.233,1741,3.606,1813,5.144,1834,5.144,1835,4.916,1836,4.916,1837,4.916,1838,4.916,1839,4.916,1840,4.916,1841,4.916,1842,4.916,1843,4.916,1844,4.916]]],"invertedIndex":[["",{"_index":29,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":107,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["0.05rem",{"_index":1218,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["0.10.2",{"_index":1547,"title":{},"body":{"dependencies.html":{}}}],["0.1688888",{"_index":712,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["0.1rem",{"_index":1222,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["0.25rem",{"_index":1211,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["0.2rem",{"_index":604,"title":{},"body":{"components/MeasureComponent.html":{},"components/TrackComponent.html":{}}}],["0.5rem",{"_index":525,"title":{},"body":{"components/MainMenuComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["0.75",{"_index":526,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["0.75rem",{"_index":890,"title":{},"body":{"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["0.8373333",{"_index":711,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["0.85",{"_index":484,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["0.8em",{"_index":736,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["0;1",{"_index":1250,"title":{},"body":{"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["0px",{"_index":1077,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["0s",{"_index":1244,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["0|1)|47|mc|nd|ri)|sgh",{"_index":219,"title":{},"body":{"components/AppComponent.html":{}}}],["0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h",{"_index":222,"title":{},"body":{"components/AppComponent.html":{}}}],["1",{"_index":126,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["1.2em",{"_index":706,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["1.3",{"_index":403,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["1.3em",{"_index":382,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["1.5em",{"_index":705,"title":{},"body":{"components/MetronomeComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["1.5rem",{"_index":450,"title":{},"body":{"components/DashboardComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["1.6",{"_index":402,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["1.6em",{"_index":380,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["1.8em",{"_index":1083,"title":{},"body":{"components/RhythmComponent.html":{}}}],["1.wav",{"_index":1746,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["1/1",{"_index":1511,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":497,"title":{},"body":{"components/MainMenuComponent.html":{},"components/TempoComponent.html":{},"miscellaneous/enumerations.html":{}}}],["100",{"_index":251,"title":{},"body":{"components/AppComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{}}}],["1000",{"_index":1014,"title":{},"body":{"components/RhythmComponent.html":{}}}],["100vh",{"_index":489,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["11",{"_index":1605,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["11.0.4",{"_index":1535,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["11/11",{"_index":1515,"title":{},"body":{"coverage.html":{}}}],["112.5",{"_index":703,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["113.2",{"_index":597,"title":{},"body":{"components/MeasureComponent.html":{}}}],["12",{"_index":1607,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["12/12",{"_index":1526,"title":{},"body":{"coverage.html":{}}}],["120",{"_index":682,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["120.6",{"_index":482,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["1207|6310|6590|3gso|4thp|50[1",{"_index":174,"title":{},"body":{"components/AppComponent.html":{}}}],["12rem",{"_index":451,"title":{},"body":{"components/DashboardComponent.html":{},"components/RhythmComponent.html":{}}}],["13",{"_index":1609,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["13/13",{"_index":1516,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":1611,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["14/14",{"_index":1514,"title":{},"body":{"coverage.html":{}}}],["153",{"_index":594,"title":{},"body":{"components/MeasureComponent.html":{}}}],["16",{"_index":1569,"title":{},"body":{"miscellaneous/enumerations.html":{},"overview.html":{}}}],["16n",{"_index":1586,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["19/19",{"_index":1527,"title":{},"body":{"coverage.html":{}}}],["1n",{"_index":595,"title":{},"body":{"components/MeasureComponent.html":{},"miscellaneous/enumerations.html":{}}}],["1rem",{"_index":384,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/SignatureComponent.html":{},"components/TrackComponent.html":{}}}],["2",{"_index":214,"title":{},"body":{"components/AppComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["2.0.0",{"_index":1545,"title":{},"body":{"dependencies.html":{}}}],["2.4em",{"_index":1085,"title":{},"body":{"components/RhythmComponent.html":{}}}],["2.wav",{"_index":1748,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["2/2",{"_index":1524,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1088,"title":{},"body":{"components/RhythmComponent.html":{}}}],["20|go|ma)|i230|iac",{"_index":196,"title":{},"body":{"components/AppComponent.html":{}}}],["23/23",{"_index":1517,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":724,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["255",{"_index":1220,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["275px",{"_index":520,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["28/28",{"_index":1525,"title":{},"body":{"coverage.html":{}}}],["28n",{"_index":1592,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["2]|n20[2",{"_index":207,"title":{},"body":{"components/AppComponent.html":{}}}],["2n",{"_index":1582,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["2rem",{"_index":603,"title":{},"body":{"components/MeasureComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["2s",{"_index":732,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["2|po(ck|rt|se)|prox|psio|pt",{"_index":211,"title":{},"body":{"components/AppComponent.html":{}}}],["3",{"_index":103,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/NoteRepresentation.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{}}}],["3.0.0",{"_index":1540,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":1541,"title":{},"body":{"dependencies.html":{}}}],["3.5rem",{"_index":435,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["3/3",{"_index":1507,"title":{},"body":{"coverage.html":{}}}],["30rem",{"_index":700,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m",{"_index":208,"title":{},"body":{"components/AppComponent.html":{}}}],["3rem",{"_index":1067,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["4",{"_index":598,"title":{},"body":{"components/MeasureComponent.html":{},"classes/Signature.html":{},"miscellaneous/enumerations.html":{}}}],["40",{"_index":519,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["45deg",{"_index":723,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["49.1",{"_index":481,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["4n",{"_index":1583,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["5",{"_index":1482,"title":{},"body":{"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{}}}],["5/5",{"_index":1523,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":410,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["500",{"_index":521,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["5rem",{"_index":455,"title":{},"body":{"components/DashboardComponent.html":{},"components/MetronomeComponent.html":{},"components/TempoComponent.html":{}}}],["5|g",{"_index":189,"title":{},"body":{"components/AppComponent.html":{}}}],["6",{"_index":1599,"title":{},"body":{"miscellaneous/enumerations.html":{},"overview.html":{}}}],["6.6.0",{"_index":1543,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1508,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":666,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"classes/Tempo.html":{}}}],["60vw",{"_index":439,"title":{},"body":{"components/DashboardComponent.html":{}}}],["6]i|770s|802s|a",{"_index":175,"title":{},"body":{"components/AppComponent.html":{}}}],["6rem",{"_index":1081,"title":{},"body":{"components/RhythmComponent.html":{}}}],["7",{"_index":1221,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["75",{"_index":728,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["77",{"_index":601,"title":{},"body":{"components/MeasureComponent.html":{}}}],["7]0|os|wa|ze)|fetc|fly",{"_index":186,"title":{},"body":{"components/AppComponent.html":{}}}],["7]|i",{"_index":215,"title":{},"body":{"components/AppComponent.html":{}}}],["8",{"_index":512,"title":{},"body":{"components/MainMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["8/8",{"_index":1513,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1499,"title":{},"body":{"components/TrackComponent.html":{}}}],["87",{"_index":1483,"title":{},"body":{"components/TrackComponent.html":{}}}],["8]|c))|phil|pire|pl(ay|uc)|pn",{"_index":210,"title":{},"body":{"components/AppComponent.html":{}}}],["8n",{"_index":1584,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["8rem",{"_index":1064,"title":{},"body":{"components/RhythmComponent.html":{}}}],["9",{"_index":509,"title":{},"body":{"components/MainMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["90",{"_index":702,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["9rem",{"_index":1475,"title":{},"body":{"components/TrackComponent.html":{}}}],["9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0",{"_index":230,"title":{},"body":{"components/AppComponent.html":{}}}],["_",{"_index":1573,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_)|g1",{"_index":187,"title":{},"body":{"components/AppComponent.html":{}}}],["_16n_8n_16n",{"_index":1598,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_16n_r",{"_index":1610,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_1n_r",{"_index":1603,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_2_16n",{"_index":1597,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_2_16n_2_8n",{"_index":1761,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_2_16n_8n",{"_index":1601,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_2_16n_8n_2_16n",{"_index":1764,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_2_8n",{"_index":1596,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_2_8n_2_16n",{"_index":1760,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_2n_r",{"_index":1604,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_3_16n_d_8n",{"_index":1763,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_3_8n",{"_index":1754,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_4_16n",{"_index":1602,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_4_16n_8n",{"_index":1757,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_4_8n",{"_index":1595,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_4n",{"_index":1593,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_4n_r",{"_index":1606,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_4n_tr",{"_index":1594,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_6_16n",{"_index":1755,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_8n",{"_index":1753,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_8n_16n_8n",{"_index":1759,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_8n_2_16n",{"_index":1600,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_8n_2_16n_8n",{"_index":1758,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_8n_4_16n",{"_index":1756,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_8n_r",{"_index":1608,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_d_2n_r",{"_index":1766,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_d_4n",{"_index":1752,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_d_4n_r",{"_index":1767,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_d_8n_3_16n",{"_index":1762,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_d_8n_r",{"_index":1768,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_du",{"_index":1765,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_|a|g|p|s|t)|tp)|hu(aw|tc)|i",{"_index":195,"title":{},"body":{"components/AppComponent.html":{}}}],["absolute",{"_index":405,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/TrackComponent.html":{}}}],["absvertcenteredinteractive",{"_index":1484,"title":{},"body":{"components/TrackComponent.html":{}}}],["according",{"_index":769,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["accordion",{"_index":1634,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["acoustic_bass",{"_index":1645,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["acoustic_grand_piano",{"_index":1613,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["acoustic_guitar_nylon",{"_index":1637,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["acoustic_guitar_steel",{"_index":1638,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["active",{"_index":468,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["actual_component",{"_index":293,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["actually",{"_index":928,"title":{},"body":{"components/RhythmComponent.html":{}}}],["add",{"_index":9,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["added",{"_index":929,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["addnote",{"_index":910,"title":{},"body":{"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["addnote(note",{"_index":922,"title":{},"body":{"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["addon",{"_index":1,"title":{"classes/AddOn.html":{}},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"coverage.html":{}}}],["addon#number",{"_index":60,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["addon#usehook",{"_index":61,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["addon(addon.number",{"_index":133,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["addon.usehook",{"_index":134,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["addonjson",{"_index":57,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/typealiases.html":{}}}],["addonjson|null",{"_index":96,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["addtoimgspaths",{"_index":851,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["addtoimgspaths(imgname",{"_index":117,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["addtrack",{"_index":911,"title":{},"body":{"components/RhythmComponent.html":{}}}],["addtrack(bool",{"_index":925,"title":{},"body":{"components/RhythmComponent.html":{}}}],["afterward",{"_index":571,"title":{},"body":{"components/MeasureComponent.html":{}}}],["agogo",{"_index":1726,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di",{"_index":177,"title":{},"body":{"components/AppComponent.html":{}}}],["ajouter",{"_index":376,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["aliases",{"_index":1831,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":396,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["allow",{"_index":1302,"title":{},"body":{"components/TempoComponent.html":{}}}],["allows",{"_index":459,"title":{},"body":{"components/ExportMenuComponent.html":{},"components/MetronomeSoundComponent.html":{}}}],["along",{"_index":746,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["alto_sax",{"_index":1678,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["amount",{"_index":1268,"title":{},"body":{"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["anacrouse",{"_index":1051,"title":{},"body":{"components/RhythmComponent.html":{}}}],["android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|android|silk|lge",{"_index":169,"title":{},"body":{"components/AppComponent.html":{}}}],["angular",{"_index":1789,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1534,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":1536,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":1537,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":243,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":343,"title":{},"body":{"modules/AppRoutingModule.html":{},"dependencies.html":{}}}],["animation",{"_index":730,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["animation($name",{"_index":716,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["animation(record",{"_index":1093,"title":{},"body":{"components/RhythmComponent.html":{}}}],["animation(rotating",{"_index":720,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["anote",{"_index":562,"title":{},"body":{"classes/Measure.html":{}}}],["anote.tostring",{"_index":563,"title":{},"body":{"classes/Measure.html":{}}}],["app",{"_index":160,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["app.component",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":165,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.sass",{"_index":163,"title":{},"body":{"components/AppComponent.html":{}}}],["appareil",{"_index":433,"title":{},"body":{"components/DashboardComponent.html":{}}}],["appcomponent",{"_index":149,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["applause",{"_index":1739,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["application",{"_index":156,"title":{},"body":{"components/AppComponent.html":{},"components/MainMenuComponent.html":{},"miscellaneous/variables.html":{}}}],["apply",{"_index":1431,"title":{},"body":{"components/TrackComponent.html":{}}}],["appmodule",{"_index":295,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":306,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":87,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["article",{"_index":1492,"title":{},"body":{"components/TrackComponent.html":{}}}],["artifacts",{"_index":1807,"title":{},"body":{"index.html":{}}}],["aside",{"_index":485,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["assets/images",{"_index":1838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/images/notes",{"_index":1842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/images/rythms",{"_index":1840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/sounds",{"_index":1843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/sounds/metronome/clock",{"_index":1745,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["assets/sounds/metronome/toc.wav",{"_index":1743,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["associated",{"_index":1119,"title":{},"body":{"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"miscellaneous/functions.html":{}}}],["async",{"_index":750,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["atmeasure",{"_index":912,"title":{},"body":{"components/RhythmComponent.html":{}}}],["atrack",{"_index":1058,"title":{},"body":{"components/RhythmComponent.html":{}}}],["atrack.tostring",{"_index":1060,"title":{},"body":{"components/RhythmComponent.html":{}}}],["attribute",{"_index":367,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"components/TempoComponent.html":{}}}],["attributes",{"_index":98,"title":{},"body":{"classes/AddOn.html":{},"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/NoteRepresentation.html":{},"classes/Track.html":{}}}],["audio",{"_index":1238,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["audio(\"../\"+environment.pathsfromapp.sounds+this.soundname",{"_index":1253,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["auto",{"_index":440,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["automatically",{"_index":1799,"title":{},"body":{"index.html":{}}}],["available",{"_index":1829,"title":{},"body":{"modules.html":{}}}],["avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw",{"_index":180,"title":{},"body":{"components/AppComponent.html":{}}}],["await",{"_index":772,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["a|qc(07|12|21|32|60",{"_index":213,"title":{},"body":{"components/AppComponent.html":{}}}],["backgrond",{"_index":1089,"title":{},"body":{"components/RhythmComponent.html":{}}}],["background",{"_index":407,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["backward",{"_index":878,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["bagpipe",{"_index":1722,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["banjo",{"_index":1718,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bar",{"_index":874,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["baritone_sax",{"_index":1680,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["base",{"_index":1113,"title":{},"body":{"classes/Signature.html":{},"components/SignatureComponent.html":{}}}],["base.svg",{"_index":708,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["based",{"_index":641,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"classes/Track.html":{}}}],["basicnote",{"_index":669,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["basicnote#getnumber|number",{"_index":1145,"title":{},"body":{"classes/Signature.html":{}}}],["basicnote#imgpath|image",{"_index":1150,"title":{},"body":{"classes/Signature.html":{},"classes/Tempo.html":{}}}],["basicnote#name|name",{"_index":1148,"title":{},"body":{"classes/Signature.html":{},"classes/Tempo.html":{}}}],["basicnote#number|number",{"_index":1297,"title":{},"body":{"classes/Tempo.html":{}}}],["basicnote's",{"_index":1779,"title":{},"body":{"miscellaneous/functions.html":{}}}],["basicnote.getimgpath(note",{"_index":1203,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["basicnote.getimgpath(this.bottom",{"_index":1151,"title":{},"body":{"classes/Signature.html":{}}}],["basicnote.getimgpath(this.note",{"_index":1299,"title":{},"body":{"classes/Tempo.html":{}}}],["basicnote.getname(note",{"_index":1204,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["basicnote.getname(this.bottom",{"_index":1149,"title":{},"body":{"classes/Signature.html":{}}}],["basicnote.getname(this.note",{"_index":1300,"title":{},"body":{"classes/Tempo.html":{}}}],["basicnote.getnumber(this.bottom",{"_index":1147,"title":{},"body":{"classes/Signature.html":{}}}],["basicnote.getnumber(this.note",{"_index":1298,"title":{},"body":{"classes/Tempo.html":{}}}],["basicnote.quarter_note",{"_index":1112,"title":{},"body":{"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{}}}],["basicnote.values",{"_index":1202,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["basicnote|basicnote",{"_index":1291,"title":{},"body":{"classes/Tempo.html":{}}}],["basicnote|note",{"_index":1146,"title":{},"body":{"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["basicnote|null",{"_index":1292,"title":{},"body":{"classes/Tempo.html":{}}}],["bassoon",{"_index":1683,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["beat",{"_index":634,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Tempo.html":{}}}],["beats",{"_index":626,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["before",{"_index":404,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["beginning",{"_index":996,"title":{},"body":{"components/RhythmComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["begins",{"_index":1371,"title":{},"body":{"classes/Track.html":{}}}],["begun",{"_index":970,"title":{},"body":{"components/RhythmComponent.html":{}}}],["behavior",{"_index":1073,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["behaviour",{"_index":1454,"title":{},"body":{"components/TrackComponent.html":{}}}],["being",{"_index":238,"title":{},"body":{"components/AppComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["between",{"_index":445,"title":{},"body":{"components/DashboardComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["binary",{"_index":813,"title":{},"body":{"classes/Note.html":{},"miscellaneous/functions.html":{}}}],["binarynote",{"_index":70,"title":{},"body":{"classes/AddOn.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/enumerations.html":{}}}],["binarynote._4n",{"_index":841,"title":{},"body":{"classes/Note.html":{}}}],["binary|ternary",{"_index":839,"title":{},"body":{"classes/Note.html":{}}}],["binded",{"_index":741,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["bird_tweet",{"_index":1736,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["block",{"_index":390,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/TrackComponent.html":{}}}],["blown_bottle",{"_index":1689,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bool",{"_index":927,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["boolean",{"_index":25,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["boolean|null",{"_index":140,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["bootstrap",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["bord",{"_index":421,"title":{},"body":{"components/DashboardComponent.html":{}}}],["border",{"_index":448,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["border_width",{"_index":1477,"title":{},"body":{"components/TrackComponent.html":{}}}],["both",{"_index":1111,"title":{},"body":{"classes/Signature.html":{}}}],["bottom",{"_index":501,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/TrackComponent.html":{}}}],["bottom's",{"_index":1117,"title":{},"body":{"classes/Signature.html":{}}}],["box",{"_index":453,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/TrackComponent.html":{}}}],["bpm",{"_index":625,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["brass_section",{"_index":1674,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["breath_noise",{"_index":1734,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bright_acoustic_piano",{"_index":1614,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["browse",{"_index":1827,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browsermodule",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":1806,"title":{},"body":{"index.html":{}}}],["button",{"_index":491,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["button:first",{"_index":888,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["button:nth",{"_index":891,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["button_size",{"_index":1066,"title":{},"body":{"components/RhythmComponent.html":{}}}],["buttons",{"_index":875,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["calc(100",{"_index":494,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["calc(100vh",{"_index":1075,"title":{},"body":{"components/RhythmComponent.html":{}}}],["called",{"_index":763,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["capital",{"_index":1775,"title":{},"body":{"miscellaneous/functions.html":{}}}],["celesta",{"_index":1621,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cello",{"_index":1655,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cell|chtm|cldc|cmd",{"_index":182,"title":{},"body":{"components/AppComponent.html":{}}}],["center",{"_index":387,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["certain",{"_index":867,"title":{},"body":{"classes/NoteRepresentation.html":{},"components/SoundPlayerComponent.html":{}}}],["ce|phone)|xda|xiino/i.test(navigator.useragent",{"_index":173,"title":{},"body":{"components/AppComponent.html":{}}}],["change",{"_index":473,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["changed",{"_index":654,"title":{},"body":{"components/MetronomeComponent.html":{},"components/TempoComponent.html":{}}}],["changes",{"_index":570,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["changesoundplan",{"_index":1409,"title":{},"body":{"components/TrackComponent.html":{}}}],["check",{"_index":41,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"classes/Signature.html":{},"index.html":{}}}],["child",{"_index":889,"title":{},"body":{"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{}}}],["child(1",{"_index":1080,"title":{},"body":{"components/RhythmComponent.html":{}}}],["child(1)>img",{"_index":893,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["child(2",{"_index":892,"title":{},"body":{"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{}}}],["child::after",{"_index":506,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["child::before",{"_index":504,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["choir_aahs",{"_index":1665,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chose",{"_index":1170,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["church_organ",{"_index":1632,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["clarinet",{"_index":1684,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["class",{"_index":0,"title":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"classes/Signature.html":{},"classes/Tempo.html":{},"classes/Track.html":{}},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"classes/Signature.html":{},"classes/Tempo.html":{},"classes/Track.html":{},"overview.html":{}}}],["classes/measure",{"_index":588,"title":{},"body":{"components/MeasureComponent.html":{}}}],["classes/metronome",{"_index":668,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{}}}],["classes/note",{"_index":849,"title":{},"body":{"components/NoteComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["classes/signature",{"_index":586,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TrackComponent.html":{}}}],["classes/sound",{"_index":1441,"title":{},"body":{"components/TrackComponent.html":{}}}],["classes/tempo",{"_index":587,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["classes/track",{"_index":1003,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["clavinet",{"_index":1620,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["clear",{"_index":1367,"title":{},"body":{"classes/Track.html":{}}}],["clearnotes",{"_index":1342,"title":{},"body":{"classes/Track.html":{}}}],["cli",{"_index":1790,"title":{},"body":{"index.html":{}}}],["clip",{"_index":1496,"title":{},"body":{"components/TrackComponent.html":{}}}],["clock_1",{"_index":1744,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["clock_2",{"_index":1747,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cluster_appmodule",{"_index":302,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":305,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":303,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["co(mp|nd)|craw|da(it|ll|ng)|dbte|dc",{"_index":183,"title":{},"body":{"components/AppComponent.html":{}}}],["code",{"_index":1802,"title":{},"body":{"index.html":{}}}],["color",{"_index":446,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["column",{"_index":444,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{}}}],["command",{"_index":1824,"title":{},"body":{"index.html":{}}}],["compatible",{"_index":1110,"title":{},"body":{"classes/Signature.html":{}}}],["complete",{"_index":1770,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compoenent",{"_index":354,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["compoenent's",{"_index":947,"title":{},"body":{"components/RhythmComponent.html":{}}}],["componenet",{"_index":770,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["componenet's",{"_index":943,"title":{},"body":{"components/RhythmComponent.html":{}}}],["component",{"_index":148,"title":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"index.html":{}}}],["component's",{"_index":740,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["component_template",{"_index":258,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["components",{"_index":150,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"overview.html":{}}}],["condition",{"_index":142,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/TrackComponent.html":{}}}],["console.log(\"clicked",{"_index":692,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["console.log(\"enter",{"_index":550,"title":{},"body":{"classes/Measure.html":{}}}],["console.log(\"if",{"_index":555,"title":{},"body":{"classes/Measure.html":{}}}],["console.log(\"new",{"_index":1011,"title":{},"body":{"components/RhythmComponent.html":{}}}],["console.log(\"tried",{"_index":1267,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["console.log(measure.curmaxpos",{"_index":553,"title":{},"body":{"classes/Measure.html":{}}}],["console.log(numberofwholenote",{"_index":593,"title":{},"body":{"components/MeasureComponent.html":{}}}],["console.log(result",{"_index":1022,"title":{},"body":{"components/RhythmComponent.html":{}}}],["console.log(this.position",{"_index":559,"title":{},"body":{"classes/Measure.html":{}}}],["console.log(this.tostring",{"_index":560,"title":{},"body":{"classes/Measure.html":{}}}],["console.log(trackid",{"_index":551,"title":{},"body":{"classes/Measure.html":{}}}],["console.log(trackid.tostring(10",{"_index":552,"title":{},"body":{"classes/Measure.html":{}}}],["const",{"_index":344,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["constructor",{"_index":23,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["constructor(imgsnames",{"_index":105,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["constructor(instrument",{"_index":1353,"title":{},"body":{"classes/Track.html":{}}}],["constructor(note",{"_index":1279,"title":{},"body":{"classes/Tempo.html":{}}}],["constructor(number",{"_index":24,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["constructor(timecode",{"_index":827,"title":{},"body":{"classes/Note.html":{}}}],["constructor(top",{"_index":1107,"title":{},"body":{"classes/Signature.html":{}}}],["constructor(trackid",{"_index":549,"title":{},"body":{"classes/Measure.html":{}}}],["contain",{"_index":709,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["content",{"_index":386,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["contrabass",{"_index":1656,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["controls",{"_index":704,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["controls_height",{"_index":1065,"title":{},"body":{"components/RhythmComponent.html":{}}}],["conversion",{"_index":976,"title":{},"body":{"components/RhythmComponent.html":{}}}],["convertimgnametopath",{"_index":852,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["convertimgnametopath(imgname",{"_index":861,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["correct",{"_index":974,"title":{},"body":{"components/RhythmComponent.html":{}}}],["correspond",{"_index":745,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["corresponds",{"_index":1356,"title":{},"body":{"classes/Track.html":{}}}],["coverage",{"_index":1503,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":261,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["created",{"_index":1571,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["createtrack",{"_index":363,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["createtrackcomponent",{"_index":260,"title":{"components/CreateTrackComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["creating",{"_index":358,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t",{"_index":204,"title":{},"body":{"components/AppComponent.html":{}}}],["créer",{"_index":476,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["curid",{"_index":538,"title":{},"body":{"classes/Measure.html":{}}}],["curmaxpos",{"_index":530,"title":{},"body":{"classes/Measure.html":{}}}],["current",{"_index":543,"title":{},"body":{"classes/Measure.html":{},"components/RhythmComponent.html":{},"components/TempoComponent.html":{}}}],["currently",{"_index":931,"title":{},"body":{"components/RhythmComponent.html":{}}}],["cursor",{"_index":391,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["c|ht(c",{"_index":194,"title":{},"body":{"components/AppComponent.html":{}}}],["d",{"_index":1578,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4",{"_index":185,"title":{},"body":{"components/AppComponent.html":{}}}],["dark",{"_index":510,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["dashboard",{"_index":347,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/DashboardComponent.html":{}}}],["dashboard'},{'name",{"_index":264,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["dashboard.component.html",{"_index":418,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard.component.sass",{"_index":417,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard/dashboard.component",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["dashboardcomponent",{"_index":263,"title":{"components/DashboardComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["date",{"_index":980,"title":{},"body":{"components/RhythmComponent.html":{}}}],["date.now",{"_index":1020,"title":{},"body":{"components/RhythmComponent.html":{}}}],["de",{"_index":420,"title":{},"body":{"components/DashboardComponent.html":{}}}],["debug",{"_index":1844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":298,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["default",{"_index":168,"title":{},"body":{"components/AppComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":607,"title":{},"body":{"components/MetronomeComponent.html":{},"components/SignatureComponent.html":{}}}],["defined",{"_index":26,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["delete",{"_index":1370,"title":{},"body":{"classes/Track.html":{}}}],["deletenotesbetweentimecodes",{"_index":1343,"title":{},"body":{"classes/Track.html":{}}}],["deletenotesbetweentimecodes(from",{"_index":1368,"title":{},"body":{"classes/Track.html":{}}}],["denominator",{"_index":1777,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dependencies",{"_index":297,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depuis",{"_index":431,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["details",{"_index":1282,"title":{},"body":{"classes/Tempo.html":{}}}],["dev",{"_index":1796,"title":{},"body":{"index.html":{}}}],["development",{"_index":1791,"title":{},"body":{"index.html":{}}}],["different",{"_index":81,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/enumerations.html":{}}}],["direction",{"_index":443,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{}}}],["directive",{"_index":256,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["directives",{"_index":292,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":1805,"title":{},"body":{"index.html":{}}}],["directly",{"_index":1325,"title":{},"body":{"components/TempoComponent.html":{}}}],["directory",{"_index":1810,"title":{},"body":{"index.html":{}}}],["dirpath",{"_index":75,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["display",{"_index":248,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["displayed",{"_index":1228,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["dist",{"_index":1809,"title":{},"body":{"index.html":{}}}],["distortion_guitar",{"_index":1643,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["div",{"_index":388,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MeasureComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["div:nth",{"_index":1079,"title":{},"body":{"components/RhythmComponent.html":{}}}],["documentation",{"_index":1504,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":994,"title":{},"body":{"components/RhythmComponent.html":{},"miscellaneous/functions.html":{}}}],["dom",{"_index":153,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["dotted",{"_index":1579,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["drawbar_organ",{"_index":1629,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["drop",{"_index":1216,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["du",{"_index":1750,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["due",{"_index":1574,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dulcimer",{"_index":1628,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["duplet",{"_index":1751,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["duration",{"_index":803,"title":{},"body":{"classes/Note.html":{},"components/RhythmComponent.html":{},"miscellaneous/functions.html":{}}}],["dynamic",{"_index":1538,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{}}}],["défaut",{"_index":1473,"title":{},"body":{"components/TrackComponent.html":{}}}],["e2e",{"_index":1819,"title":{},"body":{"index.html":{}}}],["each",{"_index":764,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"classes/Signature.html":{}}}],["ease",{"_index":733,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["eight",{"_index":1585,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_bass_finger",{"_index":1646,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_bass_pick",{"_index":1647,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_grand_piano",{"_index":1615,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_guitar_clean",{"_index":1640,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_guitar_jazz",{"_index":1639,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_guitar_muted",{"_index":1641,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_piano_1",{"_index":1617,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_piano_2",{"_index":1618,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["element",{"_index":255,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["elementref",{"_index":1439,"title":{},"body":{"components/TrackComponent.html":{}}}],["emit",{"_index":368,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["empty",{"_index":778,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["encapsulation",{"_index":244,"title":{},"body":{"components/AppComponent.html":{}}}],["end",{"_index":1090,"title":{},"body":{"components/RhythmComponent.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"index.html":{}}}],["ended",{"_index":938,"title":{},"body":{"components/RhythmComponent.html":{}}}],["endoftrack",{"_index":1410,"title":{},"body":{"components/TrackComponent.html":{}}}],["endoftrack(event",{"_index":1421,"title":{},"body":{"components/TrackComponent.html":{}}}],["endtap",{"_index":913,"title":{},"body":{"components/RhythmComponent.html":{}}}],["endtap(evt",{"_index":933,"title":{},"body":{"components/RhythmComponent.html":{}}}],["endtapvar",{"_index":900,"title":{},"body":{"components/RhythmComponent.html":{}}}],["english",{"_index":1773,"title":{},"body":{"miscellaneous/functions.html":{}}}],["english_horn",{"_index":1682,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enum",{"_index":1556,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1549,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":69,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["enums/basic",{"_index":670,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["enums/binary",{"_index":825,"title":{},"body":{"classes/Note.html":{}}}],["enums/ternary",{"_index":826,"title":{},"body":{"classes/Note.html":{}}}],["environment",{"_index":54,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/SoundPlayerComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.pathsfromapp.rythmsimg",{"_index":77,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["environments/environment",{"_index":55,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/SoundPlayerComponent.html":{}}}],["err:any",{"_index":1255,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["evenly",{"_index":442,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["event",{"_index":934,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["eventemitter",{"_index":365,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["events",{"_index":357,"title":{},"body":{"components/CreateTrackComponent.html":{},"dependencies.html":{}}}],["evt",{"_index":939,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["ex",{"_index":1591,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["example",{"_index":99,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{}}}],["exceeds",{"_index":1269,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["execute",{"_index":1816,"title":{},"body":{"index.html":{}}}],["export",{"_index":56,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["exportmenucomponent",{"_index":265,"title":{"components/ExportMenuComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["exports",{"_index":301,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ExportMenuComponent.html":{},"overview.html":{}}}],["extend",{"_index":1497,"title":{},"body":{"components/TrackComponent.html":{}}}],["extension",{"_index":78,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/functions.html":{}}}],["extention",{"_index":95,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["exterior",{"_index":1479,"title":{},"body":{"components/TrackComponent.html":{}}}],["fact",{"_index":1575,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["false",{"_index":652,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"miscellaneous/variables.html":{}}}],["fastforward",{"_index":877,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["fiddle",{"_index":1723,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{}}}],["files",{"_index":1801,"title":{},"body":{"index.html":{}}}],["filter",{"_index":1215,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["find",{"_index":946,"title":{},"body":{"components/RhythmComponent.html":{}}}],["finished",{"_index":1127,"title":{},"body":{"classes/Signature.html":{}}}],["finishedplayingtrack",{"_index":1252,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["first",{"_index":503,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["fixed",{"_index":516,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["flag",{"_index":1812,"title":{},"body":{"index.html":{}}}],["flex",{"_index":249,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["float",{"_index":1265,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["flute",{"_index":1686,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["followed",{"_index":1588,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["following",{"_index":830,"title":{},"body":{"classes/Note.html":{},"miscellaneous/enumerations.html":{}}}],["fond",{"_index":427,"title":{},"body":{"components/DashboardComponent.html":{}}}],["font",{"_index":393,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["font_size",{"_index":379,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["for(const",{"_index":785,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["for(let",{"_index":106,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["form",{"_index":92,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["format",{"_index":975,"title":{},"body":{"components/RhythmComponent.html":{}}}],["formsmodule",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["french_horn",{"_index":1673,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fretless_bass",{"_index":1648,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["full",{"_index":350,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["function",{"_index":962,"title":{},"body":{"components/RhythmComponent.html":{},"coverage.html":{}}}],["functions",{"_index":1769,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1821,"title":{},"body":{"index.html":{}}}],["fx_1_rain",{"_index":1709,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fx_2_soundtrack",{"_index":1710,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fx_3_crystal",{"_index":1711,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fx_4_atmosphere",{"_index":1712,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fx_5_brightness",{"_index":1713,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fx_6_goblins",{"_index":1714,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fx_7_echoes",{"_index":1715,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fx_8_scifi",{"_index":1716,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["general",{"_index":993,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["generals",{"_index":1078,"title":{},"body":{"components/RhythmComponent.html":{}}}],["generate",{"_index":1804,"title":{},"body":{"index.html":{}}}],["generated",{"_index":1788,"title":{},"body":{"index.html":{}}}],["getaddonnumber",{"_index":135,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["getaddonusehook",{"_index":143,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["getbasicnotelist",{"_index":1162,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["getbottom",{"_index":1098,"title":{},"body":{"classes/Signature.html":{}}}],["getbottomimgpath",{"_index":1099,"title":{},"body":{"classes/Signature.html":{}}}],["getbottomname",{"_index":1100,"title":{},"body":{"classes/Signature.html":{}}}],["getbottomnumber",{"_index":1101,"title":{},"body":{"classes/Signature.html":{}}}],["getbpm",{"_index":1273,"title":{},"body":{"classes/Tempo.html":{}}}],["getduration",{"_index":806,"title":{},"body":{"classes/Note.html":{}}}],["getid",{"_index":1344,"title":{},"body":{"classes/Track.html":{},"components/TrackComponent.html":{}}}],["getimgpath",{"_index":1163,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getimgpath(note",{"_index":1172,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"miscellaneous/functions.html":{}}}],["getimgpathat",{"_index":853,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["getimgpathat(i",{"_index":865,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["getimgspaths",{"_index":854,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["getimgspathslength",{"_index":110,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["getinstrument",{"_index":1345,"title":{},"body":{"classes/Track.html":{}}}],["getinstrumentlist",{"_index":613,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["getjson",{"_index":1520,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getjson(note",{"_index":1772,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getmeasures",{"_index":1346,"title":{},"body":{"classes/Track.html":{}}}],["getmetronomemovementlengthinsec",{"_index":614,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["getname",{"_index":1164,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getname(note",{"_index":1175,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"miscellaneous/functions.html":{}}}],["getnote",{"_index":1274,"title":{},"body":{"classes/Tempo.html":{}}}],["getnoteatindex",{"_index":1347,"title":{},"body":{"classes/Track.html":{}}}],["getnoteatindex(i",{"_index":1378,"title":{},"body":{"classes/Track.html":{}}}],["getnoteattimecode",{"_index":1348,"title":{},"body":{"classes/Track.html":{}}}],["getnoteattimecode(timecode",{"_index":1380,"title":{},"body":{"classes/Track.html":{}}}],["getnoteimgpath",{"_index":1275,"title":{},"body":{"classes/Tempo.html":{}}}],["getnotename",{"_index":1276,"title":{},"body":{"classes/Tempo.html":{}}}],["getnotenumber",{"_index":1277,"title":{},"body":{"classes/Tempo.html":{}}}],["getnotes",{"_index":531,"title":{},"body":{"classes/Measure.html":{},"classes/Track.html":{}}}],["getnumber",{"_index":19,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getnumber(note",{"_index":1776,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getpath",{"_index":1510,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getpath(soundname",{"_index":1780,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getplan",{"_index":1349,"title":{},"body":{"classes/Track.html":{}}}],["getrepresentation",{"_index":1522,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getrepresentation(note",{"_index":1785,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getsoundnamebypath",{"_index":1512,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getsoundnamebypath(soundpath",{"_index":1781,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gettimecode",{"_index":807,"title":{},"body":{"classes/Note.html":{}}}],["getting",{"_index":1786,"title":{"index.html":{}},"body":{}}],["gettop",{"_index":1102,"title":{},"body":{"classes/Signature.html":{}}}],["gettrackindex",{"_index":914,"title":{},"body":{"components/RhythmComponent.html":{}}}],["gettrackindex(id",{"_index":941,"title":{},"body":{"components/RhythmComponent.html":{}}}],["gettrackindex(track.getid",{"_index":948,"title":{},"body":{"components/RhythmComponent.html":{}}}],["getusehook",{"_index":20,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["getwidth",{"_index":577,"title":{},"body":{"components/MeasureComponent.html":{}}}],["given",{"_index":950,"title":{},"body":{"components/RhythmComponent.html":{}}}],["glockenspiel",{"_index":1622,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["go",{"_index":1053,"title":{},"body":{"components/RhythmComponent.html":{},"index.html":{}}}],["gradient($property",{"_index":1478,"title":{},"body":{"components/TrackComponent.html":{}}}],["gradient(background",{"_index":1493,"title":{},"body":{"components/TrackComponent.html":{}}}],["gradient(border",{"_index":1486,"title":{},"body":{"components/TrackComponent.html":{}}}],["gradient(to",{"_index":1087,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["gradient(vars.$light_gray",{"_index":1500,"title":{},"body":{"components/TrackComponent.html":{}}}],["graph",{"_index":1828,"title":{},"body":{"modules.html":{}}}],["gray",{"_index":1502,"title":{},"body":{"components/TrackComponent.html":{}}}],["grow",{"_index":605,"title":{},"body":{"components/MeasureComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["guitar_fret_noise",{"_index":1733,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["guitar_harmonics",{"_index":1644,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["gunshot",{"_index":1740,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["g|\\/(k|l|u)|50|54",{"_index":201,"title":{},"body":{"components/AppComponent.html":{}}}],["g|qa",{"_index":212,"title":{},"body":{"components/AppComponent.html":{}}}],["h",{"_index":600,"title":{},"body":{"components/MeasureComponent.html":{}}}],["h2",{"_index":436,"title":{},"body":{"components/DashboardComponent.html":{}}}],["h3",{"_index":437,"title":{},"body":{"components/DashboardComponent.html":{}}}],["half",{"_index":1564,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["half_note",{"_index":1563,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["harmonica",{"_index":1635,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["harpsichord",{"_index":1619,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["height",{"_index":406,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{}}}],["height_note",{"_index":1567,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["held",{"_index":971,"title":{},"body":{"components/RhythmComponent.html":{}}}],["helicopter",{"_index":1738,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["help",{"_index":1822,"title":{},"body":{"index.html":{}}}],["hi(pt|ta)|hp",{"_index":192,"title":{},"body":{"components/AppComponent.html":{}}}],["hidden",{"_index":1071,"title":{},"body":{"components/RhythmComponent.html":{}}}],["holds",{"_index":896,"title":{},"body":{"components/RhythmComponent.html":{}}}],["home",{"_index":415,"title":{},"body":{"components/DashboardComponent.html":{}}}],["honkytonk_piano",{"_index":1616,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hook",{"_index":37,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["hoot",{"_index":43,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["host",{"_index":247,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["html",{"_index":254,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["http://localhost:4200",{"_index":1798,"title":{},"body":{"index.html":{}}}],["i.test(navigator.useragent.substr(0,4",{"_index":235,"title":{},"body":{"components/AppComponent.html":{}}}],["ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt",{"_index":197,"title":{},"body":{"components/AppComponent.html":{}}}],["icon_width",{"_index":483,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["id",{"_index":945,"title":{},"body":{"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["identifier",{"_index":1505,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":536,"title":{},"body":{"classes/Measure.html":{},"classes/Track.html":{}}}],["if(!this.iscompatible(top",{"_index":1137,"title":{},"body":{"classes/Signature.html":{}}}],["if(!this.ismodifyingbottomsignature",{"_index":1193,"title":{},"body":{"components/SignatureComponent.html":{}}}],["if(!this.ismodifyingbpm",{"_index":1334,"title":{},"body":{"components/TempoComponent.html":{}}}],["if(!this.ismodifyinginstrument",{"_index":683,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["if(!this.ismodifyingnote",{"_index":1335,"title":{},"body":{"components/TempoComponent.html":{}}}],["if(!this.ismodifyingtopsignature",{"_index":1195,"title":{},"body":{"components/SignatureComponent.html":{}}}],["if(!this.isrunning",{"_index":688,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["if(!this.recording",{"_index":1009,"title":{},"body":{"components/RhythmComponent.html":{}}}],["if(!this.sound.paused",{"_index":1263,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["if(addon",{"_index":131,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["if(bool",{"_index":1005,"title":{},"body":{"components/RhythmComponent.html":{}}}],["if(bpm",{"_index":1296,"title":{},"body":{"classes/Tempo.html":{}}}],["if(changes.hasownproperty(propname",{"_index":787,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["if(changes[\"isplaying\"].currentvalue",{"_index":789,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["if(changes[\"isplaying\"].previousvalue",{"_index":1259,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["if(id",{"_index":1045,"title":{},"body":{"components/RhythmComponent.html":{}}}],["if(index",{"_index":118,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["if(measure.curmaxpos.hasownproperty(trackid.tostring(10",{"_index":554,"title":{},"body":{"classes/Measure.html":{}}}],["if(plan",{"_index":1399,"title":{},"body":{"classes/Track.html":{}}}],["if(propname",{"_index":788,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["if(result",{"_index":1024,"title":{},"body":{"components/RhythmComponent.html":{}}}],["if(this.addon",{"_index":136,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["if(this.isbinary",{"_index":840,"title":{},"body":{"classes/Note.html":{}}}],["if(this.iscompatible(this.top",{"_index":1143,"title":{},"body":{"classes/Signature.html":{}}}],["if(this.iscompatible(top",{"_index":1141,"title":{},"body":{"classes/Signature.html":{}}}],["if(this.ismodifyingnote",{"_index":1332,"title":{},"body":{"components/TempoComponent.html":{}}}],["if(this.isrunning",{"_index":674,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["if(this.isselected",{"_index":1467,"title":{},"body":{"components/TrackComponent.html":{}}}],["if(this.mode",{"_index":794,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["if(this.selectedtrackid",{"_index":1007,"title":{},"body":{"components/RhythmComponent.html":{}}}],["if(this.sound",{"_index":1261,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["if(this.track.getplan",{"_index":1455,"title":{},"body":{"components/TrackComponent.html":{}}}],["if(this.waitingrecord",{"_index":1023,"title":{},"body":{"components/RhythmComponent.html":{}}}],["if(top",{"_index":1144,"title":{},"body":{"classes/Signature.html":{}}}],["if(volume",{"_index":1266,"title":{},"body":{"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["ignore",{"_index":73,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["image",{"_index":111,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["images",{"_index":91,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["img",{"_index":83,"title":{},"body":{"classes/AddOn.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["img+span",{"_index":1338,"title":{},"body":{"components/TempoComponent.html":{}}}],["img:hover",{"_index":1214,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["img_size",{"_index":381,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["imgname",{"_index":113,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["imgsnames",{"_index":89,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["imgspaths",{"_index":85,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["implements",{"_index":359,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["import",{"_index":53,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["imports",{"_index":311,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["include",{"_index":719,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["included",{"_index":1249,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["incorrect",{"_index":1394,"title":{},"body":{"classes/Track.html":{}}}],["increment",{"_index":534,"title":{},"body":{"classes/Measure.html":{},"classes/Track.html":{}}}],["incremented",{"_index":1357,"title":{},"body":{"classes/Track.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index:number",{"_index":124,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["indicator",{"_index":546,"title":{},"body":{"classes/Measure.html":{}}}],["infinite",{"_index":734,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["inline",{"_index":389,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/TrackComponent.html":{}}}],["input",{"_index":474,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["input(\"isplaying",{"_index":782,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["input(\"signature",{"_index":781,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["input(\"tempo",{"_index":780,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["inputs",{"_index":467,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["input|input",{"_index":784,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["insert",{"_index":116,"title":{},"body":{"classes/AddOn.html":{},"components/MeasureComponent.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{}}}],["inside",{"_index":568,"title":{},"body":{"components/MeasureComponent.html":{},"components/NoteComponent.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["instant",{"_index":982,"title":{},"body":{"components/RhythmComponent.html":{}}}],["instr_input_height",{"_index":1476,"title":{},"body":{"components/TrackComponent.html":{}}}],["instrument",{"_index":650,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["instrument's",{"_index":623,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["instrument_width",{"_index":1474,"title":{},"body":{"components/TrackComponent.html":{}}}],["instruments",{"_index":622,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["integration",{"_index":834,"title":{},"body":{"classes/Note.html":{}}}],["interface",{"_index":897,"title":{},"body":{"components/RhythmComponent.html":{}}}],["interior",{"_index":1480,"title":{},"body":{"components/TrackComponent.html":{}}}],["interval",{"_index":1372,"title":{},"body":{"classes/Track.html":{}}}],["intrument",{"_index":1552,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["intrumentinput",{"_index":1448,"title":{},"body":{"components/TrackComponent.html":{}}}],["isbinary",{"_index":804,"title":{},"body":{"classes/Note.html":{}}}],["iscompatible",{"_index":1103,"title":{},"body":{"classes/Signature.html":{}}}],["iscompatible(top",{"_index":1125,"title":{},"body":{"classes/Signature.html":{}}}],["ismobile",{"_index":166,"title":{},"body":{"components/AppComponent.html":{}}}],["ismodifyingbottomsignature",{"_index":1158,"title":{},"body":{"components/SignatureComponent.html":{}}}],["ismodifyingbpm",{"_index":1306,"title":{},"body":{"components/TempoComponent.html":{}}}],["ismodifyinginstrument",{"_index":610,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["ismodifyingnote",{"_index":1307,"title":{},"body":{"components/TempoComponent.html":{}}}],["ismodifyingtopsignature",{"_index":1159,"title":{},"body":{"components/SignatureComponent.html":{}}}],["isplaying",{"_index":742,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["isplayingoutput",{"_index":1444,"title":{},"body":{"components/TrackComponent.html":{}}}],["isplayingtracks",{"_index":901,"title":{},"body":{"components/RhythmComponent.html":{}}}],["isrunning",{"_index":611,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["isselected",{"_index":1044,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["issolo",{"_index":1445,"title":{},"body":{"components/TrackComponent.html":{}}}],["it's",{"_index":757,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"components/TempoComponent.html":{},"miscellaneous/functions.html":{}}}],["items",{"_index":493,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["i|ip)|hs",{"_index":193,"title":{},"body":{"components/AppComponent.html":{}}}],["json",{"_index":1056,"title":{},"body":{"components/RhythmComponent.html":{},"miscellaneous/functions.html":{}}}],["justify",{"_index":385,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["kalimba",{"_index":1721,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["karma",{"_index":1818,"title":{},"body":{"index.html":{}}}],["keyframes",{"_index":715,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["kind",{"_index":1153,"title":{},"body":{"components/SignatureComponent.html":{}}}],["klon|kpt",{"_index":198,"title":{},"body":{"components/AppComponent.html":{}}}],["know",{"_index":756,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["knowing",{"_index":944,"title":{},"body":{"components/RhythmComponent.html":{}}}],["koto",{"_index":1720,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["kwc",{"_index":199,"title":{},"body":{"components/AppComponent.html":{}}}],["kyo(c|k)|le(no|xi)|lg",{"_index":200,"title":{},"body":{"components/AppComponent.html":{}}}],["last",{"_index":505,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/RhythmComponent.html":{}}}],["launched",{"_index":239,"title":{},"body":{"components/AppComponent.html":{}}}],["lead_1_square",{"_index":1693,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lead_2_sawtooth",{"_index":1694,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lead_3_calliope",{"_index":1695,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lead_4_chiff",{"_index":1696,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lead_5_charang",{"_index":1697,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lead_6_voice",{"_index":1698,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lead_7_fifths",{"_index":1699,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lead_8_bass_and_lead",{"_index":1700,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["left",{"_index":401,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["legend",{"_index":253,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"overview.html":{}}}],["librairy",{"_index":833,"title":{},"body":{"classes/Note.html":{},"components/TrackComponent.html":{}}}],["line",{"_index":602,"title":{},"body":{"components/MeasureComponent.html":{},"classes/Note.html":{},"components/RhythmComponent.html":{}}}],["linear",{"_index":726,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["link",{"_index":59,"title":{},"body":{"classes/AddOn.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["linked",{"_index":129,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/enumerations.html":{}}}],["list",{"_index":112,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"components/MetronomeComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["literal",{"_index":1833,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lsit",{"_index":1377,"title":{},"body":{"classes/Track.html":{}}}],["m(ob|in)i|palm",{"_index":171,"title":{},"body":{"components/AppComponent.html":{}}}],["m)|sk",{"_index":221,"title":{},"body":{"components/AppComponent.html":{}}}],["m3|m5)|tx",{"_index":229,"title":{},"body":{"components/AppComponent.html":{}}}],["maemo|midp|mmp|netfront|opera",{"_index":170,"title":{},"body":{"components/AppComponent.html":{}}}],["main",{"_index":157,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["mainmenucomponent",{"_index":267,"title":{"components/MainMenuComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["margin",{"_index":383,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["marimba",{"_index":1625,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["matching",{"_index":146,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor",{"_index":1019,"title":{},"body":{"components/RhythmComponent.html":{}}}],["max",{"_index":252,"title":{},"body":{"components/AppComponent.html":{},"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["measure",{"_index":527,"title":{"classes/Measure.html":{}},"body":{"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Track.html":{},"coverage.html":{}}}],["measure'},{'name",{"_index":269,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["measure(0",{"_index":580,"title":{},"body":{"components/MeasureComponent.html":{}}}],["measure.component.html",{"_index":576,"title":{},"body":{"components/MeasureComponent.html":{}}}],["measure.component.sass",{"_index":575,"title":{},"body":{"components/MeasureComponent.html":{}}}],["measure.curmaxpos[trackid",{"_index":556,"title":{},"body":{"classes/Measure.html":{}}}],["measure/measure.component",{"_index":333,"title":{},"body":{"modules/AppModule.html":{}}}],["measurecomponent",{"_index":268,"title":{"components/MeasureComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["measureduration",{"_index":902,"title":{},"body":{"components/RhythmComponent.html":{}}}],["measures",{"_index":567,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["media",{"_index":514,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["melodic_tom",{"_index":1730,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["menu",{"_index":458,"title":{},"body":{"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/SaveMenuComponent.html":{}}}],["menu'},{'name",{"_index":266,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["menu.component",{"_index":321,"title":{},"body":{"modules/AppModule.html":{}}}],["menu.component.html",{"_index":463,"title":{},"body":{"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/SaveMenuComponent.html":{}}}],["menu.component.sass",{"_index":462,"title":{},"body":{"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/SaveMenuComponent.html":{}}}],["menu.component.ts",{"_index":457,"title":{},"body":{"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/SaveMenuComponent.html":{},"coverage.html":{}}}],["menu.component.ts:19",{"_index":469,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["menu.component.ts:35",{"_index":472,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["menu/export",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"components/ExportMenuComponent.html":{},"coverage.html":{}}}],["menu/main",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"components/MainMenuComponent.html":{},"coverage.html":{}}}],["menu/save",{"_index":328,"title":{},"body":{"modules/AppModule.html":{},"components/SaveMenuComponent.html":{},"coverage.html":{}}}],["mesure",{"_index":1062,"title":{},"body":{"components/RhythmComponent.html":{}}}],["mesures",{"_index":1055,"title":{},"body":{"components/RhythmComponent.html":{}}}],["metadata",{"_index":158,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["methods",{"_index":18,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["metronome",{"_index":273,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["metronome#sound|metronome's",{"_index":671,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{}}}],["metronome's",{"_index":663,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{}}}],["metronome'},{'name",{"_index":271,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["metronome(this.tempo.getbpm",{"_index":673,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{}}}],["metronome.component.html",{"_index":609,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronome.component.sass",{"_index":608,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronome.run>img",{"_index":729,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronome.sound",{"_index":659,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"miscellaneous/functions.html":{}}}],["metronome.sound.toc",{"_index":660,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{}}}],["metronome/metronome.component",{"_index":332,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["metronome>img",{"_index":710,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronome_height",{"_index":699,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronome_width",{"_index":701,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronomecomponent",{"_index":270,"title":{"components/MetronomeComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["metronomecomponent#ismodifyinginstrument",{"_index":687,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronomecomponent#tempo|tempo",{"_index":678,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronomesoundcomponent",{"_index":272,"title":{"components/MetronomeSoundComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["metronomesoundcomponent#mode|mode",{"_index":792,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["middle",{"_index":507,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["min",{"_index":452,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/TrackComponent.html":{}}}],["minute",{"_index":636,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Tempo.html":{}}}],["miscellaneous",{"_index":1548,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mixin",{"_index":714,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["mode",{"_index":744,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"miscellaneous/variables.html":{}}}],["modifiablebottom",{"_index":1160,"title":{},"body":{"components/SignatureComponent.html":{}}}],["modifiablebpm",{"_index":1308,"title":{},"body":{"components/TempoComponent.html":{}}}],["modifiableinstrument",{"_index":1407,"title":{},"body":{"components/TrackComponent.html":{}}}],["modifiabletop",{"_index":1161,"title":{},"body":{"components/SignatureComponent.html":{}}}],["modification",{"_index":1034,"title":{},"body":{"components/RhythmComponent.html":{},"components/TempoComponent.html":{}}}],["modified",{"_index":651,"title":{},"body":{"components/MetronomeComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["modify",{"_index":1303,"title":{},"body":{"components/TempoComponent.html":{}}}],["modifyinstrument",{"_index":1408,"title":{},"body":{"components/TrackComponent.html":{}}}],["modigying",{"_index":1322,"title":{},"body":{"components/TempoComponent.html":{}}}],["modiified",{"_index":1057,"title":{},"body":{"components/RhythmComponent.html":{}}}],["module",{"_index":294,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":296,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":664,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Tempo.html":{},"index.html":{}}}],["moving",{"_index":573,"title":{},"body":{"components/MeasureComponent.html":{}}}],["mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd",{"_index":190,"title":{},"body":{"components/AppComponent.html":{}}}],["mo|to(pl|sh)|ts(70|m",{"_index":228,"title":{},"body":{"components/AppComponent.html":{}}}],["ms",{"_index":1015,"title":{},"body":{"components/RhythmComponent.html":{}}}],["music_box",{"_index":1623,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["musical",{"_index":428,"title":{},"body":{"components/DashboardComponent.html":{},"components/TrackComponent.html":{}}}],["musique",{"_index":478,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["mute",{"_index":1364,"title":{},"body":{"classes/Track.html":{},"components/TrackComponent.html":{}}}],["muted_trumpet",{"_index":1672,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mwbp|mywa|n10[0",{"_index":206,"title":{},"body":{"components/AppComponent.html":{}}}],["m|p|t)|hei",{"_index":191,"title":{},"body":{"components/AppComponent.html":{}}}],["m|r",{"_index":178,"title":{},"body":{"components/AppComponent.html":{}}}],["métronome",{"_index":479,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["n",{"_index":599,"title":{},"body":{"components/MeasureComponent.html":{},"miscellaneous/enumerations.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["names",{"_index":90,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/functions.html":{}}}],["nav",{"_index":490,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["navigate",{"_index":1797,"title":{},"body":{"index.html":{}}}],["nbofsolotracks",{"_index":903,"title":{},"body":{"components/RhythmComponent.html":{}}}],["nbtick",{"_index":796,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["nc|nw)|wmlb|wonu|x700|yas",{"_index":233,"title":{},"body":{"components/AppComponent.html":{}}}],["need",{"_index":1001,"title":{},"body":{"components/RhythmComponent.html":{}}}],["needed",{"_index":45,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["needs",{"_index":138,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["never",{"_index":1227,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["new",{"_index":86,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":547,"title":{},"body":{"classes/Measure.html":{},"components/MeasureComponent.html":{}}}],["nextid",{"_index":1341,"title":{},"body":{"classes/Track.html":{}}}],["ng",{"_index":1794,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":315,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["ngonchanges",{"_index":749,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["ngonchanges(changes",{"_index":589,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["ngoninit",{"_index":374,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["none",{"_index":492,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["normal",{"_index":1363,"title":{},"body":{"classes/Track.html":{}}}],["not(.active",{"_index":518,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["not(.active)+nav",{"_index":517,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["notation",{"_index":1572,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["note",{"_index":93,"title":{"classes/Note.html":{}},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"components/MetronomeComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["note#duration",{"_index":838,"title":{},"body":{"classes/Note.html":{}}}],["note#timecode",{"_index":837,"title":{},"body":{"classes/Note.html":{}}}],["note's",{"_index":11,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["note'},{'name",{"_index":276,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["note(0,0",{"_index":847,"title":{},"body":{"components/NoteComponent.html":{}}}],["note(timecode",{"_index":1030,"title":{},"body":{"components/RhythmComponent.html":{}}}],["note.component.html",{"_index":846,"title":{},"body":{"components/NoteComponent.html":{}}}],["note.component.sass",{"_index":845,"title":{},"body":{"components/NoteComponent.html":{}}}],["note.svg",{"_index":1562,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["note.ts",{"_index":1519,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["note/note.component",{"_index":334,"title":{},"body":{"modules/AppModule.html":{}}}],["notecomponent",{"_index":275,"title":{"components/NoteComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["noterepresentation",{"_index":72,"title":{"classes/NoteRepresentation.html":{}},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/TrackComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["noterepresentation([\"4n",{"_index":101,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["noterepresentation([\"8n",{"_index":1450,"title":{},"body":{"components/TrackComponent.html":{}}}],["notes",{"_index":67,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"miscellaneous/enumerations.html":{}}}],["notesimg",{"_index":1841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notesstr",{"_index":561,"title":{},"body":{"classes/Measure.html":{}}}],["notesstr.slice(0",{"_index":564,"title":{},"body":{"classes/Measure.html":{}}}],["notify",{"_index":1313,"title":{},"body":{"components/TempoComponent.html":{}}}],["nouveau",{"_index":422,"title":{},"body":{"components/DashboardComponent.html":{}}}],["null",{"_index":88,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":16,"title":{},"body":{"classes/AddOn.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["numberofwholenote",{"_index":590,"title":{},"body":{"components/MeasureComponent.html":{}}}],["number|null",{"_index":114,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Tempo.html":{}}}],["n|u)|c55\\/|capi|ccwa|cdm",{"_index":181,"title":{},"body":{"components/AppComponent.html":{}}}],["object",{"_index":1109,"title":{},"body":{"classes/Signature.html":{},"classes/Tempo.html":{},"miscellaneous/variables.html":{}}}],["oboe",{"_index":1681,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ocarina",{"_index":1692,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["onchanges",{"_index":574,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["ondex",{"_index":949,"title":{},"body":{"components/RhythmComponent.html":{}}}],["one",{"_index":569,"title":{},"body":{"components/MeasureComponent.html":{}}}],["oninit",{"_index":360,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13",{"_index":209,"title":{},"body":{"components/AppComponent.html":{}}}],["oo|p",{"_index":217,"title":{},"body":{"components/AppComponent.html":{}}}],["opacity",{"_index":522,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/AddOn.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["orchestra_hit",{"_index":1668,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["orchestral_harp",{"_index":1659,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["order",{"_index":84,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["origin",{"_index":713,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows",{"_index":172,"title":{},"body":{"components/AppComponent.html":{}}}],["out",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"components/MetronomeComponent.html":{},"index.html":{},"overview.html":{}}}],["output",{"_index":373,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["outputs",{"_index":364,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/TempoComponent.html":{}}}],["ouvrir",{"_index":429,"title":{},"body":{"components/DashboardComponent.html":{}}}],["overdriven_guitar",{"_index":1642,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["overflow",{"_index":1068,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["overview",{"_index":1823,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["o|v)|zz)|mt(50|p1|v",{"_index":205,"title":{},"body":{"components/AppComponent.html":{}}}],["p",{"_index":397,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["package",{"_index":1533,"title":{"dependencies.html":{}},"body":{}}],["pad_1_new_age",{"_index":1701,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pad_2_warm",{"_index":1702,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pad_3_polysynth",{"_index":1703,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pad_4_choir",{"_index":1704,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pad_5_bowed",{"_index":1705,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pad_6_metallic",{"_index":1706,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pad_7_halo",{"_index":1707,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pad_8_sweep",{"_index":1708,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["padding",{"_index":400,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["page",{"_index":416,"title":{},"body":{"components/DashboardComponent.html":{},"index.html":{}}}],["palce",{"_index":127,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["palying",{"_index":954,"title":{},"body":{"components/RhythmComponent.html":{}}}],["pan_flute",{"_index":1688,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["param",{"_index":58,"title":{},"body":{"classes/AddOn.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["parameter",{"_index":951,"title":{},"body":{"components/RhythmComponent.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"classes/AddOn.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":370,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/TempoComponent.html":{}}}],["parent's",{"_index":759,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["part",{"_index":1464,"title":{},"body":{"components/TrackComponent.html":{}}}],["parts",{"_index":82,"title":{},"body":{"classes/AddOn.html":{},"components/ExportMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/SaveMenuComponent.html":{}}}],["pass",{"_index":743,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["path",{"_index":345,"title":{},"body":{"modules/AppRoutingModule.html":{},"classes/NoteRepresentation.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"miscellaneous/functions.html":{}}}],["pathmatch",{"_index":349,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["paths",{"_index":80,"title":{},"body":{"classes/AddOn.html":{},"components/MetronomeComponent.html":{},"classes/NoteRepresentation.html":{}}}],["pathsfromapp",{"_index":1837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pause",{"_index":876,"title":{},"body":{"components/PlaybarComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["per",{"_index":635,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Tempo.html":{}}}],["percussive_organ",{"_index":1630,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["phone",{"_index":240,"title":{},"body":{"components/AppComponent.html":{}}}],["piccolo",{"_index":1685,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["piste",{"_index":378,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["pizzicato_strings",{"_index":1658,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["place",{"_index":115,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["plan",{"_index":964,"title":{},"body":{"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["plantostring",{"_index":1350,"title":{},"body":{"classes/Track.html":{}}}],["play",{"_index":657,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["playbar",{"_index":879,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["playbar'},{'name",{"_index":278,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["playbar.component.html",{"_index":881,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["playbar.component.sass",{"_index":880,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["playbar/playbar.component",{"_index":330,"title":{},"body":{"modules/AppModule.html":{}}}],["playbarcomponent",{"_index":277,"title":{"components/PlaybarComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["playbarcomponent#isplaying",{"_index":886,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["played",{"_index":640,"title":{},"body":{"components/MetronomeComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["player",{"_index":1226,"title":{},"body":{"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["player'},{'name",{"_index":287,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["player.component",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"components/TrackComponent.html":{}}}],["player.component.html",{"_index":1231,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.sass",{"_index":1230,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.ts",{"_index":1224,"title":{},"body":{"components/SoundPlayerComponent.html":{},"coverage.html":{}}}],["player.component.ts:108",{"_index":1247,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.ts:18",{"_index":1251,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.ts:28",{"_index":1236,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.ts:33",{"_index":1235,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.ts:77",{"_index":1245,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.ts:87",{"_index":1240,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.ts:97",{"_index":1237,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player/sound",{"_index":337,"title":{},"body":{"modules/AppModule.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{}}}],["playfromtime",{"_index":1232,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["playfromtime(starttime",{"_index":1239,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["playing",{"_index":755,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["playmetronome",{"_index":751,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["plays",{"_index":1229,"title":{},"body":{"components/SoundPlayerComponent.html":{},"classes/Track.html":{}}}],["playsound",{"_index":1233,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["playtracks",{"_index":885,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["point",{"_index":1241,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["pointer",{"_index":392,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["polyrythm",{"_index":832,"title":{},"body":{"classes/Note.html":{}}}],["polyrythmie",{"_index":477,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["polyrythmique",{"_index":241,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["polyrytmie",{"_index":424,"title":{},"body":{"components/DashboardComponent.html":{}}}],["position",{"_index":398,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MetronomeComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["possess",{"_index":97,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["possible",{"_index":621,"title":{},"body":{"components/MetronomeComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["prefix",{"_index":717,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["primal",{"_index":1558,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["private",{"_index":15,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"classes/Signature.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"classes/Track.html":{}}}],["prod",{"_index":1811,"title":{},"body":{"index.html":{}}}],["production",{"_index":1813,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":1155,"title":{},"body":{"components/SignatureComponent.html":{},"index.html":{}}}],["projet",{"_index":423,"title":{},"body":{"components/DashboardComponent.html":{}}}],["promise",{"_index":771,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["promise(function(resolve",{"_index":1016,"title":{},"body":{"components/RhythmComponent.html":{}}}],["properties",{"_index":14,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"classes/Measure.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["property",{"_index":1481,"title":{},"body":{"components/TrackComponent.html":{}}}],["property($name",{"_index":718,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["property(background",{"_index":1095,"title":{},"body":{"components/RhythmComponent.html":{}}}],["property(transform",{"_index":721,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["propname",{"_index":786,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["protractor",{"_index":1820,"title":{},"body":{"index.html":{}}}],["providers",{"_index":300,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["put",{"_index":1042,"title":{},"body":{"components/RhythmComponent.html":{}}}],["qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h",{"_index":216,"title":{},"body":{"components/AppComponent.html":{}}}],["quarter",{"_index":1566,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["quarter_note",{"_index":1565,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["quarternoterep",{"_index":100,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["quarternotetripletrep",{"_index":102,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["r",{"_index":1576,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["radius",{"_index":449,"title":{},"body":{"components/DashboardComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["ratio",{"_index":637,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["receive",{"_index":356,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["recorded",{"_index":932,"title":{},"body":{"components/RhythmComponent.html":{}}}],["recorder",{"_index":1687,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["recording",{"_index":904,"title":{},"body":{"components/RhythmComponent.html":{}}}],["recording>article",{"_index":1490,"title":{},"body":{"components/TrackComponent.html":{}}}],["redirectto",{"_index":348,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["reed_organ",{"_index":1633,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["reference",{"_index":1825,"title":{},"body":{"index.html":{}}}],["references",{"_index":65,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["relative",{"_index":399,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/TrackComponent.html":{}}}],["released",{"_index":940,"title":{},"body":{"components/RhythmComponent.html":{}}}],["reload",{"_index":1800,"title":{},"body":{"index.html":{}}}],["remove",{"_index":122,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["removefromimgspaths",{"_index":855,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["removefromimgspaths(imgname",{"_index":123,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["removefromimgspathsat",{"_index":856,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["removefromimgspathsat(index",{"_index":128,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["repeat",{"_index":409,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/TrackComponent.html":{}}}],["repertory",{"_index":1771,"title":{},"body":{"miscellaneous/functions.html":{}}}],["replace",{"_index":831,"title":{},"body":{"classes/Note.html":{}}}],["represent",{"_index":1225,"title":{},"body":{"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{}}}],["representaion",{"_index":44,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["representation",{"_index":12,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["representation.ts",{"_index":7,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["representation.ts:108",{"_index":862,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:116",{"_index":868,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:125",{"_index":866,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:13",{"_index":33,"title":{},"body":{"classes/AddOn.html":{}}}],["representation.ts:135",{"_index":869,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:144",{"_index":860,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:156",{"_index":870,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:167",{"_index":871,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:17",{"_index":27,"title":{},"body":{"classes/AddOn.html":{}}}],["representation.ts:175",{"_index":872,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:187",{"_index":863,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:198",{"_index":864,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:34",{"_index":38,"title":{},"body":{"classes/AddOn.html":{}}}],["representation.ts:42",{"_index":47,"title":{},"body":{"classes/AddOn.html":{}}}],["representation.ts:50",{"_index":40,"title":{},"body":{"classes/AddOn.html":{}}}],["representation.ts:57",{"_index":51,"title":{},"body":{"classes/AddOn.html":{}}}],["representation.ts:80",{"_index":859,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:84",{"_index":858,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["represention",{"_index":52,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["represents",{"_index":529,"title":{},"body":{"classes/Measure.html":{},"classes/Signature.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["reput",{"_index":1048,"title":{},"body":{"components/RhythmComponent.html":{}}}],["reset",{"_index":308,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["resolve",{"_index":1018,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rest",{"_index":1577,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["result",{"_index":145,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":147,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrievenotetype",{"_index":808,"title":{},"body":{"classes/Note.html":{}}}],["return",{"_index":64,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["returns",{"_index":39,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["reverse_cymbal",{"_index":1732,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["rgba(255",{"_index":1219,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["rhythm",{"_index":346,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["rhythm'},{'name",{"_index":280,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["rhythm.component.html",{"_index":899,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rhythm.component.sass",{"_index":898,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rhythm/rhythm.component",{"_index":322,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["rhythmcomponent",{"_index":279,"title":{"components/RhythmComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["rhythmcomponent#selectedtrackid",{"_index":1041,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rhythmcomponent#signature",{"_index":1037,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rhythmcomponent#tempo",{"_index":1031,"title":{},"body":{"components/RhythmComponent.html":{}}}],["right",{"_index":488,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["rock_organ",{"_index":1631,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["root",{"_index":161,"title":{},"body":{"components/AppComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["root'},{'name",{"_index":259,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["rotate",{"_index":722,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["rotate(0deg",{"_index":725,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["rotate(45deg",{"_index":727,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["rotatey(180deg",{"_index":894,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["rotating",{"_index":731,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["routermodule",{"_index":342,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":351,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":341,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"overview.html":{},"routes.html":{}}}],["routing.module",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":340,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["run",{"_index":1793,"title":{},"body":{"index.html":{}}}],["running",{"_index":656,"title":{},"body":{"components/MetronomeComponent.html":{},"index.html":{}}}],["runningmetronome",{"_index":612,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["runningmetronome.getsoundname",{"_index":696,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["rxjs",{"_index":1542,"title":{},"body":{"dependencies.html":{}}}],["rythm",{"_index":460,"title":{},"body":{"components/ExportMenuComponent.html":{}}}],["rythmcomponent#signature",{"_index":978,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rythmcomponent#tempo",{"_index":979,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rythmsimg",{"_index":1839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rythmstr",{"_index":1049,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rythmstr.slice(0",{"_index":1061,"title":{},"body":{"components/RhythmComponent.html":{}}}],["s",{"_index":179,"title":{},"body":{"components/AppComponent.html":{}}}],["sass/vars",{"_index":246,"title":{},"body":{"components/AppComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["save",{"_index":282,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["savemenucomponent",{"_index":281,"title":{"components/SaveMenuComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["scaffolding",{"_index":1803,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":1072,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["scrollbar",{"_index":1076,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["sdk\\/|se(c",{"_index":218,"title":{},"body":{"components/AppComponent.html":{}}}],["seashore",{"_index":1735,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sec",{"_index":631,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["seconds",{"_index":985,"title":{},"body":{"components/RhythmComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["section",{"_index":434,"title":{},"body":{"components/DashboardComponent.html":{},"components/RhythmComponent.html":{}}}],["section>div",{"_index":438,"title":{},"body":{"components/DashboardComponent.html":{}}}],["see",{"_index":662,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Tempo.html":{}}}],["select",{"_index":739,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["selected",{"_index":924,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["selected>article",{"_index":1485,"title":{},"body":{"components/TrackComponent.html":{}}}],["selectedtrack",{"_index":1446,"title":{},"body":{"components/TrackComponent.html":{}}}],["selectedtrackid",{"_index":905,"title":{},"body":{"components/RhythmComponent.html":{}}}],["selectedtrackindex",{"_index":906,"title":{},"body":{"components/RhythmComponent.html":{}}}],["selectinstrument",{"_index":735,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["selectnote",{"_index":1213,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["selector",{"_index":159,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["selecttrack",{"_index":1411,"title":{},"body":{"components/TrackComponent.html":{}}}],["send",{"_index":372,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/RhythmComponent.html":{}}}],["serve",{"_index":1795,"title":{},"body":{"index.html":{}}}],["server",{"_index":1792,"title":{},"body":{"index.html":{}}}],["set",{"_index":48,"title":{},"body":{"classes/AddOn.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["setactive",{"_index":466,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["setactive(active",{"_index":471,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["setaddon",{"_index":857,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["setaddon(addon",{"_index":130,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["setbottom",{"_index":1104,"title":{},"body":{"classes/Signature.html":{}}}],["setbottom(bottom",{"_index":1128,"title":{},"body":{"classes/Signature.html":{}}}],["setbpm",{"_index":615,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["setbpm(bpm",{"_index":632,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["setduration",{"_index":809,"title":{},"body":{"classes/Note.html":{}}}],["setduration(duration",{"_index":820,"title":{},"body":{"classes/Note.html":{}}}],["setinstrument",{"_index":616,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Track.html":{}}}],["setinstrument(instrument",{"_index":1385,"title":{},"body":{"classes/Track.html":{}}}],["setinstrument(soundname",{"_index":638,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["setisplayingtracks",{"_index":915,"title":{},"body":{"components/RhythmComponent.html":{}}}],["setisplayingtracks(bool",{"_index":952,"title":{},"body":{"components/RhythmComponent.html":{}}}],["setnote",{"_index":1278,"title":{},"body":{"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["setnote(note",{"_index":1289,"title":{},"body":{"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["setnotes",{"_index":1351,"title":{},"body":{"classes/Track.html":{}}}],["setnotes(notes",{"_index":1387,"title":{},"body":{"classes/Track.html":{}}}],["setnotetobottom",{"_index":1165,"title":{},"body":{"components/SignatureComponent.html":{}}}],["setnotetobottom(note",{"_index":1177,"title":{},"body":{"components/SignatureComponent.html":{}}}],["setnumber",{"_index":21,"title":{},"body":{"classes/AddOn.html":{}}}],["setnumber(number",{"_index":46,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["setplan",{"_index":1352,"title":{},"body":{"classes/Track.html":{}}}],["setplan(plan",{"_index":1389,"title":{},"body":{"classes/Track.html":{}}}],["setselectedtrackid",{"_index":916,"title":{},"body":{"components/RhythmComponent.html":{}}}],["setselectedtrackid(id",{"_index":955,"title":{},"body":{"components/RhythmComponent.html":{}}}],["setsignature",{"_index":917,"title":{},"body":{"components/RhythmComponent.html":{}}}],["setsignature(signature",{"_index":957,"title":{},"body":{"components/RhythmComponent.html":{}}}],["setsolomuted",{"_index":1412,"title":{},"body":{"components/TrackComponent.html":{}}}],["setsolomuted(bool",{"_index":1427,"title":{},"body":{"components/TrackComponent.html":{}}}],["settempo",{"_index":617,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["settempo(tempo",{"_index":643,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["settimecode",{"_index":810,"title":{},"body":{"classes/Note.html":{}}}],["settimecode(timecode",{"_index":822,"title":{},"body":{"classes/Note.html":{}}}],["settimeout(function",{"_index":1017,"title":{},"body":{"components/RhythmComponent.html":{}}}],["settop",{"_index":1105,"title":{},"body":{"classes/Signature.html":{}}}],["settop(top",{"_index":1130,"title":{},"body":{"classes/Signature.html":{}}}],["settopandbottom",{"_index":1106,"title":{},"body":{"classes/Signature.html":{}}}],["settopandbottom(top",{"_index":1132,"title":{},"body":{"classes/Signature.html":{}}}],["setusehook",{"_index":22,"title":{},"body":{"classes/AddOn.html":{}}}],["setusehook(usehook",{"_index":50,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["setvolume",{"_index":1234,"title":{},"body":{"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["setvolume(volume",{"_index":1246,"title":{},"body":{"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["shadow(0",{"_index":1217,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["shakuhachi",{"_index":1690,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["shamisen",{"_index":1719,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["shanai",{"_index":1724,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["shar|sie",{"_index":220,"title":{},"body":{"components/AppComponent.html":{}}}],["show",{"_index":355,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["shown",{"_index":36,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["shrink",{"_index":1082,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["sig",{"_index":1210,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signal",{"_index":369,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["signature",{"_index":578,"title":{"classes/Signature.html":{}},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{}}}],["signature's",{"_index":1120,"title":{},"body":{"classes/Signature.html":{}}}],["signature'},{'name",{"_index":284,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["signature(4",{"_index":1186,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signature(signature.gettop",{"_index":1039,"title":{},"body":{"components/RhythmComponent.html":{}}}],["signature.component.html",{"_index":1157,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signature.component.sass",{"_index":1156,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signature.getbottom",{"_index":1040,"title":{},"body":{"components/RhythmComponent.html":{}}}],["signature.getbottomnumber",{"_index":1209,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signature.gettop",{"_index":1208,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signature/signature.component",{"_index":327,"title":{},"body":{"modules/AppModule.html":{}}}],["signaturecomponent",{"_index":283,"title":{"components/SignatureComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["signaturecomponent#bottom|bottom",{"_index":1136,"title":{},"body":{"classes/Signature.html":{}}}],["signaturecomponent#bottom|bottom}'s",{"_index":1142,"title":{},"body":{"classes/Signature.html":{}}}],["signaturecomponent#modifiablebottom",{"_index":1191,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signaturecomponent#modifiabletop",{"_index":1190,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signaturecomponent#signature",{"_index":1205,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signaturecomponent#top|top",{"_index":1135,"title":{},"body":{"classes/Signature.html":{}}}],["signaturecomponent#top|top}'s",{"_index":1140,"title":{},"body":{"classes/Signature.html":{}}}],["signatureout",{"_index":1192,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signature|signature",{"_index":1189,"title":{},"body":{"components/SignatureComponent.html":{}}}],["similar",{"_index":1154,"title":{},"body":{"components/SignatureComponent.html":{}}}],["simple",{"_index":425,"title":{},"body":{"components/DashboardComponent.html":{}}}],["simplechanges",{"_index":585,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["single",{"_index":1405,"title":{},"body":{"components/TrackComponent.html":{}}}],["sitar",{"_index":1717,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sixteen",{"_index":1560,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sixteen_note",{"_index":1568,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sixteenth",{"_index":1587,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["size",{"_index":394,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["sizing",{"_index":454,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/TrackComponent.html":{}}}],["slap_bass_1",{"_index":1649,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["slap_bass_2",{"_index":1650,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["slice",{"_index":1488,"title":{},"body":{"components/TrackComponent.html":{}}}],["slope",{"_index":480,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["smooth",{"_index":1074,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["solid",{"_index":500,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["solo",{"_index":965,"title":{},"body":{"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["soloed",{"_index":966,"title":{},"body":{"components/RhythmComponent.html":{}}}],["soloedtrack",{"_index":918,"title":{},"body":{"components/RhythmComponent.html":{}}}],["soloedtrack(bool",{"_index":960,"title":{},"body":{"components/RhythmComponent.html":{}}}],["solomuted",{"_index":1414,"title":{},"body":{"components/TrackComponent.html":{}}}],["something",{"_index":1778,"title":{},"body":{"miscellaneous/functions.html":{}}}],["soprano_sax",{"_index":1677,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sound",{"_index":286,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["sound's",{"_index":1784,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sound'},{'name",{"_index":274,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["sound.component",{"_index":336,"title":{},"body":{"modules/AppModule.html":{}}}],["sound.component.html",{"_index":748,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.sass",{"_index":747,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts",{"_index":738,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"coverage.html":{}}}],["sound.component.ts:111",{"_index":773,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:26",{"_index":777,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:31",{"_index":779,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:36",{"_index":761,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:40",{"_index":760,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:44",{"_index":754,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:49",{"_index":776,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:69",{"_index":762,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:88",{"_index":774,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:96",{"_index":766,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.getpath(soundname",{"_index":695,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["sound.values",{"_index":691,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["sound/metronome",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"components/MetronomeSoundComponent.html":{},"coverage.html":{}}}],["soundname",{"_index":642,"title":{},"body":{"components/MetronomeComponent.html":{},"components/SoundPlayerComponent.html":{},"miscellaneous/functions.html":{}}}],["soundpath",{"_index":1782,"title":{},"body":{"miscellaneous/functions.html":{}}}],["soundplayer",{"_index":1440,"title":{},"body":{"components/TrackComponent.html":{}}}],["soundplayer(\"exampleout.mid.wav",{"_index":1443,"title":{},"body":{"components/TrackComponent.html":{}}}],["soundplayercomponent",{"_index":285,"title":{"components/SoundPlayerComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["sounds",{"_index":1741,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"index.html":{}}}],["space",{"_index":441,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{}}}],["span",{"_index":513,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TrackComponent.html":{}}}],["span:first",{"_index":1212,"title":{},"body":{"components/SignatureComponent.html":{}}}],["span>span",{"_index":1339,"title":{},"body":{"components/TempoComponent.html":{}}}],["specific",{"_index":1430,"title":{},"body":{"components/TrackComponent.html":{}}}],["specify",{"_index":1589,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../basic",{"_index":1550,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../binary",{"_index":1551,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../environment.prod.ts",{"_index":1835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../instrument.ts",{"_index":1553,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../metronome.ts",{"_index":1554,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../note",{"_index":1832,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../ternary",{"_index":1555,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/app",{"_index":339,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":155,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:17",{"_index":242,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:22",{"_index":236,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/classes/measure.ts",{"_index":528,"title":{},"body":{"classes/Measure.html":{},"coverage.html":{}}}],["src/app/classes/measure.ts:18",{"_index":533,"title":{},"body":{"classes/Measure.html":{}}}],["src/app/classes/measure.ts:24",{"_index":540,"title":{},"body":{"classes/Measure.html":{}}}],["src/app/classes/measure.ts:29",{"_index":539,"title":{},"body":{"classes/Measure.html":{}}}],["src/app/classes/measure.ts:57",{"_index":541,"title":{},"body":{"classes/Measure.html":{}}}],["src/app/classes/measure.ts:65",{"_index":542,"title":{},"body":{"classes/Measure.html":{}}}],["src/app/classes/metronome.ts",{"_index":1509,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/app/classes/note",{"_index":6,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/classes/note.ts",{"_index":801,"title":{},"body":{"classes/Note.html":{},"coverage.html":{}}}],["src/app/classes/note.ts:11",{"_index":814,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:16",{"_index":811,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:21",{"_index":815,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:26",{"_index":812,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:43",{"_index":818,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:51",{"_index":823,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:59",{"_index":817,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:67",{"_index":821,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:75",{"_index":819,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:87",{"_index":824,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/signature.ts",{"_index":1097,"title":{},"body":{"classes/Signature.html":{},"coverage.html":{}}}],["src/app/classes/signature.ts:10",{"_index":1114,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:101",{"_index":1122,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:110",{"_index":1121,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:119",{"_index":1118,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:15",{"_index":1108,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:37",{"_index":1123,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:45",{"_index":1131,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:56",{"_index":1116,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:65",{"_index":1129,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:76",{"_index":1133,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:88",{"_index":1126,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/tempo.ts",{"_index":1272,"title":{},"body":{"classes/Tempo.html":{},"coverage.html":{}}}],["src/app/classes/tempo.ts:10",{"_index":1281,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:14",{"_index":1280,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:32",{"_index":1284,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:40",{"_index":1290,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:49",{"_index":1283,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:57",{"_index":1288,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:70",{"_index":1287,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:78",{"_index":1285,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:86",{"_index":1286,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/track.ts",{"_index":1340,"title":{},"body":{"classes/Track.html":{},"coverage.html":{}}}],["src/app/classes/track.ts:106",{"_index":1384,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:11",{"_index":1361,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:120",{"_index":1376,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:128",{"_index":1382,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:137",{"_index":1379,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:146",{"_index":1381,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:159",{"_index":1388,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:16",{"_index":1358,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:167",{"_index":1365,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:174",{"_index":1366,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:183",{"_index":1369,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:196",{"_index":1391,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:20",{"_index":1359,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:27",{"_index":1362,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:32",{"_index":1360,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:37",{"_index":1354,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:64",{"_index":1374,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:72",{"_index":1375,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:80",{"_index":1386,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:88",{"_index":1383,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:96",{"_index":1390,"title":{},"body":{"classes/Track.html":{}}}],["src/app/create",{"_index":352,"title":{},"body":{"components/CreateTrackComponent.html":{},"coverage.html":{}}}],["src/app/dashboard/dashboard.component.ts",{"_index":414,"title":{},"body":{"components/DashboardComponent.html":{},"coverage.html":{}}}],["src/app/enums/basic",{"_index":1518,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/app/enums/binary",{"_index":1521,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/app/enums/instrument.ts",{"_index":1612,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/enums/ternary",{"_index":1749,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/export",{"_index":456,"title":{},"body":{"components/ExportMenuComponent.html":{},"coverage.html":{}}}],["src/app/main",{"_index":465,"title":{},"body":{"components/MainMenuComponent.html":{},"coverage.html":{}}}],["src/app/measure/measure.component.ts",{"_index":566,"title":{},"body":{"components/MeasureComponent.html":{},"coverage.html":{}}}],["src/app/measure/measure.component.ts:22",{"_index":582,"title":{},"body":{"components/MeasureComponent.html":{}}}],["src/app/measure/measure.component.ts:27",{"_index":583,"title":{},"body":{"components/MeasureComponent.html":{}}}],["src/app/measure/measure.component.ts:32",{"_index":581,"title":{},"body":{"components/MeasureComponent.html":{}}}],["src/app/measure/measure.component.ts:52",{"_index":584,"title":{},"body":{"components/MeasureComponent.html":{}}}],["src/app/metronome",{"_index":737,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"coverage.html":{}}}],["src/app/metronome/metronome.component.ts",{"_index":606,"title":{},"body":{"components/MetronomeComponent.html":{},"coverage.html":{}}}],["src/app/metronome/metronome.component.ts:106",{"_index":649,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:119",{"_index":620,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:127",{"_index":639,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:19",{"_index":667,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:24",{"_index":661,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:28",{"_index":655,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:33",{"_index":658,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:38",{"_index":653,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:57",{"_index":633,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:69",{"_index":644,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:81",{"_index":624,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:88",{"_index":645,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:98",{"_index":647,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/note/note.component.ts",{"_index":844,"title":{},"body":{"components/NoteComponent.html":{},"coverage.html":{}}}],["src/app/note/note.component.ts:19",{"_index":848,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/playbar/playbar.component.ts",{"_index":873,"title":{},"body":{"components/PlaybarComponent.html":{},"coverage.html":{}}}],["src/app/playbar/playbar.component.ts:23",{"_index":883,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["src/app/playbar/playbar.component.ts:44",{"_index":884,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts",{"_index":895,"title":{},"body":{"components/RhythmComponent.html":{},"coverage.html":{}}}],["src/app/rhythm/rhythm.component.ts:101",{"_index":926,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:111",{"_index":972,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:138",{"_index":923,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:145",{"_index":977,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:153",{"_index":930,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:169",{"_index":969,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:177",{"_index":935,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:191",{"_index":959,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:201",{"_index":958,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:210",{"_index":956,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:23",{"_index":999,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:235",{"_index":942,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:249",{"_index":961,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:275",{"_index":953,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:28",{"_index":992,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:284",{"_index":973,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:33",{"_index":998,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:38",{"_index":989,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:43",{"_index":991,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:48",{"_index":1000,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:53",{"_index":988,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:58",{"_index":986,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:63",{"_index":995,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:68",{"_index":997,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:73",{"_index":981,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:78",{"_index":983,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:83",{"_index":984,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/save",{"_index":1096,"title":{},"body":{"components/SaveMenuComponent.html":{},"coverage.html":{}}}],["src/app/signature/signature.component.ts",{"_index":1152,"title":{},"body":{"components/SignatureComponent.html":{},"coverage.html":{}}}],["src/app/signature/signature.component.ts:106",{"_index":1176,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:114",{"_index":1178,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:21",{"_index":1187,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:26",{"_index":1185,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:31",{"_index":1184,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:36",{"_index":1182,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:41",{"_index":1181,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:61",{"_index":1180,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:75",{"_index":1179,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:89",{"_index":1168,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:98",{"_index":1173,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/sound",{"_index":1223,"title":{},"body":{"components/SoundPlayerComponent.html":{},"coverage.html":{}}}],["src/app/tempo/tempo.component.ts",{"_index":1301,"title":{},"body":{"components/TempoComponent.html":{},"coverage.html":{}}}],["src/app/tempo/tempo.component.ts:102",{"_index":1314,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:112",{"_index":1315,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:121",{"_index":1316,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:19",{"_index":1326,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:24",{"_index":1324,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:29",{"_index":1323,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:33",{"_index":1321,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:38",{"_index":1312,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:58",{"_index":1318,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:71",{"_index":1317,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:79",{"_index":1320,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:87",{"_index":1319,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/track/track.component.ts",{"_index":1404,"title":{},"body":{"components/TrackComponent.html":{},"coverage.html":{}}}],["src/app/track/track.component.ts:112",{"_index":1420,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:130",{"_index":1433,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:138",{"_index":1428,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:145",{"_index":1425,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:153",{"_index":1429,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:165",{"_index":1432,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:184",{"_index":1426,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:196",{"_index":1424,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:204",{"_index":1422,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:27",{"_index":1419,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:32",{"_index":1435,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:37",{"_index":1436,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:44",{"_index":1415,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:55",{"_index":1437,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:60",{"_index":1417,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:70",{"_index":1434,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:82",{"_index":1416,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:87",{"_index":1418,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/environments/environment.prod.ts",{"_index":1528,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1530,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":524,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{}}}],["started",{"_index":1787,"title":{"index.html":{}},"body":{}}],["starting",{"_index":1774,"title":{},"body":{"miscellaneous/functions.html":{}}}],["startrecord",{"_index":907,"title":{},"body":{"components/RhythmComponent.html":{}}}],["starts",{"_index":646,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/SoundPlayerComponent.html":{}}}],["starttap",{"_index":919,"title":{},"body":{"components/RhythmComponent.html":{}}}],["starttap(evt",{"_index":968,"title":{},"body":{"components/RhythmComponent.html":{}}}],["starttapvar",{"_index":908,"title":{},"body":{"components/RhythmComponent.html":{}}}],["starttime",{"_index":1242,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["state",{"_index":936,"title":{},"body":{"components/RhythmComponent.html":{}}}],["stated",{"_index":987,"title":{},"body":{"components/RhythmComponent.html":{}}}],["statements",{"_index":1506,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":74,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/NoteRepresentation.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["steel_drums",{"_index":1727,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sticky",{"_index":487,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["stop",{"_index":618,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["stopmetronome",{"_index":752,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["stops",{"_index":648,"title":{},"body":{"components/MetronomeComponent.html":{},"components/TrackComponent.html":{}}}],["store",{"_index":802,"title":{},"body":{"classes/Note.html":{}}}],["stored",{"_index":1808,"title":{},"body":{"index.html":{}}}],["stores",{"_index":1557,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stretch",{"_index":1489,"title":{},"body":{"components/TrackComponent.html":{}}}],["string",{"_index":76,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"classes/Measure.html":{},"components/MetronomeComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["string_ensemble_1",{"_index":1661,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["string_ensemble_2",{"_index":1662,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stringified",{"_index":544,"title":{},"body":{"classes/Measure.html":{},"classes/Note.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["style",{"_index":499,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["styles",{"_index":152,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["styles/menu",{"_index":464,"title":{},"body":{"components/ExportMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/SaveMenuComponent.html":{}}}],["styleurls",{"_index":162,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["such",{"_index":572,"title":{},"body":{"components/MeasureComponent.html":{},"components/PlaybarComponent.html":{}}}],["support",{"_index":1826,"title":{},"body":{"modules.html":{}}}],["sur",{"_index":426,"title":{},"body":{"components/DashboardComponent.html":{}}}],["svg",{"_index":79,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"modules.html":{}}}],["sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl",{"_index":224,"title":{},"body":{"components/AppComponent.html":{}}}],["synth_bass_1",{"_index":1651,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synth_bass_2",{"_index":1652,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synth_brass_1",{"_index":1675,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synth_brass_2",{"_index":1676,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synth_choir",{"_index":1667,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synth_drum",{"_index":1731,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synth_strings_1",{"_index":1663,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synth_strings_2",{"_index":1664,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["s|devi|dica|dmob|do(c|p)o|ds(12",{"_index":184,"title":{},"body":{"components/AppComponent.html":{}}}],["t",{"_index":227,"title":{},"body":{"components/AppComponent.html":{}}}],["tab",{"_index":470,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["table",{"_index":1532,"title":{},"body":{"coverage.html":{}}}],["tableau",{"_index":419,"title":{},"body":{"components/DashboardComponent.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1531,"title":{},"body":{"coverage.html":{}}}],["taiko_drum",{"_index":1729,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["take",{"_index":548,"title":{},"body":{"classes/Measure.html":{}}}],["takes",{"_index":628,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["tango_accordion",{"_index":1636,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tap",{"_index":937,"title":{},"body":{"components/RhythmComponent.html":{}}}],["tap_button_size",{"_index":1063,"title":{},"body":{"components/RhythmComponent.html":{}}}],["tdg",{"_index":225,"title":{},"body":{"components/AppComponent.html":{}}}],["tel(i|m)|tim",{"_index":226,"title":{},"body":{"components/AppComponent.html":{}}}],["telephone_ring",{"_index":1737,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["template",{"_index":151,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["templateurl",{"_index":164,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["tempo",{"_index":579,"title":{"classes/Tempo.html":{}},"body":{"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{}}}],["tempo#bpm|bpm",{"_index":1293,"title":{},"body":{"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["tempo#note|note",{"_index":1201,"title":{},"body":{"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["tempo's",{"_index":1171,"title":{},"body":{"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["tempo'},{'name",{"_index":289,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["tempo(basicnote.quarter_note",{"_index":665,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["tempo(tempo.getnote",{"_index":1035,"title":{},"body":{"components/RhythmComponent.html":{}}}],["tempo):void",{"_index":1032,"title":{},"body":{"components/RhythmComponent.html":{}}}],["tempo.component.html",{"_index":1305,"title":{},"body":{"components/TempoComponent.html":{}}}],["tempo.component.sass",{"_index":1304,"title":{},"body":{"components/TempoComponent.html":{}}}],["tempo.getbpm",{"_index":1036,"title":{},"body":{"components/RhythmComponent.html":{},"components/TempoComponent.html":{}}}],["tempo/tempo.component",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["tempocomponent",{"_index":288,"title":{"components/TempoComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["tempocomponent|tempocomponent",{"_index":1188,"title":{},"body":{"components/SignatureComponent.html":{}}}],["tempooutput",{"_index":1311,"title":{},"body":{"components/TempoComponent.html":{}}}],["tempo|tempo",{"_index":1327,"title":{},"body":{"components/TempoComponent.html":{}}}],["tempo|tempo}'s",{"_index":1200,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["tenor_sax",{"_index":1679,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ternary",{"_index":816,"title":{},"body":{"classes/Note.html":{},"miscellaneous/enumerations.html":{}}}],["ternarynote",{"_index":71,"title":{},"body":{"classes/AddOn.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/enumerations.html":{}}}],["ternarynote._4n",{"_index":842,"title":{},"body":{"classes/Note.html":{}}}],["test",{"_index":1449,"title":{},"body":{"components/TrackComponent.html":{},"index.html":{}}}],["tests",{"_index":1815,"title":{},"body":{"index.html":{}}}],["text",{"_index":395,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["tha",{"_index":1783,"title":{},"body":{"miscellaneous/functions.html":{}}}],["that's",{"_index":990,"title":{},"body":{"components/RhythmComponent.html":{}}}],["themselves",{"_index":1590,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["this.active",{"_index":475,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["this.addon",{"_index":132,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.addon.getnumber",{"_index":137,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.addon.getusehook",{"_index":144,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.bottom",{"_index":1139,"title":{},"body":{"classes/Signature.html":{}}}],["this.bpm",{"_index":1295,"title":{},"body":{"classes/Tempo.html":{}}}],["this.convertimgnametopath(imgname",{"_index":121,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.create.emit(true",{"_index":375,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["this.duration",{"_index":829,"title":{},"body":{"classes/Note.html":{}}}],["this.endtapvar",{"_index":1026,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.endtapvar.gettime",{"_index":1028,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.finishedplayingtrack.emit(false",{"_index":1256,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.gettrackindex(id",{"_index":1047,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.id",{"_index":1396,"title":{},"body":{"classes/Track.html":{}}}],["this.imgspaths.indexof(imgname",{"_index":125,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.imgspaths.length",{"_index":108,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.imgspaths.push(this.convertimgnametopath(imgname",{"_index":119,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.imgspaths.splice(index",{"_index":120,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.imgspaths[i",{"_index":109,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.instrument",{"_index":698,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Track.html":{}}}],["this.intrumentinput.nativeelement.focus",{"_index":1463,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.ismodifyingbottomsignature",{"_index":1198,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.ismodifyingbpm",{"_index":1336,"title":{},"body":{"components/TempoComponent.html":{}}}],["this.ismodifyinginstrument",{"_index":689,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.ismodifyingnote",{"_index":1333,"title":{},"body":{"components/TempoComponent.html":{}}}],["this.ismodifyingtopsignature",{"_index":1194,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.isplaying",{"_index":799,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["this.isplayingoutput.emit(false",{"_index":1471,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.isrunning",{"_index":684,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.isselected",{"_index":1466,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.issolo.emit(false",{"_index":1457,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.issolo.emit(true",{"_index":1459,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.measureduration",{"_index":1013,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.measures",{"_index":1398,"title":{},"body":{"classes/Track.html":{}}}],["this.metronome",{"_index":783,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["this.metronome.start",{"_index":795,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["this.metronome.startfor(nbtick",{"_index":798,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["this.metronome.stop",{"_index":800,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["this.mode",{"_index":793,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["this.modifiablebpm",{"_index":1328,"title":{},"body":{"components/TempoComponent.html":{}}}],["this.modifiableinstrument",{"_index":1451,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.mute",{"_index":1456,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.note",{"_index":1294,"title":{},"body":{"classes/Tempo.html":{}}}],["this.notes",{"_index":558,"title":{},"body":{"classes/Measure.html":{},"classes/Track.html":{}}}],["this.number",{"_index":62,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.pause",{"_index":1260,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.plan",{"_index":1400,"title":{},"body":{"classes/Track.html":{}}}],["this.playmetronome",{"_index":790,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["this.playsound",{"_index":1258,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.playtracks.emit(this.isplaying",{"_index":887,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["this.position",{"_index":557,"title":{},"body":{"classes/Measure.html":{}}}],["this.recording",{"_index":1008,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.retrievenotetype",{"_index":836,"title":{},"body":{"classes/Note.html":{}}}],["this.runningmetronome",{"_index":672,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.runningmetronome.setbpm(bpm",{"_index":677,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.runningmetronome.setbpm(this.tempo.getbpm",{"_index":680,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.runningmetronome.setsound(this.sound",{"_index":690,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.runningmetronome.start",{"_index":685,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.runningmetronome.stop",{"_index":686,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.selectedtrack.emit(null",{"_index":1469,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.selectedtrack.emit(this.track.getid",{"_index":1468,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.selectedtrackid",{"_index":1043,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.selectedtrackindex",{"_index":1046,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.signature",{"_index":1038,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.signature.getbottom",{"_index":1183,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.signature.getbottomnumber",{"_index":592,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["this.signature.gettop",{"_index":591,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{}}}],["this.signature.setbottom(note",{"_index":1207,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.signature.setbottom(this.modifiablebottom",{"_index":1199,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.signature.settop(this.modifiabletop",{"_index":1196,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.signature.tostring",{"_index":1054,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.signatureout.emit(this.signature",{"_index":1197,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.solomuted",{"_index":1461,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.sound",{"_index":694,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["this.sound.currenttime",{"_index":1262,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.sound.load",{"_index":1271,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.sound.onended",{"_index":1254,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.sound.pause",{"_index":1264,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.sound.play",{"_index":1257,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.sound.volume",{"_index":1270,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.startrecord",{"_index":1012,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.startrecord.gettime",{"_index":1021,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.starttapvar",{"_index":1025,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.starttapvar.gettime",{"_index":1027,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.stop",{"_index":675,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.stopmetronome",{"_index":791,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["this.tempo",{"_index":679,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["this.tempo.getbpm",{"_index":681,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["this.tempo.getbpm().tostring",{"_index":1329,"title":{},"body":{"components/TempoComponent.html":{}}}],["this.tempo.getnotenumber",{"_index":797,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["this.tempo.setbpm(bpm",{"_index":676,"title":{},"body":{"components/MetronomeComponent.html":{},"components/TempoComponent.html":{}}}],["this.tempo.setbpm(parseint(this.modifiablebpm",{"_index":1337,"title":{},"body":{"components/TempoComponent.html":{}}}],["this.tempo.setnote(note",{"_index":1331,"title":{},"body":{"components/TempoComponent.html":{}}}],["this.tempo.tostring",{"_index":1050,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.tempooutput.emit(this.tempo",{"_index":1330,"title":{},"body":{"components/TempoComponent.html":{}}}],["this.timecode",{"_index":828,"title":{},"body":{"classes/Note.html":{}}}],["this.togglemodifybottomsignature",{"_index":1206,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.togglemodifyinstrument",{"_index":693,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.top",{"_index":1138,"title":{},"body":{"classes/Signature.html":{}}}],["this.tostring",{"_index":565,"title":{},"body":{"classes/Measure.html":{}}}],["this.track.getid",{"_index":1470,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.track.getinstrument",{"_index":1452,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.track.setplan((this.track.getplan",{"_index":1453,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.tracks",{"_index":1059,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.tracks.push(new",{"_index":1006,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.tracks[this.selectedtrackindex].addnote(new",{"_index":1029,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.type",{"_index":835,"title":{},"body":{"classes/Note.html":{}}}],["this.updatemeasureduration",{"_index":1004,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.usehook",{"_index":63,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.value",{"_index":697,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.volume",{"_index":1458,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.waitingrecord",{"_index":1010,"title":{},"body":{"components/RhythmComponent.html":{}}}],["tick",{"_index":629,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{}}}],["time",{"_index":627,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SoundPlayerComponent.html":{},"miscellaneous/functions.html":{}}}],["timecode",{"_index":805,"title":{},"body":{"classes/Note.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["timecode\\\":\"+this.timecode+\",\\\"duration\\\":\"+this.duration",{"_index":843,"title":{},"body":{"classes/Note.html":{}}}],["timecodes",{"_index":1373,"title":{},"body":{"classes/Track.html":{}}}],["timer",{"_index":1094,"title":{},"body":{"components/RhythmComponent.html":{}}}],["times",{"_index":1115,"title":{},"body":{"classes/Signature.html":{}}}],["timpani",{"_index":1660,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tinkle_bell",{"_index":1725,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["title",{"_index":167,"title":{},"body":{"components/AppComponent.html":{}}}],["toc",{"_index":1742,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["todo",{"_index":461,"title":{},"body":{"components/ExportMenuComponent.html":{},"components/MeasureComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/TrackComponent.html":{}}}],["together",{"_index":1406,"title":{},"body":{"components/TrackComponent.html":{}}}],["toggle",{"_index":775,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["toggleisplaying",{"_index":882,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["togglemode",{"_index":753,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["togglemodifybottomsignature",{"_index":1166,"title":{},"body":{"components/SignatureComponent.html":{}}}],["togglemodifybpm",{"_index":1309,"title":{},"body":{"components/TempoComponent.html":{}}}],["togglemodifyinstrument",{"_index":619,"title":{},"body":{"components/MetronomeComponent.html":{},"components/TrackComponent.html":{}}}],["togglemodifynote",{"_index":1310,"title":{},"body":{"components/TempoComponent.html":{}}}],["togglemodifytopsignature",{"_index":1167,"title":{},"body":{"components/SignatureComponent.html":{}}}],["togglerecording",{"_index":920,"title":{},"body":{"components/RhythmComponent.html":{}}}],["togglesolomuted",{"_index":1413,"title":{},"body":{"components/TrackComponent.html":{}}}],["top",{"_index":10,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/TrackComponent.html":{}}}],["top's",{"_index":1124,"title":{},"body":{"classes/Signature.html":{}}}],["tostring",{"_index":532,"title":{},"body":{"classes/Measure.html":{},"classes/Note.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["tr",{"_index":1580,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["track",{"_index":291,"title":{"classes/Track.html":{}},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{}}}],["track#id",{"_index":1401,"title":{},"body":{"classes/Track.html":{}}}],["track#instrument",{"_index":1402,"title":{},"body":{"classes/Track.html":{}}}],["track#instrument|instrument",{"_index":1392,"title":{},"body":{"classes/Track.html":{}}}],["track#notes|notes",{"_index":1395,"title":{},"body":{"classes/Track.html":{}}}],["track#plan",{"_index":1403,"title":{},"body":{"classes/Track.html":{},"components/TrackComponent.html":{}}}],["track#plan|plan",{"_index":1393,"title":{},"body":{"classes/Track.html":{}}}],["track's",{"_index":963,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["track'},{'name",{"_index":262,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["track.component",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["track.component.html",{"_index":362,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/TrackComponent.html":{}}}],["track.component.sass",{"_index":361,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/TrackComponent.html":{}}}],["track.component.ts",{"_index":353,"title":{},"body":{"components/CreateTrackComponent.html":{},"coverage.html":{}}}],["track.component.ts:15",{"_index":366,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["track.component.ts:31",{"_index":371,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["track.getinstrument",{"_index":1472,"title":{},"body":{"components/TrackComponent.html":{}}}],["track.nextid",{"_index":1397,"title":{},"body":{"classes/Track.html":{}}}],["track/create",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"coverage.html":{}}}],["track/track.component",{"_index":323,"title":{},"body":{"modules/AppModule.html":{}}}],["trackcomponent",{"_index":290,"title":{"components/TrackComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["trackcomponent#isselected",{"_index":1465,"title":{},"body":{"components/TrackComponent.html":{}}}],["trackcomponent#modifiableinstrument",{"_index":1442,"title":{},"body":{"components/TrackComponent.html":{}}}],["trackcomponent#solomuted",{"_index":1460,"title":{},"body":{"components/TrackComponent.html":{}}}],["trackcomponent#volume",{"_index":1462,"title":{},"body":{"components/TrackComponent.html":{}}}],["trackid",{"_index":537,"title":{},"body":{"classes/Measure.html":{}}}],["tracks",{"_index":535,"title":{},"body":{"classes/Measure.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["transform",{"_index":411,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/TrackComponent.html":{}}}],["translatex",{"_index":413,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["translatey",{"_index":412,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/TrackComponent.html":{}}}],["translatey(100",{"_index":502,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["transparent",{"_index":498,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["tree",{"_index":154,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["tremolo_strings",{"_index":1657,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["triggered",{"_index":1423,"title":{},"body":{"components/TrackComponent.html":{}}}],["triplet",{"_index":1581,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["trombone",{"_index":1670,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["true",{"_index":104,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TrackComponent.html":{},"miscellaneous/variables.html":{}}}],["trumpet",{"_index":1669,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tslib",{"_index":1544,"title":{},"body":{"dependencies.html":{}}}],["tuba",{"_index":1671,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tubular_bells",{"_index":1627,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["twice",{"_index":630,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["two",{"_index":768,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"miscellaneous/enumerations.html":{}}}],["type",{"_index":31,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1830,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types/events",{"_index":1539,"title":{},"body":{"dependencies.html":{}}}],["un",{"_index":430,"title":{},"body":{"components/DashboardComponent.html":{}}}],["undetermined",{"_index":767,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["une",{"_index":377,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["unit",{"_index":1814,"title":{},"body":{"index.html":{}}}],["unsoloed",{"_index":967,"title":{},"body":{"components/RhythmComponent.html":{}}}],["unspecified",{"_index":1243,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["update",{"_index":765,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["updated",{"_index":758,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["updatemeasureduration",{"_index":921,"title":{},"body":{"components/RhythmComponent.html":{}}}],["url(\"../../assets/images/metronome/metronome",{"_index":707,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["url(\"../../assets/images/plus.svg",{"_index":408,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["use",{"_index":139,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"index.html":{}}}],["used",{"_index":68,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Track.html":{}}}],["usehook",{"_index":17,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["user",{"_index":1169,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["using",{"_index":42,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/functions.html":{}}}],["u|g560|gene|gf",{"_index":188,"title":{},"body":{"components/AppComponent.html":{}}}],["v",{"_index":223,"title":{},"body":{"components/AppComponent.html":{}}}],["v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c",{"_index":231,"title":{},"body":{"components/AppComponent.html":{}}}],["value",{"_index":141,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value1",{"_index":1091,"title":{},"body":{"components/RhythmComponent.html":{}}}],["value2",{"_index":1092,"title":{},"body":{"components/RhythmComponent.html":{}}}],["values",{"_index":1134,"title":{},"body":{"classes/Signature.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["var",{"_index":257,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["variable",{"_index":1529,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1834,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars.$dark_gray",{"_index":508,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["vars.$deep_dark_gray",{"_index":511,"title":{},"body":{"components/MainMenuComponent.html":{},"components/TrackComponent.html":{}}}],["vars.$disabled_opacity",{"_index":523,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["vars.$gray",{"_index":495,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["vars.$light",{"_index":1501,"title":{},"body":{"components/TrackComponent.html":{}}}],["vars.$light_gray",{"_index":447,"title":{},"body":{"components/DashboardComponent.html":{},"components/MeasureComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["vars.$middle_dark_gray",{"_index":1495,"title":{},"body":{"components/TrackComponent.html":{}}}],["vars.$orange",{"_index":1084,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["vars.$phone_max_width",{"_index":515,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["vars.$red",{"_index":1086,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["vars.$transparent_middle_dark_gray",{"_index":1494,"title":{},"body":{"components/TrackComponent.html":{}}}],["vars.$transparent_orange",{"_index":1487,"title":{},"body":{"components/TrackComponent.html":{}}}],["vars.$transparent_red",{"_index":1491,"title":{},"body":{"components/TrackComponent.html":{}}}],["version",{"_index":545,"title":{},"body":{"classes/Measure.html":{},"classes/Note.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{},"index.html":{}}}],["via",{"_index":1817,"title":{},"body":{"index.html":{}}}],["vibraphone",{"_index":1624,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["viewchild",{"_index":1438,"title":{},"body":{"components/TrackComponent.html":{}}}],["viewchild('instruinput",{"_index":1447,"title":{},"body":{"components/TrackComponent.html":{}}}],["viewencapsulation.none",{"_index":245,"title":{},"body":{"components/AppComponent.html":{}}}],["viola",{"_index":1654,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["violin",{"_index":1653,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["visual",{"_index":66,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["visually",{"_index":1570,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["voice_oohs",{"_index":1666,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["void",{"_index":49,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["volume",{"_index":1248,"title":{},"body":{"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["votre",{"_index":432,"title":{},"body":{"components/DashboardComponent.html":{}}}],["w",{"_index":596,"title":{},"body":{"components/MeasureComponent.html":{}}}],["w])|libw|lynx|m1",{"_index":202,"title":{},"body":{"components/AppComponent.html":{}}}],["wait",{"_index":1002,"title":{},"body":{"components/RhythmComponent.html":{}}}],["waitingrecord",{"_index":909,"title":{},"body":{"components/RhythmComponent.html":{}}}],["want",{"_index":1174,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"miscellaneous/functions.html":{}}}],["way",{"_index":1033,"title":{},"body":{"components/RhythmComponent.html":{}}}],["wa|abac|ac(er|oo|s",{"_index":176,"title":{},"body":{"components/AppComponent.html":{}}}],["webc|whit|wi(g",{"_index":232,"title":{},"body":{"components/AppComponent.html":{}}}],["webkit",{"_index":486,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["wether",{"_index":35,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["whether",{"_index":237,"title":{},"body":{"components/AppComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/TempoComponent.html":{}}}],["whistle",{"_index":1691,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["whole",{"_index":1559,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["whole_note",{"_index":1561,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["whose",{"_index":1355,"title":{},"body":{"classes/Track.html":{}}}],["width",{"_index":250,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["without",{"_index":94,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["woodblock",{"_index":1728,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["works",{"_index":850,"title":{},"body":{"components/NoteComponent.html":{}}}],["wrapper",{"_index":1498,"title":{},"body":{"components/TrackComponent.html":{}}}],["write",{"_index":34,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["wuold",{"_index":1052,"title":{},"body":{"components/RhythmComponent.html":{}}}],["w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m",{"_index":203,"title":{},"body":{"components/AppComponent.html":{}}}],["x",{"_index":1070,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["xylophone",{"_index":1626,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["y",{"_index":1069,"title":{},"body":{"components/RhythmComponent.html":{}}}],["your|zeto|zte",{"_index":234,"title":{},"body":{"components/AppComponent.html":{}}}],["z",{"_index":496,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["zone.js",{"_index":1546,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":307,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddOn.html":{"url":"classes/AddOn.html","title":"class - AddOn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddOn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/note-representation.ts\n        \n\n            \n                Description\n            \n            \n                The add on on top of a note's representation\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                number\n                            \n                            \n                                    Private\n                                useHook\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNumber\n                            \n                            \n                                getUseHook\n                            \n                            \n                                setNumber\n                            \n                            \n                                setUseHook\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(number: number, useHook: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/note-representation.ts:17\n                            \n                        \n\n                \n                    \n                            The constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        number\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        useHook\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            number\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note-representation.ts:13\n                            \n                        \n\n                \n                    \n                        The number to write\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            useHook\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note-representation.ts:17\n                            \n                        \n\n                \n                    \n                        Wether or not the number should be shown with an hook\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNumber\n                        \n                        \n                    \n                \n            \n            \n                \ngetNumber()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:34\n                \n            \n\n\n            \n                \n                    Get the number\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUseHook\n                        \n                        \n                    \n                \n            \n            \n                \ngetUseHook()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:50\n                \n            \n\n\n            \n                \n                    Check if using hoot for this representaion is needed\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setNumber\n                        \n                        \n                    \n                \n            \n            \n                \nsetNumber(number: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:42\n                \n            \n\n\n            \n                \n                    Set the number\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    number\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setUseHook\n                        \n                        \n                    \n                \n            \n            \n                \nsetUseHook(useHook: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:57\n                \n            \n\n\n            \n                \n                    Set if using a hook for this represention is needed\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    useHook\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { environment } from \"./../../environments/environment\";\n\nexport type AddOnJson = {number: number, useHook: boolean};\n\n\n/**\n * The add on on top of a note's representation\n */\nclass AddOn {\n  /**\n   * The number to write\n   */\n  private number: number;\n  /**\n   * Wether or not the number should be shown with an hook\n   */\n  private useHook: boolean;\n\n\n  /**\n   * The constructor\n   * @param {number} number @link AddOn#number\n   * @param {boolean} useHook @link AddOn#useHook\n   */\n  constructor(number: number, useHook: boolean) {\n    this.number = number;\n    this.useHook = useHook;\n  }\n\n  /**\n   * Get the number\n   * @return {@link AddOn#number}\n   */\n  getNumber(): number {\n    return this.number;\n  }\n\n  /**\n   * Set the number\n   * @param {number} {@link AddOn#number}\n   */\n  setNumber(number: number): void {\n    this.number = number;\n  }\n\n  /**\n   * Check if using hoot for this representaion is needed\n   * @return {boolean} {@link AddOn#useHook}\n   */\n  getUseHook(): boolean {\n    return this.useHook;\n  }\n  /**\n   * Set if using a hook for this represention is needed\n   * @param {boolean} {@link AddOn#useHook}\n   */\n  setUseHook(useHook: boolean): void {\n    this.useHook = useHook;\n  }\n}\n\n/**\n * This class references the visual representation of any notes.\n *\n * Used in the enums BinaryNote and TernaryNote.\n */\nexport class NoteRepresentation {\n  /**\n   * @ignore\n  */\n  private static dirPath: string = \"../\" + environment.pathsFromApp.rythmsImg;\n  /**\n   * @ignore\n  */\n  private static extension: string = \".svg\";\n\n  /**\n   * The paths to the different parts of the note's Img, in order\n   */\n  private imgsPaths: string[] = new Array();\n  /**\n   * {@link AddOn}\n   */\n  private addOn: AddOn | null = null;\n\n\n  /**\n   * The constructor\n   * @param {string[]} imgsNames The names of the images, in order, used to form the note without the extention.\n   * @param {AddOnJson|null} addOn Used to add a number on top of the note. If used, must possess the attributes {number} number and {boolean} useHook\n   *\n   * @example\n   * let quarterNoteRep: NoteRepresentation = new NoteRepresentation([\"4N\"], null);\n   * let quarterNoteTripletRep: NoteRepresentation = new NoteRepresentation([\"4N\"], {\"number\": 3, \"useHook\": true});\n   */\n  constructor(imgsNames: string[], addOn: AddOnJson | null = null) {\n    for(let i = 0 ; i = this.imgsPaths.length) {\n    //}\n    return this.imgsPaths[i];\n  }\n\n  /**\n  * Get the number of different paths to images\n  * @returns {number} The number of paths\n  */\n  getImgsPathsLength(): number {\n    return this.imgsPaths.length;\n  }\n\n  /**\n  * Add an image to the list of paths using its name\n  * @param {String} imgName The name of the image\n  * @param {number|null} index The place in the list where we insert\n  */\n  addToImgsPaths(imgName: string, index: number | null): void {\n    if(index == null || index == this.imgsPaths.length) {\n      this.imgsPaths.push(this.convertImgNameToPath(imgName));\n    } else {\n      this.imgsPaths.splice(index, 0, this.convertImgNameToPath(imgName));\n    }\n  }\n\n  /**\n  * Remove an image from the list of paths using its name\n  * @param {String} imgName The name of the image\n  */\n  removeFromImgsPaths(imgName: string): void {\n    let index:number = this.imgsPaths.indexOf(imgName);\n    if(index != -1) {\n      this.imgsPaths.splice(index, 1);\n    }\n  }\n\n  /**\n  * Remove an image from the list of paths using its palce in the list\n  * @param {number} index The place of the image to remove\n  */\n  removeFromImgsPathsAt(index: number): void {\n    this.imgsPaths.splice(index, 1);\n  }\n\n  /**\n  * Set the addon linked to this representation\n  * @param {AddOnJson|null} addon the addon to set\n  */\n  setAddOn(addOn: AddOnJson | null) {\n    if(addOn != null) {\n      this.addOn = new AddOn(addOn.number, addOn.useHook);\n    } else {\n      this.addOn = null;\n    }\n  }\n\n  /**\n  * Get the number of the addon linked to this representation\n  * @returns {number|null} The number of the addon\n  */\n  getAddOnNumber(): number | null {\n    if(this.addOn != null) {\n      return this.addOn.getNumber();\n    }\n    return null;\n  }\n\n  /**\n  * Get if the addon linked to this representation needs to use a hook\n  * @returns {boolean|null} The value of the condition\n  */\n  getAddOnUseHook(): boolean | null {\n    if(this.addOn != null) {\n      return this.addOn.getUseHook();\n    }\n    return null;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        The application component, or main component\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isMobile\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isMobile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\n      || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:22\n                            \n                        \n\n                \n                    \n                        Whether or not if the application is being launched from a phone. NOT USED\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Polyrythmique'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:17\n                            \n                        \n\n                \n                    \n                        The title of the application\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n\n/**\n * The application component, or main component\n */\n@Component({\n  selector: \"app-root\",\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.sass']//,\n  //encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n  /**\n   * The title of the application\n   */\n  title: string = 'Polyrythmique';\n\n  /**\n   * Whether or not if the application is being launched from a phone. NOT USED\n   */\n  isMobile: boolean = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\n      || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4));\n}\n\n    \n\n    \n        \n  \n\n\n\n\n    \n\n    \n                \n                    ./app.component.sass\n                \n                @use \"~sass/vars\"\n\n:host\n  display: flex\n  width: 100%\n  max-width: 100%\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_declarations\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCreateTrackComponent\n\nCreateTrackComponent\n\nAppModule -->\n\nCreateTrackComponent->AppModule\n\n\n\n\n\nDashboardComponent\n\nDashboardComponent\n\nAppModule -->\n\nDashboardComponent->AppModule\n\n\n\n\n\nExportMenuComponent\n\nExportMenuComponent\n\nAppModule -->\n\nExportMenuComponent->AppModule\n\n\n\n\n\nMainMenuComponent\n\nMainMenuComponent\n\nAppModule -->\n\nMainMenuComponent->AppModule\n\n\n\n\n\nMeasureComponent\n\nMeasureComponent\n\nAppModule -->\n\nMeasureComponent->AppModule\n\n\n\n\n\nMetronomeComponent\n\nMetronomeComponent\n\nAppModule -->\n\nMetronomeComponent->AppModule\n\n\n\n\n\nMetronomeSoundComponent\n\nMetronomeSoundComponent\n\nAppModule -->\n\nMetronomeSoundComponent->AppModule\n\n\n\n\n\nNoteComponent\n\nNoteComponent\n\nAppModule -->\n\nNoteComponent->AppModule\n\n\n\n\n\nPlaybarComponent\n\nPlaybarComponent\n\nAppModule -->\n\nPlaybarComponent->AppModule\n\n\n\n\n\nRhythmComponent\n\nRhythmComponent\n\nAppModule -->\n\nRhythmComponent->AppModule\n\n\n\n\n\nSaveMenuComponent\n\nSaveMenuComponent\n\nAppModule -->\n\nSaveMenuComponent->AppModule\n\n\n\n\n\nSignatureComponent\n\nSignatureComponent\n\nAppModule -->\n\nSignatureComponent->AppModule\n\n\n\n\n\nSoundPlayerComponent\n\nSoundPlayerComponent\n\nAppModule -->\n\nSoundPlayerComponent->AppModule\n\n\n\n\n\nTempoComponent\n\nTempoComponent\n\nAppModule -->\n\nTempoComponent->AppModule\n\n\n\n\n\nTrackComponent\n\nTrackComponent\n\nAppModule -->\n\nTrackComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            CreateTrackComponent\n                        \n                        \n                            DashboardComponent\n                        \n                        \n                            ExportMenuComponent\n                        \n                        \n                            MainMenuComponent\n                        \n                        \n                            MeasureComponent\n                        \n                        \n                            MetronomeComponent\n                        \n                        \n                            MetronomeSoundComponent\n                        \n                        \n                            NoteComponent\n                        \n                        \n                            PlaybarComponent\n                        \n                        \n                            RhythmComponent\n                        \n                        \n                            SaveMenuComponent\n                        \n                        \n                            SignatureComponent\n                        \n                        \n                            SoundPlayerComponent\n                        \n                        \n                            TempoComponent\n                        \n                        \n                            TrackComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MainMenuComponent } from './main-menu/main-menu.component';\nimport { RhythmComponent } from './rhythm/rhythm.component';\nimport { TrackComponent } from './track/track.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { CreateTrackComponent } from './create-track/create-track.component';\nimport { SignatureComponent } from './signature/signature.component';\nimport { SaveMenuComponent } from './save-menu/save-menu.component';\nimport { ExportMenuComponent } from './export-menu/export-menu.component';\nimport { PlaybarComponent } from './playbar/playbar.component';\nimport { TempoComponent } from './tempo/tempo.component';\nimport { MetronomeComponent } from './metronome/metronome.component';\nimport { MeasureComponent } from './measure/measure.component';\nimport { NoteComponent } from './note/note.component';\nimport { MetronomeSoundComponent } from './metronome-sound/metronome-sound.component';\nimport { SoundPlayerComponent } from './sound-player/sound-player.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainMenuComponent,\n    RhythmComponent,\n    TrackComponent,\n    DashboardComponent,\n    CreateTrackComponent,\n    SignatureComponent,\n    SaveMenuComponent,\n    ExportMenuComponent,\n    PlaybarComponent,\n    TempoComponent,\n    MetronomeComponent,\n    MeasureComponent,\n    NoteComponent,\n    MetronomeSoundComponent,\n    SoundPlayerComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DashboardComponent } from \"./dashboard/dashboard.component\";\nimport { RhythmComponent } from \"./rhythm/rhythm.component\";\nimport { MetronomeComponent } from \"./metronome/metronome.component\";\n\nconst routes: Routes = [{path: \"rhythm\", component: RhythmComponent},\n                        {path: \"rhythm-sound\", component: RhythmComponent},\n                        {path: \"metronome\", component: MetronomeComponent},\n                        {path: \"dashboard\", component: DashboardComponent},\n                        {path: \"\", redirectTo: \"/dashboard\", pathMatch: \"full\"},\n                        {path: \"**\", component: RhythmComponent}];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CreateTrackComponent.html":{"url":"components/CreateTrackComponent.html","title":"component - CreateTrackComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CreateTrackComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/create-track/create-track.component.ts\n\n\n    \n        Description\n    \n    \n        This compoenent is used to show and receive events for creating a new track\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-create-track\n            \n\n            \n                styleUrls\n                ./create-track.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./create-track.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTrack\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        create\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/create-track/create-track.component.ts:15\n                            \n                        \n                \n                    \n                        The attribute used to emit the signal to create a track to its parent element\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTrack\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTrack()\n                \n            \n\n\n            \n                \n                    Defined in src/app/create-track/create-track.component.ts:31\n                \n            \n\n\n            \n                \n                    Send to its parent element create = true\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, EventEmitter, Output } from '@angular/core';\n/**\n * This compoenent is used to show and receive events for creating a new track\n */\n@Component({\n  selector: 'app-create-track',\n  templateUrl: './create-track.component.html',\n  styleUrls: ['./create-track.component.sass']\n})\n\nexport class CreateTrackComponent implements OnInit {\n  /**\n   * The attribute used to emit the signal to create a track to its parent element\n   */\n  @Output() create: EventEmitter = new EventEmitter();\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * Send to its parent element create = true\n   */\n  createTrack(): void {\n    this.create.emit(true);\n  }\n\n}\n\n    \n\n    \n        \n  Ajouter une piste\n\n\n    \n\n    \n                \n                    ./create-track.component.sass\n                \n                $FONT_SIZE:   1.6em\n$IMG_SIZE:    1.3em\n$MARGIN:      1rem\n\n:host\n  display: flex\n  justify-content: center\n\n\ndiv\n  display: inline-block\n  cursor: pointer\n  font-size: $FONT_SIZE\n  text-align: center\n\np\n  margin: 0\n  position: relative\n  padding: $MARGIN 0\n  padding-left: $MARGIN + 1.6 * 1.3\n\n  &::before\n    content: \"\"\n    position: absolute\n    display: inline-block\n    height: $IMG_SIZE\n    width: $IMG_SIZE\n    background-size: $IMG_SIZE $IMG_SIZE\n    background-image: url(\"../../assets/images/plus.svg\")\n    background-repeat: no-repeat\n    top: 50%\n    transform: translateY(-50%) translateX(-$MARGIN - 1.6 * 1.3)\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Ajouter une piste'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CreateTrackComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DashboardComponent.html":{"url":"components/DashboardComponent.html","title":"component - DashboardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DashboardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/dashboard.component.ts\n\n\n    \n        Description\n    \n    \n        The home page\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-dashboard\n            \n\n            \n                styleUrls\n                ./dashboard.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./dashboard.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n/**\n * The home page\n */\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.sass']\n})\n\nexport class DashboardComponent implements OnInit {\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n}\n\n    \n\n    \n        Tableau de bord\n\n\n  Nouveau projet\n\n  \n    \n      Polyrytmie simple\n      \n    \n\n    \n      Polyrytmie sur fond musical\n      \n    \n  \n\n\n\n  Ouvrir un projet\n  \n    \n      Depuis votre appareil\n      \n    \n  \n\n\n    \n\n    \n                \n                    ./dashboard.component.sass\n                \n                @use \"~sass/vars\"\n\nsection\n  width: 100%\n  padding: 3.5rem 0\n\nh2, h3\n  text-align: center\n\nh3\n  margin: 0\n\nsection>div\n  width: 60vw\n  margin: auto\n  display: flex\n  justify-content: space-evenly\n\n  &>a, &>div\n    display: flex\n    flex-direction: column\n    justify-content: space-between\n    background-color: vars.$LIGHT_GRAY\n    border-radius: 1.5rem\n    width : 12rem\n    min-height : 12rem\n    padding: 1rem\n    box-sizing: border-box\n\n  &>div\n    cursor: pointer\n\nimg\n  display: block\n  height: 5rem\n  width: 5rem\n  margin: auto\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Tableau de bord  Nouveau projet            Polyrytmie simple                    Polyrytmie sur fond musical              Ouvrir un projet            Depuis votre appareil            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DashboardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ExportMenuComponent.html":{"url":"components/ExportMenuComponent.html","title":"component - ExportMenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ExportMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/export-menu/export-menu.component.ts\n\n\n    \n        Description\n    \n    \n        The menu that allows to exports a rythm \nTODO\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-export-menu\n            \n\n            \n                styleUrls\n                ./export-menu.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./export-menu.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n/**\n * The menu that allows to exports a rythm \n * TODO\n */\n@Component({\n  selector: 'app-export-menu',\n  templateUrl: './export-menu.component.html',\n  styleUrls: ['./export-menu.component.sass']\n})\n\nexport class ExportMenuComponent implements OnInit {\n  /**\n   * @ignore\n   */\n  constructor() { }\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n}\n\n    \n\n    \n        \n  \n  \n    \n    \n    \n  \n\n\n    \n\n    \n                \n                    ./export-menu.component.sass\n                \n                @use \"../styles/menu-parts\"\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ExportMenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MainMenuComponent.html":{"url":"components/MainMenuComponent.html","title":"component - MainMenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MainMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/main-menu/main-menu.component.ts\n\n\n    \n        Description\n    \n    \n        The main menu of the application.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-main-menu\n            \n\n            \n                styleUrls\n                ./main-menu.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./main-menu.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setActive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                        \n                            \n                                    Defined in src/app/main-menu/main-menu.component.ts:19\n                            \n                        \n                \n                    \n                        The number of the active tab\n               1 -> rhythm\n               2 -> rhythm-sound\n               3 -> metronome\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setActive\n                        \n                        \n                    \n                \n            \n            \n                \nsetActive(active: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/main-menu/main-menu.component.ts:35\n                \n            \n\n\n            \n                \n                    Change the active tab\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    active\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The number of the tab to set as active\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Input } from '@angular/core';\n\n/**\n * The main menu of the application.\n */\n@Component({\n  selector: 'app-main-menu',\n  templateUrl: './main-menu.component.html',\n  styleUrls: ['./main-menu.component.sass']\n})\n\nexport class MainMenuComponent implements OnInit {\n  /**\n   * The number of the active tab\n   *               1 -> rhythm\n   *               2 -> rhythm-sound\n   *               3 -> metronome\n   */\n  @Input() active: number = 1;\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * Change the active tab\n   * @param {number} active The number of the tab to set as active\n   */\n  setActive(active: number): void {\n    this.active = active;\n  }\n}\n\n    \n\n    \n        \n  MENU\n  \n    \n      \n      Créer une polyrythmie\n    \n\n    \n      \n      Créer une polyrythmie depuis une musique\n    \n    \n      \n      Métronome\n    \n  \n\n\n    \n\n    \n                \n                    ./main-menu.component.sass\n                \n                @use \"~sass/vars\"\n\n$WIDTH: 3.5rem\n$SLOPE: ($WIDTH * 49.1) / 120.6\n$ICON_WIDTH: $WIDTH * 0.85\n\naside\n  position: -webkit-sticky\n  position: sticky\n  top: 0\n  right: 0\n  height: 100vh\n  width: $WIDTH\n\nnav\n  height: 100%\n  width: 100%\n  display: flex\n  flex-direction: column\n\nbutton\n  display: none\n\na\n  position: relative\n  display: flex\n  align-items: center\n  justify-content: center\n  padding: 0\n  height: calc(100% / 3)\n  width: 100%\n  background-color: vars.$GRAY\n  z-index: 10\n\n  &::before, &::after\n    content: \"\"\n    position: absolute\n    border-color: transparent transparent transparent vars.$GRAY\n    border-style: solid\n    height: 0\n    width: 0\n  &::before\n    top: 0\n    border-width: $SLOPE 0 0 $WIDTH\n    transform: translateY(-100%)\n  &::after\n    bottom: 0\n    border-width: 0 0 $SLOPE $WIDTH\n    transform: translateY(100%)\n\n  &:first-child::before\n    border: none\n  &:last-child::after\n    border: none\n\n\n.middle\n  background-color: vars.$DARK_GRAY\n  z-index: 9\n\n  &::before, &::after\n    border-color: transparent transparent transparent vars.$DARK_GRAY\n.dark\n  background-color: vars.$DEEP_DARK_GRAY\n  z-index: 8\n\n  &::before, &::after\n    border-color: transparent transparent transparent vars.$DEEP_DARK_GRAY\n\n\nspan\n  display: none\nimg\n  width: $ICON_WIDTH\n\n\n@media (max-width: vars.$PHONE_MAX_WIDTH)\n  aside\n    position: fixed\n    left: 0\n    background-color: vars.$GRAY\n\n  button\n    display: inline-block\n    &:not(.active)+nav\n      display: none\n    //&:not(.active)\n\n  nav\n    width: 40%\n    min-width: 275px\n    justify-content: space-evenly\n    z-index: 2\n\n    &::after\n      content: \"\"\n      width: 500%\n      height: 100vh\n      position: absolute\n      top: 0\n      left: 100%\n      z-index: 1\n      background-color: vars.$DARK_GRAY\n      opacity: 1 - vars.$DISABLED_OPACITY\n\n    a\n      background-color: transparent\n      height: auto\n      justify-content: flex-start\n      padding-left: 1rem\n      box-sizing: border-box\n\n      &::before, &::after\n        border: none\n\n      span\n        display: inline-block\n        padding: 0 0.5rem\n      img\n        width: $ICON_WIDTH * 0.75\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  MENU                  Créer une polyrythmie                    Créer une polyrythmie depuis une musique                    Métronome      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MainMenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Measure.html":{"url":"classes/Measure.html","title":"class - Measure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Measure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/measure.ts\n        \n\n            \n                Description\n            \n            \n                This class represents a measure\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                curMaxPos\n                            \n                            \n                                    Private\n                                notes\n                            \n                            \n                                    Private\n                                position\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNotes\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            curMaxPos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/measure.ts:18\n                            \n                        \n\n                \n                    \n                        The auto-increment value for the tracks' ids\n{\ntrackId: curId,\n}\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            notes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Note[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/measure.ts:29\n                            \n                        \n\n                \n                    \n                        The notes in the measure\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/measure.ts:24\n                            \n                        \n\n                \n                    \n                        Position of the measure in the track\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNotes\n                        \n                        \n                    \n                \n            \n            \n                \ngetNotes()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/measure.ts:57\n                \n            \n\n\n            \n                \n                    Get the list of notes in the measure\n\n\n                    \n                    \n                    \n                        Returns :         Note[]\n\n                    \n                    \n                        A list of list of the notes in the measure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/measure.ts:65\n                \n            \n\n\n            \n                \n                    Return the current measure in string form\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        a stringified version of this measure\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Note } from \"./note\";\n\n/**\n* This class represents a measure\n*/\nexport class Measure {\n  /**\n   * The auto-increment value for the tracks' ids\n   * {\n    trackId: curId,\n\n    }\n   */\n\n   /**\n   *  Static indicator : position the next measure will take in the track\n   */\n  private static curMaxPos: number[] = new Array();\n\n\n  /**\n  * Position of the measure in the track\n  */\n  private position: number;\n\n  /**\n  * The notes in the measure\n  */\n  private notes: Note[];\n\n  /**\n  * @ignore\n  */\n  constructor(trackId: number, notes: Note[] = new Array()) {\n    /*console.log(\"ENter\");\n    console.log(trackId);\n    console.log(trackId.toString(10));\n    console.log(Measure.curMaxPos);*/\n    if(Measure.curMaxPos.hasOwnProperty(trackId.toString(10))) {\n      //console.log(\"if\");\n      ++(Measure.curMaxPos[trackId]);\n    } else {\n      //console.log(\"if\");\n      Measure.curMaxPos[trackId] = 1;\n    }\n    this.position = Measure.curMaxPos[trackId];\n    this.notes = notes;\n    //console.log(Measure.curMaxPos);\n    //console.log(this.position);\n    //console.log(this.toString());\n  }\n\n  /**\n  * Get the list of notes in the measure\n  * @returns {Note[]} A list of list of the notes in the measure\n  */\n  getNotes(): Note[] {\n    return this.notes;\n  }\n\n  /**\n   * Return the current measure in string form\n   * @returns {String} a stringified version of this measure\n   */\n  toString(): string {\n    let notesStr: string = \"\";\n    for(let aNote of this.notes) {\n      notesStr = notesStr + aNote.toString() + \",\";\n    }\n    notesStr = notesStr.slice(0, -1);\n    return \"{\\\"position\\\": \" + this.toString() +\n              \", \\\"notes\\\": [\" + notesStr +\n            \"]}\";\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MeasureComponent.html":{"url":"components/MeasureComponent.html","title":"component - MeasureComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MeasureComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/measure/measure.component.ts\n\n\n    \n        Description\n    \n    \n        TODO\nThe measures to insert inside the TrackComponent (this last one should have changes afterward, such as moving attributes)\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-measure\n            \n\n            \n                styleUrls\n                ./measure.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./measure.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getWidth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                measure\n                            \n                            \n                                signature\n                            \n                            \n                                tempo\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        measure\n                    \n                \n                \n                    \n                        Type :         Measure\n\n                    \n                \n                \n                    \n                        Default value : new Measure(0)\n                    \n                \n                        \n                            \n                                    Defined in src/app/measure/measure.component.ts:32\n                            \n                        \n                \n                    \n                        The measure\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        signature\n                    \n                \n                \n                    \n                        Type :         Signature\n\n                    \n                \n                \n                    \n                        Default value : new Signature()\n                    \n                \n                        \n                            \n                                    Defined in src/app/measure/measure.component.ts:22\n                            \n                        \n                \n                    \n                        The signature of the measure Signature\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        tempo\n                    \n                \n                \n                    \n                        Type :         Tempo\n\n                    \n                \n                \n                    \n                        Default value : new Tempo()\n                    \n                \n                        \n                            \n                                    Defined in src/app/measure/measure.component.ts:27\n                            \n                        \n                \n                    \n                        The tempo on the measure Measure\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getWidth\n                        \n                        \n                    \n                \n            \n            \n                \ngetWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/app/measure/measure.component.ts:52\n                \n            \n\n\n            \n                \n                    Get the width of the measure  TODO\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The width of the measure\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, SimpleChanges, OnChanges, Input } from '@angular/core';\n\nimport { Signature } from \"../classes/signature\";\nimport { Tempo } from \"../classes/tempo\";\nimport { Measure } from \"../classes/measure\";\n\n\n/**\n * TODO\n * The measures to insert inside the TrackComponent (this last one should have changes afterward, such as moving attributes)\n */\n@Component({\n  selector: 'app-measure',\n  templateUrl: './measure.component.html',\n  styleUrls: ['./measure.component.sass']\n})\nexport class MeasureComponent implements OnInit, OnChanges {\n\n  /**\n  * The signature of the measure {@link Signature}\n  */\n  @Input() signature: Signature = new Signature();\n\n  /**\n  * The tempo on the measure {@link Measure}\n  */\n  @Input() tempo: Tempo = new Tempo();\n\n  /**\n  * The measure\n  */\n  @Input() measure: Measure = new Measure(0);\n  /**\n   * @ignore\n   */\n  constructor() { }\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n  * @ignore\n  */\n  ngOnChanges(changes: SimpleChanges): void {}\n\n  /**\n  * Get the width of the measure  TODO\n  * @returns {number} The width of the measure\n  */\n  getWidth(): number {\n    let numberOfWholeNote: number = this.signature.getTop() * this.signature.getBottomNumber();\n    //console.log(numberOfWholeNote);\n\n    // TO DO : get the\n    return numberOfWholeNote * 153;\n    //1N w = 113.2 * 4\n    //N h = 77\n  }\n}\n\n    \n\n    \n        \n  \n\n\n    \n\n    \n                \n                    ./measure.component.sass\n                \n                @use \"~sass/vars\"\n\n:host\n  display: flex\n  min-height: 100%\n  // NEXT LINE TO CHANGE :\n  //min-width: 2rem\n\n  border-right: 0.2rem solid vars.$LIGHT_GRAY\n\ndiv\n  flex-grow: 1\n  display: flex\n  height: 100%\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MeasureComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MetronomeComponent.html":{"url":"components/MetronomeComponent.html","title":"component - MetronomeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MetronomeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/metronome/metronome.component.ts\n\n\n    \n        Description\n    \n    \n        Used to define the Metronome\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-metronome\n            \n\n            \n                styleUrls\n                ./metronome.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./metronome.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isModifyingInstrument\n                            \n                            \n                                isRunning\n                            \n                            \n                                runningMetronome\n                            \n                            \n                                sound\n                            \n                            \n                                tempo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getInstrumentList\n                            \n                            \n                                getMetronomeMovementLengthInSec\n                            \n                            \n                                setBPM\n                            \n                            \n                                setInstrument\n                            \n                            \n                                setTempo\n                            \n                            \n                                start\n                            \n                            \n                                stop\n                            \n                            \n                                toggleModifyInstrument\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInstrumentList\n                        \n                        \n                    \n                \n            \n            \n                \ngetInstrumentList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:119\n                \n            \n\n\n            \n                \n                    Get the list of possible instruments\n\n\n                    \n                    \n                    \n                        Returns :     String[]\n\n                    \n                    \n                        The list of possible instrument's paths\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMetronomeMovementLengthInSec\n                        \n                        \n                    \n                \n            \n            \n                \ngetMetronomeMovementLengthInSec()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:81\n                \n            \n\n\n            \n                \n                    Get the BPM at which the metronome beats\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The time it takes for the metronome to tick twice (in sec)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setBPM\n                        \n                        \n                    \n                \n            \n            \n                \nsetBPM(bpm: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:57\n                \n            \n\n\n            \n                \n                    Set the BPM at which the metronome beats\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bpm\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The beat per minute ratio the metronome will beat at\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInstrument\n                        \n                        \n                    \n                \n            \n            \n                \nsetInstrument(soundName: String)\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:127\n                \n            \n\n\n            \n                \n                    Set the sound played by the metronome based on its name\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    soundName\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the sound to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTempo\n                        \n                        \n                    \n                \n            \n            \n                \nsetTempo(tempo: Tempo)\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:69\n                \n            \n\n\n            \n                \n                    Set the tempo of the metronome\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tempo\n                                    \n                                                Tempo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new tempo of the metronome\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:88\n                \n            \n\n\n            \n                \n                    Starts the metronome\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:98\n                \n            \n\n\n            \n                \n                    Stops the metronome\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleModifyInstrument\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleModifyInstrument()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:106\n                \n            \n\n\n            \n                \n                    Change is the instrument is being modified or not MetronomeComponent\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isModifyingInstrument\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome/metronome.component.ts:38\n                            \n                        \n\n                \n                    \n                        If the instrument is being changed or not\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isRunning\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome/metronome.component.ts:28\n                            \n                        \n\n                \n                    \n                        Whether or not the metronome is running (is being play)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            runningMetronome\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Metronome\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome/metronome.component.ts:33\n                            \n                        \n\n                \n                    \n                        The metronome\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Metronome.Sound\n\n                        \n                    \n                    \n                        \n                            Default value : Metronome.Sound.TOC\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome/metronome.component.ts:24\n                            \n                        \n\n                \n                    \n                        The sound of the metronome. See the metronome's sound attribute for more\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tempo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tempo\n\n                        \n                    \n                    \n                        \n                            Default value : new Tempo(BasicNote.QUARTER_NOTE, 60)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome/metronome.component.ts:19\n                            \n                        \n\n                \n                    \n                        The BPM (Beat Per Minute) of the metronome\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Tempo } from '../classes/tempo';\nimport { Metronome, Sound } from '../classes/metronome';\nimport { BasicNote } from '../enums/basic-note';\n\n/**\n * Used to define the Metronome\n */\n@Component({\n  selector: 'app-metronome',\n  templateUrl: './metronome.component.html',\n  styleUrls: ['./metronome.component.sass']\n})\n\nexport class MetronomeComponent implements OnInit {\n  /**\n   * The BPM (Beat Per Minute) of the metronome\n   */\n  tempo: Tempo = new Tempo(BasicNote.QUARTER_NOTE, 60);\n\n  /**\n   * The sound of the metronome. See the {@link Metronome#sound|metronome's sound attribute} for more\n   */\n  sound: Metronome.Sound = Metronome.Sound.TOC;\n  /**\n   * Whether or not the metronome is running (is being play)\n   */\n  isRunning: boolean = false;\n\n  /**\n   * The metronome\n   */\n  runningMetronome: Metronome;\n\n  /**\n  * If the instrument is being changed or not\n  */\n  isModifyingInstrument: boolean = false;\n\n  /**\n  * @ignore\n  */\n  constructor() {\n    this.runningMetronome = new Metronome(this.tempo.getBPM());\n  }\n\n  /**\n  * @ignore\n  */\n  ngOnInit(): void {\n  }\n\n  /**\n  * Set the BPM at which the metronome beats\n  *@param {number} bpm The beat per minute ratio the metronome will beat at\n  */\n  setBPM(bpm: number): void {\n    if(this.isRunning) {\n      this.stop();\n    }\n    this.tempo.setBPM(bpm);\n    this.runningMetronome.setBPM(bpm);\n  }\n\n  /**\n    * Set the {@link MetronomeCOmponent#tempo|tempo} of the metronome\n    *@param {Tempo} tempo The new tempo of the metronome\n    */\n  setTempo(tempo: Tempo): void {\n    if(this.isRunning) {\n      this.stop();\n    }\n    this.tempo = tempo;\n    this.runningMetronome.setBPM(this.tempo.getBPM());\n  }\n\n  /**\n  * Get the BPM at which the metronome beats\n  * @returns {number} The time it takes for the metronome to tick twice (in sec)\n  */\n  getMetronomeMovementLengthInSec(): number {\n    return 1 / (this.tempo.getBPM() / 120);\n  }\n\n  /**\n  * Starts the metronome\n  */\n  start(): void{\n    if(!this.isModifyingInstrument){\n      this.isRunning = true;\n      this.runningMetronome.start();\n    }\n  }\n\n  /**\n  * Stops the metronome\n  */\n  stop(): void{\n    this.isRunning = false;\n    this.runningMetronome.stop();\n  }\n\n  /**\n  * Change is the instrument is being modified or not {@link MetronomeComponent#isModifyingInstrument}\n  */\n  toggleModifyInstrument(): void{\n    if(!this.isRunning){\n      this.isModifyingInstrument = !this.isModifyingInstrument;\n      if(!this.isModifyingInstrument){\n        this.runningMetronome.setSound(this.sound);\n      }\n    }\n  }\n\n  /**\n  * Get the list of possible instruments\n  * @returns {String[]} The list of possible instrument's paths\n  */\n  getInstrumentList(): String[]{\n    return Sound.values();\n  }\n\n  /**\n  * Set the sound played by the metronome based on its name\n  * @param {String} soundName The name of the sound to set\n  */\n  setInstrument(soundName: String){\n    console.log(\"CLICKED\");\n    this.toggleModifyInstrument();\n    this.sound = Sound.getPath(soundName);\n    this.runningMetronome.setSound(this.sound);\n  }\n\n}\n\n    \n\n    \n        \n  \n  \n\n\n\n  \n\n  \n    \n    \n  \n\n  {{ runningMetronome.getSoundName() }}\n\n    this.value\n    \n   -->\n\n  \n    {{this.instrument}} \n  \n\n\n\n\n    \n\n    \n                \n                    ./metronome.component.sass\n                \n                @use \"../styles/menu-parts\"\n\n$METRONOME_HEIGHT: 30rem\n$METRONOME_WIDTH: ($METRONOME_HEIGHT * 90) / 112.5\n\n:host\n  display: flex\n  flex-direction: column\n  height: 100%\n\n.controls\n  display: flex\n  justify-content: space-evenly\n  align-items: center\n  font-size: 1.5em\n  margin-bottom: 5rem\n\n  &>span\n    font-size: 1.2em\n\n  button, img\n    width: 5rem\n    height: 5rem\n\n\n.metronome\n    background-image: url(\"../../assets/images/metronome/metronome-base.svg\")\n    background-size: contain\n    background-repeat: no-repeat\n    background-position: center\n    margin: auto\n    width: $METRONOME_WIDTH\n    height: $METRONOME_HEIGHT\n    position: relative\n\n.metronome>img\n  position: absolute\n  left: 50%\n  height: ($METRONOME_HEIGHT * 0.8373333)\n  width: ($METRONOME_WIDTH * 0.1688888)\n  transform-origin: 50% 100%\n  transform: translateX(-50%)\n\n\n@mixin keyframes-animation($name)\n  @-webkit-keyframes #{$name}\n    @content\n\n  @keyframes #{$name}\n    @content\n\n@mixin prefix-property($name, $value)\n  -webkit-#{$name}: $value\n          #{$name}: $value\n\n@include keyframes-animation(rotating)\n  0%\n    @include prefix-property(transform, translateX(-50%) rotate(-45deg))\n  25%\n    @include prefix-property(transform, translateX(-50%) rotate(0deg) linear)\n  50%\n    @include prefix-property(transform, translateX(-50%) rotate(45deg))\n  75%\n    @include prefix-property(transform, translateX(-50%) rotate(0deg) linear)\n  100%\n    @include prefix-property(transform, translateX(-50%) rotate(-45deg))\n\n/*.metronome.run>img\n  -webkit-animation: rotating 2s ease-in-out infinite*/\n\n.selectInstrument\n  display: block\n  font-size: 0.8em\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{ runningMetronome.getSoundName() }}    this.value       -->      {{this.instrument}}   '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MetronomeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MetronomeSoundComponent.html":{"url":"components/MetronomeSoundComponent.html","title":"component - MetronomeSoundComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MetronomeSoundComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/metronome-sound/metronome-sound.component.ts\n\n\n    \n        Description\n    \n    \n        This component is a button that allows to select the type of sound of the metronome,\n   which starts when its parent component's attribute binded to the isPlaying attribute\n   pass to true and stop when this attribute pass to false if the mode correspond to 0 : sound all along\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-metronome-sound\n            \n\n            \n                styleUrls\n                ./metronome-sound.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./metronome-sound.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                metronome\n                            \n                            \n                                mode\n                            \n                            \n                                sound\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                            \n                                    Async\n                                playMetronome\n                            \n                            \n                                stopMetronome\n                            \n                            \n                                toggleMode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isPlaying\n                            \n                            \n                                signature\n                            \n                            \n                                tempo\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isPlaying\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/metronome-sound/metronome-sound.component.ts:44\n                            \n                        \n                \n                    \n                        Whether or not the sound is playing. Used to know when to start the sound. Get from it's parent component and updated with the parent's binded attribute\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        signature\n                    \n                \n                \n                    \n                        Type :         Signature\n\n                    \n                \n                \n                    \n                        Default value : new Signature()\n                    \n                \n                        \n                            \n                                    Defined in src/app/metronome-sound/metronome-sound.component.ts:40\n                            \n                        \n                \n                    \n                        The signature used for the sound. Get from it's parent component and updated with the parent's binded attribute\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        tempo\n                    \n                \n                \n                    \n                        Type :         Tempo\n\n                    \n                \n                \n                    \n                        Default value : new Tempo()\n                    \n                \n                        \n                            \n                                    Defined in src/app/metronome-sound/metronome-sound.component.ts:36\n                            \n                        \n                \n                    \n                        The tempo used for the sound. Get from it's parent component and updated with the parent's binded attribute\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome-sound/metronome-sound.component.ts:69\n                \n            \n\n\n            \n                \n                    Called each time the parent's component update the Input attributes of the component.\nUpdate the metronome and start it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The changes get from the parent\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            playMetronome\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    playMetronome()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome-sound/metronome-sound.component.ts:96\n                \n            \n\n\n            \n                \n                    Play the metronome for an undetermined time, two measure or not at all according to the mode of the componenet\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise to await for\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stopMetronome\n                        \n                        \n                    \n                \n            \n            \n                \nstopMetronome()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome-sound/metronome-sound.component.ts:111\n                \n            \n\n\n            \n                \n                    Stop the metronome\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleMode\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleMode()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome-sound/metronome-sound.component.ts:88\n                \n            \n\n\n            \n                \n                    Toggle the mode from 0 -> 1 -> 2 -> 0 ...\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            metronome\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Metronome\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome-sound/metronome-sound.component.ts:49\n                            \n                        \n\n                \n                    \n                        The metronome binded to the component\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome-sound/metronome-sound.component.ts:26\n                            \n                        \n\n                \n                    \n                        The sound mode of the component.\n0: sound all along\n1: sound on the two first empty  measures\n2: no sound\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Metronome.Sound\n\n                        \n                    \n                    \n                        \n                            Default value : Metronome.Sound.TOC\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome-sound/metronome-sound.component.ts:31\n                            \n                        \n\n                \n                    \n                        The sound of the metronome. See the metronome's sound attribute for more\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, SimpleChanges, OnChanges, Input } from '@angular/core';\n\nimport { Tempo } from \"../classes/tempo\";\nimport { Signature } from \"../classes/signature\";\nimport { Metronome } from \"../classes/metronome\";\n\n/**\n * This component is a button that allows to select the type of sound of the metronome,\n *   which starts when its parent component's attribute binded to the isPlaying attribute\n *   pass to true and stop when this attribute pass to false if the mode correspond to 0 : sound all along\n */\n@Component({\n  selector: 'app-metronome-sound',\n  templateUrl: './metronome-sound.component.html',\n  styleUrls: ['./metronome-sound.component.sass']\n})\n\nexport class MetronomeSoundComponent implements OnInit, OnChanges {\n  /**\n   * The sound mode of the component.\n   *\n   * 0: sound all along\n   * 1: sound on the two first empty  measures\n   * 2: no sound\n   */\n  mode: number = 0;\n\n  /**\n   * The sound of the metronome. See the {@link Metronome#sound|metronome's sound attribute} for more\n   */\n  sound: Metronome.Sound = Metronome.Sound.TOC;\n\n  /**\n   * The tempo used for the sound. Get from it's parent component and updated with the parent's binded attribute\n   */\n  @Input(\"tempo\") tempo: Tempo = new Tempo();\n  /**\n   * The signature used for the sound. Get from it's parent component and updated with the parent's binded attribute\n   */\n  @Input(\"signature\") signature: Signature = new Signature();\n  /**\n   * Whether or not the sound is playing. Used to know when to start the sound. Get from it's parent component and updated with the parent's binded attribute\n   */\n  @Input(\"isPlaying\") isPlaying: boolean = false;\n\n  /**\n   * The metronome binded to the component\n   */\n  metronome: Metronome;\n\n  /**\n   * @ignore()\n   */\n  constructor() {\n    this.metronome = new Metronome(this.tempo.getBPM(), this.sound);\n  }\n  /**\n   * @ignore()\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * Called each time the parent's component update the {@link Input|Input} attributes of the component.\n   * Update the metronome and start it\n   *\n   * @param {SimpleChanges} changes The changes get from the parent\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    for(const propName in changes) {\n      if(changes.hasOwnProperty(propName)) {\n        if(propName === \"tempo\") {\n          this.metronome = new Metronome(this.tempo.getBPM(), this.sound);\n        } else if(propName === \"isPlaying\") {\n          if(changes[\"isPlaying\"].currentValue) {\n            this.playMetronome();\n          } else {\n            this.stopMetronome();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Toggle the {@link MetronomeSoundComponent#mode|mode} from 0 -> 1 -> 2 -> 0 ...\n   */\n  toggleMode(): void {\n    this.mode = (this.mode + 1) % 3;\n  }\n\n  /**\n   * Play the metronome for an undetermined time, two measure or not at all according to the {@link MetronomeSoundComponent#mode|mode} of the componenet\n   * @returns {Promise} A promise to await for\n   */\n  async playMetronome(): Promise {\n    if(this.mode == 0) {\n      this.metronome.start();\n    } else if(this.mode == 1) {\n        // The number of tick in two measures\n      let nbTick = (this.signature.getTop() * (this.tempo.getNoteNumber() / this.signature.getBottomNumber())) * 2;\n      await this.metronome.startFor(nbTick);\n      this.isPlaying = false;\n    }\n    return true;\n  }\n\n  /**\n   * Stop the metronome\n   */\n  stopMetronome(): void {\n    this.metronome.stop();\n  }\n\n}\n\n    \n\n    \n        \n  \n  \n  \n\n\n    \n\n    \n                \n                    ./metronome-sound.component.sass\n                \n                @use \"../styles/menu-parts\"\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MetronomeSoundComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Note.html":{"url":"classes/Note.html","title":"class - Note","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Note\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/note.ts\n        \n\n            \n                Description\n            \n            \n                This class is used to store notes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                duration\n                            \n                            \n                                    Private\n                                isBinary\n                            \n                            \n                                    Private\n                                timecode\n                            \n                            \n                                    Private\n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDuration\n                            \n                            \n                                getTimecode\n                            \n                            \n                                retrieveNoteType\n                            \n                            \n                                setDuration\n                            \n                            \n                                setTimecode\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            duration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note.ts:16\n                            \n                        \n\n                \n                    \n                        The duration of the note\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isBinary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note.ts:26\n                            \n                        \n\n                \n                    \n                        If the note is binary\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timecode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note.ts:11\n                            \n                        \n\n                \n                    \n                        The time in the track where the note starts\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BinaryNote | TernaryNote\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note.ts:21\n                            \n                        \n\n                \n                    \n                        The type of the note : binary or ternary\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDuration\n                        \n                        \n                    \n                \n            \n            \n                \ngetDuration()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note.ts:59\n                \n            \n\n\n            \n                \n                    Get the duration of this note\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTimecode\n                        \n                        \n                    \n                \n            \n            \n                \ngetTimecode()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note.ts:43\n                \n            \n\n\n            \n                \n                    Get the timecode of this note\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            retrieveNoteType\n                        \n                        \n                    \n                \n            \n            \n                \nretrieveNoteType()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note.ts:75\n                \n            \n\n\n            \n                \n                    Get the type of the note\n\n\n                    \n                    \n                    \n                        Returns :         BinaryNote | TernaryNote\n\n                    \n                    \n                        the type of the note\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDuration\n                        \n                        \n                    \n                \n            \n            \n                \nsetDuration(duration: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note.ts:67\n                \n            \n\n\n            \n                \n                    Set the duration of this note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTimecode\n                        \n                        \n                    \n                \n            \n            \n                \nsetTimecode(timecode: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note.ts:51\n                \n            \n\n\n            \n                \n                    Set the timecode of this note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    timecode\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note.ts:87\n                \n            \n\n\n            \n                \n                    Returns the note in string form\n\n\n                    \n                    \n                    \n                        Returns :         String\n\n                    \n                    \n                        A stringified version of this note\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BinaryNote } from \"../enums/binary-note\";\nimport { TernaryNote } from \"../enums/ternary-note\";\n\n/**\n * This class is used to store notes\n */\nexport class Note {\n  /**\n  * The time in the track where the note starts\n  */\n  private timecode: number;\n\n  /**\n  * The duration of the note\n  */\n  private duration: number;\n\n  /**\n  * The type of the note : binary or ternary\n  */\n  private type: BinaryNote | TernaryNote;\n\n  /**\n  * If the note is binary\n  */\n  private isBinary: boolean = true;\n\n  /**\n  * @ignore\n  */\n  constructor(timecode: number, duration: number) {\n    this.timecode = timecode;\n    this.duration = duration;\n\n    // TODO: FOLLOWING LINE TO REPLACE WITH POLYRYTHM LIBRAIRY INTEGRATION\n    this.type = this.retrieveNoteType()\n  }\n\n  /**\n  * Get the timecode of this note\n  * @returns {@link note#timecode}\n  */\n  getTimecode(): number {\n    return this.timecode;\n  }\n\n  /**\n  * Set the timecode of this note\n  * @param {number} {@link note#timecode}\n  */\n  setTimecode(timecode: number): void {\n    this.timecode = timecode;\n  }\n\n  /**\n  * Get the duration of this note\n  * @returns {@link note#duration}\n  */\n  getDuration(): number {\n    return this.duration;\n  }\n\n  /**\n  * Set the duration of this note\n  * @param {number} {@link note#duration}\n  */\n  setDuration(duration: number): void {\n    this.duration = duration;\n  }\n\n  /**\n  * Get the type of the note\n  * @returns {Binary|Ternary} the type of the note\n  */\n  retrieveNoteType(): BinaryNote | TernaryNote {\n    if(this.isBinary) {\n      return BinaryNote._4N;\n    } else {\n      return TernaryNote._4N;\n    }\n  }\n\n  /**\n  * Returns the note in string form\n  * @returns {String} A stringified version of this note\n  */\n  toString(): String {\n    return \"{\\\"timecode\\\":\"+this.timecode+\",\\\"duration\\\":\"+this.duration+\"}\";\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NoteComponent.html":{"url":"components/NoteComponent.html","title":"component - NoteComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NoteComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/note/note.component.ts\n\n\n    \n        Description\n    \n    \n        TODO\nThe notes to insert inside the MeasureComponent which is also to do\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-note\n            \n\n            \n                styleUrls\n                ./note.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./note.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                note\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        note\n                    \n                \n                \n                    \n                        Type :         Note\n\n                    \n                \n                \n                    \n                        Default value : new Note(0,0)\n                    \n                \n                        \n                            \n                                    Defined in src/app/note/note.component.ts:19\n                            \n                        \n                \n                    \n                        The note\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, OnInit, Input } from '@angular/core';\n\nimport { Note } from \"../classes/note\";\n\n/**\n * TODO\n * The notes to insert inside the MeasureComponent which is also to do\n */\n@Component({\n  selector: 'app-note',\n  templateUrl: './note.component.html',\n  styleUrls: ['./note.component.sass']\n})\nexport class NoteComponent implements OnInit {\n\n  /**\n  * The note\n  */\n  @Input() note: Note = new Note(0,0);\n  /**\n   * @ignore\n   */\n  constructor() { }\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n}\n\n    \n\n    \n        note works!\n\n    \n\n    \n                \n                    ./note.component.sass\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'note works!'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NoteComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoteRepresentation.html":{"url":"classes/NoteRepresentation.html","title":"class - NoteRepresentation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoteRepresentation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/note-representation.ts\n        \n\n            \n                Description\n            \n            \n                This class references the visual representation of any notes.\nUsed in the enums BinaryNote and TernaryNote.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addOn\n                            \n                            \n                                    Private\n                                imgsPaths\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addToImgsPaths\n                            \n                            \n                                    Private\n                                convertImgNameToPath\n                            \n                            \n                                getAddOnNumber\n                            \n                            \n                                getAddOnUseHook\n                            \n                            \n                                getImgPathAt\n                            \n                            \n                                getImgsPaths\n                            \n                            \n                                getImgsPathsLength\n                            \n                            \n                                removeFromImgsPaths\n                            \n                            \n                                removeFromImgsPathsAt\n                            \n                            \n                                setAddOn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(imgsNames: string[], addOn: AddOnJson | null)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/note-representation.ts:84\n                            \n                        \n\n                \n                    \n                            The constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        imgsNames\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The names of the images, in order, used to form the note without the extention.\n\n                                                        \n                                                \n                                                \n                                                        addOn\n                                                  \n                                                        \n                                                                        AddOnJson | null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Used to add a number on top of the note. If used, must possess the attributes {number} number and {boolean} useHook\n\n                                                        \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            let quarterNoteRep: NoteRepresentation = new NoteRepresentation([\"4N\"], null);\nlet quarterNoteTripletRep: NoteRepresentation = new NoteRepresentation([\"4N\"], {\"number\": 3, \"useHook\": true});\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            addOn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AddOn | null\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note-representation.ts:84\n                            \n                        \n\n                \n                    \n                        AddOn\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            imgsPaths\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note-representation.ts:80\n                            \n                        \n\n                \n                    \n                        The paths to the different parts of the note's Img, in order\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addToImgsPaths\n                        \n                        \n                    \n                \n            \n            \n                \naddToImgsPaths(imgName: string, index: number | null)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:144\n                \n            \n\n\n            \n                \n                    Add an image to the list of paths using its name\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    imgName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the image\n\n                                    \n                                \n                                \n                                    index\n                                    \n                                            number | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The place in the list where we insert\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            convertImgNameToPath\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convertImgNameToPath(imgName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:108\n                \n            \n\n\n            \n                \n                    Get the path of the image using its name\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    imgName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the image\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The path to the image\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAddOnNumber\n                        \n                        \n                    \n                \n            \n            \n                \ngetAddOnNumber()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:187\n                \n            \n\n\n            \n                \n                    Get the number of the addon linked to this representation\n\n\n                    \n                    \n                    \n                        Returns :     number | null\n\n                    \n                    \n                        The number of the addon\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAddOnUseHook\n                        \n                        \n                    \n                \n            \n            \n                \ngetAddOnUseHook()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:198\n                \n            \n\n\n            \n                \n                    Get if the addon linked to this representation needs to use a hook\n\n\n                    \n                    \n                    \n                        Returns :     boolean | null\n\n                    \n                    \n                        The value of the condition\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getImgPathAt\n                        \n                        \n                    \n                \n            \n            \n                \ngetImgPathAt(i: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:125\n                \n            \n\n\n            \n                \n                    Get the name of the image at a certain position in the list\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The number of the image in the list\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The name of the image\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getImgsPaths\n                        \n                        \n                    \n                \n            \n            \n                \ngetImgsPaths()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:116\n                \n            \n\n\n            \n                \n                    Get the paths to all the images\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        A list of all the paths\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getImgsPathsLength\n                        \n                        \n                    \n                \n            \n            \n                \ngetImgsPathsLength()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:135\n                \n            \n\n\n            \n                \n                    Get the number of different paths to images\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The number of paths\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeFromImgsPaths\n                        \n                        \n                    \n                \n            \n            \n                \nremoveFromImgsPaths(imgName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:156\n                \n            \n\n\n            \n                \n                    Remove an image from the list of paths using its name\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    imgName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the image\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeFromImgsPathsAt\n                        \n                        \n                    \n                \n            \n            \n                \nremoveFromImgsPathsAt(index: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:167\n                \n            \n\n\n            \n                \n                    Remove an image from the list of paths using its palce in the list\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The place of the image to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setAddOn\n                        \n                        \n                    \n                \n            \n            \n                \nsetAddOn(addOn: AddOnJson | null)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:175\n                \n            \n\n\n            \n                \n                    Set the addon linked to this representation\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    addOn\n                                    \n                                                AddOnJson | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { environment } from \"./../../environments/environment\";\n\nexport type AddOnJson = {number: number, useHook: boolean};\n\n\n/**\n * The add on on top of a note's representation\n */\nclass AddOn {\n  /**\n   * The number to write\n   */\n  private number: number;\n  /**\n   * Wether or not the number should be shown with an hook\n   */\n  private useHook: boolean;\n\n\n  /**\n   * The constructor\n   * @param {number} number @link AddOn#number\n   * @param {boolean} useHook @link AddOn#useHook\n   */\n  constructor(number: number, useHook: boolean) {\n    this.number = number;\n    this.useHook = useHook;\n  }\n\n  /**\n   * Get the number\n   * @return {@link AddOn#number}\n   */\n  getNumber(): number {\n    return this.number;\n  }\n\n  /**\n   * Set the number\n   * @param {number} {@link AddOn#number}\n   */\n  setNumber(number: number): void {\n    this.number = number;\n  }\n\n  /**\n   * Check if using hoot for this representaion is needed\n   * @return {boolean} {@link AddOn#useHook}\n   */\n  getUseHook(): boolean {\n    return this.useHook;\n  }\n  /**\n   * Set if using a hook for this represention is needed\n   * @param {boolean} {@link AddOn#useHook}\n   */\n  setUseHook(useHook: boolean): void {\n    this.useHook = useHook;\n  }\n}\n\n/**\n * This class references the visual representation of any notes.\n *\n * Used in the enums BinaryNote and TernaryNote.\n */\nexport class NoteRepresentation {\n  /**\n   * @ignore\n  */\n  private static dirPath: string = \"../\" + environment.pathsFromApp.rythmsImg;\n  /**\n   * @ignore\n  */\n  private static extension: string = \".svg\";\n\n  /**\n   * The paths to the different parts of the note's Img, in order\n   */\n  private imgsPaths: string[] = new Array();\n  /**\n   * {@link AddOn}\n   */\n  private addOn: AddOn | null = null;\n\n\n  /**\n   * The constructor\n   * @param {string[]} imgsNames The names of the images, in order, used to form the note without the extention.\n   * @param {AddOnJson|null} addOn Used to add a number on top of the note. If used, must possess the attributes {number} number and {boolean} useHook\n   *\n   * @example\n   * let quarterNoteRep: NoteRepresentation = new NoteRepresentation([\"4N\"], null);\n   * let quarterNoteTripletRep: NoteRepresentation = new NoteRepresentation([\"4N\"], {\"number\": 3, \"useHook\": true});\n   */\n  constructor(imgsNames: string[], addOn: AddOnJson | null = null) {\n    for(let i = 0 ; i = this.imgsPaths.length) {\n    //}\n    return this.imgsPaths[i];\n  }\n\n  /**\n  * Get the number of different paths to images\n  * @returns {number} The number of paths\n  */\n  getImgsPathsLength(): number {\n    return this.imgsPaths.length;\n  }\n\n  /**\n  * Add an image to the list of paths using its name\n  * @param {String} imgName The name of the image\n  * @param {number|null} index The place in the list where we insert\n  */\n  addToImgsPaths(imgName: string, index: number | null): void {\n    if(index == null || index == this.imgsPaths.length) {\n      this.imgsPaths.push(this.convertImgNameToPath(imgName));\n    } else {\n      this.imgsPaths.splice(index, 0, this.convertImgNameToPath(imgName));\n    }\n  }\n\n  /**\n  * Remove an image from the list of paths using its name\n  * @param {String} imgName The name of the image\n  */\n  removeFromImgsPaths(imgName: string): void {\n    let index:number = this.imgsPaths.indexOf(imgName);\n    if(index != -1) {\n      this.imgsPaths.splice(index, 1);\n    }\n  }\n\n  /**\n  * Remove an image from the list of paths using its palce in the list\n  * @param {number} index The place of the image to remove\n  */\n  removeFromImgsPathsAt(index: number): void {\n    this.imgsPaths.splice(index, 1);\n  }\n\n  /**\n  * Set the addon linked to this representation\n  * @param {AddOnJson|null} addon the addon to set\n  */\n  setAddOn(addOn: AddOnJson | null) {\n    if(addOn != null) {\n      this.addOn = new AddOn(addOn.number, addOn.useHook);\n    } else {\n      this.addOn = null;\n    }\n  }\n\n  /**\n  * Get the number of the addon linked to this representation\n  * @returns {number|null} The number of the addon\n  */\n  getAddOnNumber(): number | null {\n    if(this.addOn != null) {\n      return this.addOn.getNumber();\n    }\n    return null;\n  }\n\n  /**\n  * Get if the addon linked to this representation needs to use a hook\n  * @returns {boolean|null} The value of the condition\n  */\n  getAddOnUseHook(): boolean | null {\n    if(this.addOn != null) {\n      return this.addOn.getUseHook();\n    }\n    return null;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PlaybarComponent.html":{"url":"components/PlaybarComponent.html","title":"component - PlaybarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  PlaybarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/playbar/playbar.component.ts\n\n\n    \n        Description\n    \n    \n        TODO \nThe play bar with buttons such as play, pause, fastforward and backward\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-playbar\n            \n\n            \n                styleUrls\n                ./playbar.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./playbar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toggleIsPlaying\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isPlaying\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isPlaying\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/playbar/playbar.component.ts:23\n                            \n                        \n                \n                    \n                        If the track should be playing\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleIsPlaying\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleIsPlaying()\n                \n            \n\n\n            \n                \n                    Defined in src/app/playbar/playbar.component.ts:44\n                \n            \n\n\n            \n                \n                    Toggle if the tracks are playing or not PlaybarComponent\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, EventEmitter, Output, Input, OnChanges, SimpleChanges} from '@angular/core';\n\n\n/**\n * TODO \n * The play bar with buttons such as play, pause, fastforward and backward\n */\n@Component({\n  selector: 'app-playbar',\n  templateUrl: './playbar.component.html',\n  styleUrls: ['./playbar.component.sass']\n})\nexport class PlaybarComponent implements OnInit, OnChanges {\n\n  /**\n  * @ignore\n  */\n  @Output() private playTracks: EventEmitter = new EventEmitter();\n\n  /**\n  * If the track should be playing\n  */\n  @Input() isPlaying: boolean = false;\n\n  /**\n  * @ignore\n  */\n  ngOnChanges(changes: SimpleChanges){\n  }\n  /**\n   * @ignore\n   */\n  constructor() {\n  }\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n  * Toggle if the tracks are playing or not {@link PlaybarComponent#isPlaying}\n  */\n  toggleIsPlaying(): void {\n    this.isPlaying = !this.isPlaying;\n    this.playTracks.emit(this.isPlaying);\n  }\n}\n\n    \n\n    \n        \n\n\n\n\n    \n\n    \n                \n                    ./playbar.component.sass\n                \n                @use \"../styles/menu-parts\"\n\n:host\n  display: flex\n  justify-content: space-between\n\n  &>button:first-child\n    margin-right: 0.75rem\n  &>button:nth-child(2)\n    margin-right: 0.5rem\n\n  &>button:nth-child(1)>img\n    transform: rotateY(180deg)\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PlaybarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RhythmComponent.html":{"url":"components/RhythmComponent.html","title":"component - RhythmComponent","body":"\n                   \n\n\n\n\n\n  Components\n  RhythmComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/rhythm/rhythm.component.ts\n\n\n    \n        Description\n    \n    \n        The component that holds all the interface for the first tab\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-rhythm\n            \n\n            \n                styleUrls\n                ./rhythm.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./rhythm.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                endTapVar\n                            \n                            \n                                isPlayingTracks\n                            \n                            \n                                measureDuration\n                            \n                            \n                                nbOfSoloTracks\n                            \n                            \n                                recording\n                            \n                            \n                                selectedTrackId\n                            \n                            \n                                selectedTrackIndex\n                            \n                            \n                                signature\n                            \n                            \n                                startRecord\n                            \n                            \n                                startTapVar\n                            \n                            \n                                tempo\n                            \n                            \n                                tracks\n                            \n                            \n                                waitingRecord\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNote\n                            \n                            \n                                addTrack\n                            \n                            \n                                atMeasure\n                            \n                            \n                                endTap\n                            \n                            \n                                getTrackIndex\n                            \n                            \n                                setIsPlayingTracks\n                            \n                            \n                                setSelectedTrackId\n                            \n                            \n                                setSignature\n                            \n                            \n                                setTempo\n                            \n                            \n                                soloedTrack\n                            \n                            \n                                startTap\n                            \n                            \n                                    Async\n                                toggleRecording\n                            \n                            \n                                toString\n                            \n                            \n                                updateMeasureDuration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addNote\n                        \n                        \n                    \n                \n            \n            \n                \naddNote(note: Note)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:138\n                \n            \n\n\n            \n                \n                    Add a note to the selected track \nTODO\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                Note\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addTrack\n                        \n                        \n                    \n                \n            \n            \n                \naddTrack(bool: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:101\n                \n            \n\n\n            \n                \n                    Add a new track to the list of tracks\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bool\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Should the track actually be added\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            atMeasure\n                        \n                        \n                    \n                \n            \n            \n                \natMeasure()\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:153\n                \n            \n\n\n            \n                \n                    Get the number of the measure that currently being recorded (based on the start of the recording)\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        the number of the measure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            endTap\n                        \n                        \n                    \n                \n            \n            \n                \nendTap(evt: Event)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:177\n                \n            \n\n\n            \n                \n                    State that a TAP has ended\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    evt\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the TAP button is released\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTrackIndex\n                        \n                        \n                    \n                \n            \n            \n                \ngetTrackIndex(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:235\n                \n            \n\n\n            \n                \n                    Get the index of a track inside the componenet's tracks array attribute knowing it's id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the track to find in the compoenent's tracks array\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            let index: number = getTrackIndex(track.getId());\n                        \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The ondex of the track which id was given in parameter inside the component's tracks array attribute\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setIsPlayingTracks\n                        \n                        \n                    \n                \n            \n            \n                \nsetIsPlayingTracks(bool: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:275\n                \n            \n\n\n            \n                \n                    Set if the tracks are playing\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bool\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        if the tracks are palying or not\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSelectedTrackId\n                        \n                        \n                    \n                \n            \n            \n                \nsetSelectedTrackId(id: number | null)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:210\n                \n            \n\n\n            \n                \n                    Set the RhythmComponent\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            number | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the selected track (null if none)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSignature\n                        \n                        \n                    \n                \n            \n            \n                \nsetSignature(signature: Signature)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:201\n                \n            \n\n\n            \n                \n                    Set the RhythmComponent\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                                Signature\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The signature to set with\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTempo\n                        \n                        \n                    \n                \n            \n            \n                \nsetTempo(tempo: Tempo)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:191\n                \n            \n\n\n            \n                \n                    Set the RhythmComponent\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tempo\n                                    \n                                                Tempo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The tempo to set with\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            soloedTrack\n                        \n                        \n                    \n                \n            \n            \n                \nsoloedTrack(bool: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:249\n                \n            \n\n\n            \n                \n                    Function called every time a child componenet track's sound plan change to solo or from solo\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bool\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        true if a track have been soloed, false if it had been unsoloed\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startTap\n                        \n                        \n                    \n                \n            \n            \n                \nstartTap(evt: Event)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:169\n                \n            \n\n\n            \n                \n                    State that a TAP has begun\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    evt\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the TAP button is held\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            toggleRecording\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toggleRecording()\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:111\n                \n            \n\n\n            \n                \n                    Toggle if the inputs are being recorded\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise to await for\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:284\n                \n            \n\n\n            \n                \n                    Return the current rhythm in string form \n(Should be the correct format for conversion)\n\n\n                    \n                    \n                    \n                        Returns :         String\n\n                    \n                    \n                        A stringified version of the rhythm\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateMeasureDuration\n                        \n                        \n                    \n                \n            \n            \n                \nupdateMeasureDuration()\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:145\n                \n            \n\n\n            \n                \n                    Update the duration of the measures based on the RythmComponent#signature and the RythmComponent#tempo\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endTapVar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Default value : new Date()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:73\n                            \n                        \n\n                \n                    \n                        The instant a TAP is released\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isPlayingTracks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:78\n                            \n                        \n\n                \n                    \n                        If the tracks are playing\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            measureDuration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:83\n                            \n                        \n\n                \n                    \n                        The duration of the measures (in seconds)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nbOfSoloTracks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:58\n                            \n                        \n\n                \n                    \n                        The number of tracks stated as solo\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recording\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:53\n                            \n                        \n\n                \n                    \n                        If we are recording the inputs\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedTrackId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:38\n                            \n                        \n\n                \n                    \n                        The id of the track that's being selected\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedTrackIndex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : -1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:43\n                            \n                        \n\n                \n                    \n                        The index of the selected track in the list of all the tracks\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            signature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Signature\n\n                        \n                    \n                    \n                        \n                            Default value : new Signature()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:28\n                            \n                        \n\n                \n                    \n                        The general signature, being used when a measure doesn't have its own\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startRecord\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Default value : new Date()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:63\n                            \n                        \n\n                \n                    \n                        The instant of the beginning of the recording\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startTapVar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Default value : new Date()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:68\n                            \n                        \n\n                \n                    \n                        The instant a TAP is held\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tempo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tempo\n\n                        \n                    \n                    \n                        \n                            Default value : new Tempo()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:33\n                            \n                        \n\n                \n                    \n                        The general tempo of the tracks\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tracks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Track[]\n\n                        \n                    \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:23\n                            \n                        \n\n                \n                    \n                        A list of all the tracks\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            waitingRecord\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:48\n                            \n                        \n\n                \n                    \n                        If we need to wait 2 measure before actually recording the inputs\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\nimport { Track } from \"../classes/track\";\nimport { Note } from \"../classes/note\";\nimport { Tempo } from \"../classes/tempo\";\nimport { Signature } from \"../classes/signature\";\nimport {EventEmitter, Output, Input} from '@angular/core';\n\n\n/**\n* The component that holds all the interface for the first tab\n*/\n@Component({\n  selector: 'app-rhythm',\n  templateUrl: './rhythm.component.html',\n  styleUrls: ['./rhythm.component.sass']\n})\nexport class RhythmComponent implements OnInit {\n\n  /**\n  * A list of all the tracks\n  */\n  tracks: Track[] = new Array();\n\n  /**\n  * The general signature, being used when a measure doesn't have its own\n  */\n  signature: Signature = new Signature();\n\n  /**\n  * The general tempo of the tracks\n  */\n  tempo: Tempo = new Tempo();\n\n  /**\n  * The id of the track that's being selected\n  */\n  selectedTrackId: number | null = null;\n\n  /**\n  * The index of the selected track in the list of all the tracks\n  */\n  selectedTrackIndex: number = -1;\n\n  /**\n  * If we need to wait 2 measure before actually recording the inputs\n  */\n  waitingRecord: boolean = false;\n\n  /**\n  * If we are recording the inputs\n  */\n  recording: boolean = false\n\n  /**\n  * The number of tracks stated as solo\n  */\n  nbOfSoloTracks: number = 0;\n\n  /**\n  * The instant of the beginning of the recording\n  */\n  startRecord: Date = new Date();\n\n  /**\n  * The instant a TAP is held\n  */\n  startTapVar: Date = new Date();\n\n  /**\n  * The instant a TAP is released\n  */\n  endTapVar: Date = new Date();\n\n  /**\n  * If the tracks are playing\n  */\n  isPlayingTracks: boolean = false;\n\n  /**\n   * The duration of the measures (in seconds)\n   */\n  measureDuration: number = 0;\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  /**\n  * @ignore\n  */\n  ngOnInit(): void {\n    this.updateMeasureDuration();\n  }\n\n  /**\n  * Add a new track to the list of tracks\n  * @param {boolean} bool Should the track actually be added\n  */\n  addTrack(bool: boolean): void {\n    if(bool) {\n      this.tracks.push(new Track());\n    }\n  }\n\n  /**\n  * Toggle if the inputs are being recorded\n  * @returns {Promise} A promise to await for\n  */\n  async toggleRecording(): Promise {\n    if(this.selectedTrackId) {\n      this.recording = !this.recording;\n      if(!this.recording) {\n        this.waitingRecord = false;\n      } else {\n        console.log(\"new\")\n        this.startRecord = new Date();\n        this.waitingRecord = true;\n        let time = this.measureDuration * 2 * 1000; // Two measures time in ms\n        await new Promise(function(resolve) {\n          setTimeout(function () {\n            resolve();\n          }, time);\n        });\n        this.waitingRecord = false;\n        this.startRecord = new Date();\n      }\n      //this.startRecord = new Date();\n\n    }\n  }\n\n  /**\n   * Add a note to the selected track \n   * TODO\n   */\n  addNote(note: Note): void {\n\n  }\n\n  /**\n  * Update the duration of the measures based on the {@link RythmComponent#signature} and the {@link RythmComponent#tempo}\n  */\n  updateMeasureDuration(): void {\n    this.measureDuration = (((this.signature.getTop() * (this.tempo.getNoteNumber() / this.signature.getBottomNumber())) / this.tempo.getBPM()) * 60);\n  }\n\n  /**\n  * Get the number of the measure that currently being recorded (based on the start of the recording)\n  * @returns {number} the number of the measure\n  */\n  atMeasure(): number {\n    let result = Math.floor(( (Date.now() - this.startRecord.getTime()) / 1000) / this.measureDuration) + 1;\n    console.log(result);\n    if(this.waitingRecord) {\n      if(result == 1) {\n        return -2;\n      }\n      return -1;\n    }\n    return result;\n  }\n\n  /**\n  * State that a TAP has begun\n  * @param {Event} evt the TAP button is held\n  */\n  startTap(evt: Event): void {\n    this.startTapVar = new Date();\n  }\n\n  /**\n  * State that a TAP has ended\n  * @param {Event} evt the TAP button is released\n  */\n  endTap(evt: Event): void {\n    this.endTapVar = new Date();\n\n      // In seconds\n    let timecode: number = (this.startTapVar.getTime() - this.startRecord.getTime()) / 1000;\n    let duration: number = (this.endTapVar.getTime() - this.startTapVar.getTime()) / 1000;\n\n    this.tracks[this.selectedTrackIndex].addNote(new Note(timecode, duration));\n  }\n\n  /**\n  * Set the {@link RhythmComponent#tempo}\n  * @param {Tempo} tempo The tempo to set with\n  */\n  setTempo(tempo: Tempo):void {\n      // Must be set this way for being send to the child components after modification\n    this.tempo = new Tempo(tempo.getNote(), tempo.getBPM());\n    this.updateMeasureDuration();\n  }\n\n  /**\n  * Set the {@link RhythmComponent#signature}\n  * @param {Signature} signature The signature to set with\n  */\n  setSignature(signature: Signature): void {\n    this.signature = new Signature(signature.getTop(), signature.getBottom());\n    this.updateMeasureDuration();\n  }\n\n  /**\n  * Set the {@link RhythmComponent#selectedTrackId}\n  * @param {number|null} id The id of the selected track (null if none)\n  */\n  setSelectedTrackId(id: number | null): void {\n    if(!this.recording) {\n      // Put the last selected (this.selectedTrackId) track component's inside attribute isSelected as false\n      this.selectedTrackId = id;\n\n      if(id) {\n        this.selectedTrackIndex = this.getTrackIndex(id);\n      } else {\n        this.selectedTrackIndex = -1;\n      }\n    } else {\n      // Reput the (id) track component's inside attribute isSelected as false\n    }\n  }\n\n\n  /**\n   * Get the index of a track inside the componenet's tracks array attribute knowing it's id\n   *\n   * @example\n   * let index: number = getTrackIndex(track.getId());\n   *\n   * @param {number} id The id of the track to find in the compoenent's tracks array\n   * @returns {number} The ondex of the track which id was given in parameter inside the component's tracks array attribute\n   */\n  getTrackIndex(id: number): number {\n    for(let i = 0 ; i \n  * (Should be the correct format for conversion)\n  * @returns {String} A stringified version of the rhythm\n  */\n  toString(): String {\n    let rythmStr: String = \"\";\n    rythmStr += \"{\";\n    rythmStr += this.tempo.toString()+\",\";\n    //Anacrouse wuold go there\n    rythmStr += this.signature.toString()+\",\";\n    //Number of \"mesures\" would go there\n    //A json array of modiified \"mesures\" would go there\n    rythmStr += \"\\\"Tracks\\\":[\";\n    for(let aTrack of this.tracks) {\n      rythmStr += aTrack.toString() + \",\";\n    }\n    rythmStr = rythmStr.slice(0, -1);\n    rythmStr += \"]}\";\n\n    return rythmStr;\n  }\n\n}\n\n    \n\n    \n        Créer une polyrythmie\n\n\n  \n  \n\n\n\n  \n    \n      \n      \n    \n\n    \n      \n      \n        \n        \n      \n    \n\n    \n      \n      \n    \n  \n\n  START\n  WAIT\n  TAP\n\n  \n    \n      \n        \n        Stop\n      \n      \n        Mesure : {{ atMeasure() }}\n      \n    \n    \n\n    \n    \n      \n      \n    \n\n  \n\n\n    \n\n    \n                \n                    ./rhythm.component.sass\n                \n                @use \"~sass/vars\"\n\n$TAP_BUTTON_SIZE: 8rem\n\n$CONTROLS_HEIGHT: 12rem\n\n$BUTTON_SIZE: 3rem\n\n:host\n  display: flex\n  flex-direction: column\n  width: 100%\n  max-width: 100%\n  flex-grow: 1\n  max-height: 100vh\n\n\nsection\n  width: 100%\n\n#tracks\n  padding: 0.5rem 0\n  overflow-y: auto\n  overflow-x: hidden\n  max-width: 100%\n  scroll-behavior: smooth\n  max-height: calc(100vh - $CONTROLS_HEIGHT)\n\n  &::-webkit-scrollbar\n    height: 0px\n    width: 0px\n    background: transparent\n\n#controls\n  margin-top: auto\n  margin-bottom: 2rem\n  padding-top: 0.5rem\n  display: flex\n  height: $CONTROLS_HEIGHT\n  align-items: center\n\n  &>div\n    flex-grow: 1\n\n  button\n    height: $BUTTON_SIZE\n    width: $BUTTON_SIZE\n\n    &>img\n      height: 100%\n      width: 100%\n\n  #generals, #measure-and-track\n    width: calc(100% - 3.5rem)\n    // = 100% - $TAP_BUTTON_SIZE / 2 - 0.5rem\n\n  #generals\n    display: flex\n    justify-content: space-evenly\n    margin-right: 0.5rem\n\n    &>div\n      flex-grow: 1\n      display: flex\n      flex-direction: column\n      justify-content: space-between\n      align-items: center\n    &>div:nth-child(1), &>div:nth-child(2)\n      margin: 2rem 0\n\n      .anacrouse\n        width: 6rem\n\n    app-signature\n      margin-bottom: 0.5rem\n\n  #start-button, #tap-button\n    height: $TAP_BUTTON_SIZE\n    width: $TAP_BUTTON_SIZE\n\n    border-width: 0.75rem\n    border-style: solid\n    border-radius: 50%\n    flex-shrink: 0\n\n  #start-button\n    font-size: 1.8em\n    border-color: vars.$ORANGE\n\n  #tap-button\n    font-size: 2.4em\n    border-color: vars.$RED\n\n  #wait\n    display: flex\n    justify-content: center\n    align-items: center\n    height: $TAP_BUTTON_SIZE\n    width: $TAP_BUTTON_SIZE\n    flex-shrink: 0\n    border-radius: 50%\n    background-image: linear-gradient(to top, vars.$RED 50%, vars.$ORANGE 50%)\n    background-size: 100% 200%\n    font-size: 1.8em\n    text-align: center\n    //backgrond-position: 50%\n\n    &>span\n      height: $TAP_BUTTON_SIZE - 1.5rem\n      width: $TAP_BUTTON_SIZE - 1.5rem\n      border-radius: 50%\n      background-color: vars.$GRAY\n      line-height: $TAP_BUTTON_SIZE - 1.5rem\n\n\n  #measure-and-track\n    margin-left: 0.5rem\n    display: flex\n    justify-content: flex-end\n\n\n@mixin keyframes-animation($name)\n  @-webkit-keyframes #{$name}\n    @content\n\n  @keyframes #{$name}\n    @content\n\n@mixin prefix-property($name, $value1, $value2)\n  #{$name}: $value1 $value2\n          #{$name}: $value1 $value2\n\n@include keyframes-animation(record-timer)\n  0%\n    @include prefix-property(background-position, top, center)\n  /*25%\n    @include prefix-property(transform, translateX(-50%) rotate(0deg) linear)*/\n  /*50%\n    @include prefix-property(transform, translateX(-50%) rotate(45deg))*/\n  /*75%\n    @include prefix-property(transform, translateX(-50%) rotate(0deg) linear)*/\n  100%\n    @include prefix-property(background-position, bottom, center)\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Créer une polyrythmie                                                                                            START  WAIT  TAP                            Stop                    Mesure : {{ atMeasure() }}                                        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RhythmComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SaveMenuComponent.html":{"url":"components/SaveMenuComponent.html","title":"component - SaveMenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SaveMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/save-menu/save-menu.component.ts\n\n\n    \n        Description\n    \n    \n        The save-menu component \nTODO\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-save-menu\n            \n\n            \n                styleUrls\n                ./save-menu.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./save-menu.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n/**\n* The save-menu component \n* TODO\n*/\n@Component({\n  selector: 'app-save-menu',\n  templateUrl: './save-menu.component.html',\n  styleUrls: ['./save-menu.component.sass']\n})\nexport class SaveMenuComponent implements OnInit {\n  /**\n   * @ignore\n   */\n  constructor() { }\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n}\n\n    \n\n    \n        \n  \n  \n    \n    \n  \n\n\n    \n\n    \n                \n                    ./save-menu.component.sass\n                \n                @use \"../styles/menu-parts\"\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SaveMenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Signature.html":{"url":"classes/Signature.html","title":"class - Signature","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Signature\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/signature.ts\n        \n\n            \n                Description\n            \n            \n                This class represents a signature\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bottom\n                            \n                            \n                                    Private\n                                top\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBottom\n                            \n                            \n                                getBottomImgPath\n                            \n                            \n                                getBottomName\n                            \n                            \n                                getBottomNumber\n                            \n                            \n                                getTop\n                            \n                            \n                                    Private\n                                isCompatible\n                            \n                            \n                                setBottom\n                            \n                            \n                                setTop\n                            \n                            \n                                setTopAndBottom\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(top: number, bottom: BasicNote)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/signature.ts:15\n                            \n                        \n\n                \n                    \n                            Create a signature object. If top and bottom are not compatible, both are set to default value.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        top\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                (optional) The top of the signature\n\n                                                        \n                                                \n                                                \n                                                        bottom\n                                                  \n                                                        \n                                                                        BasicNote\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            bottom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BasicNote\n\n                        \n                    \n                    \n                        \n                            Default value : BasicNote.QUARTER_NOTE\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/signature.ts:15\n                            \n                        \n\n                \n                    \n                        The note used as time base\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            top\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 4\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/signature.ts:10\n                            \n                        \n\n                \n                    \n                        The number of times of each measure\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBottom\n                        \n                        \n                    \n                \n            \n            \n                \ngetBottom()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:56\n                \n            \n\n\n            \n                \n                    Get the bottom's value\n\n\n                    \n                    \n                    \n                        Returns :         BasicNote\n\n                    \n                    \n                        The bottom of the signature\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBottomImgPath\n                        \n                        \n                    \n                \n            \n            \n                \ngetBottomImgPath()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:119\n                \n            \n\n\n            \n                \n                    Get the image path associated to the note of the bottom of the signature\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The image path of the signature's bottom\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBottomName\n                        \n                        \n                    \n                \n            \n            \n                \ngetBottomName()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:110\n                \n            \n\n\n            \n                \n                    Get the name associated to the note of the bottom of the signature\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The name of the signature's bottom\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBottomNumber\n                        \n                        \n                    \n                \n            \n            \n                \ngetBottomNumber()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:101\n                \n            \n\n\n            \n                \n                    Get the number associated to the note of the bottom of the signature\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The number of the signature's bottom\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTop\n                        \n                        \n                    \n                \n            \n            \n                \ngetTop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:37\n                \n            \n\n\n            \n                \n                    Get the top's value\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The top of the signature\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isCompatible\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isCompatible(top: number, bottom: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:88\n                \n            \n\n\n            \n                \n                    Check if the top and bottom\n   number of the signature are compatible\nNOT FINISHED\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    top\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bottom\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setBottom\n                        \n                        \n                    \n                \n            \n            \n                \nsetBottom(bottom: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:65\n                \n            \n\n\n            \n                \n                    Set the bottom's value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bottom\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new bottom of the signature\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTop\n                        \n                        \n                    \n                \n            \n            \n                \nsetTop(top: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:45\n                \n            \n\n\n            \n                \n                    Set the top's value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    top\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new top of the signature\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTopAndBottom\n                        \n                        \n                    \n                \n            \n            \n                \nsetTopAndBottom(top: number, bottom: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:76\n                \n            \n\n\n            \n                \n                    Set both top and\n   bottom values of the signature\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    top\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bottom\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BasicNote } from \"../enums/basic-note\";\n\n/**\n * This class represents a signature\n */\nexport class Signature {\n  /**\n   * The number of times of each measure\n   */\n  private top: number = 4;\n\n  /**\n   * The note used as time base\n   */\n  private bottom: BasicNote = BasicNote.QUARTER_NOTE;\n\n  /**\n   * Create a signature object. If {@link SignatureComponent#top|top} and {@link SignatureComponent#bottom|bottom} are not compatible, both are set to default value.\n   *\n   * @param {number} top (optional) The top of the signature\n   * @param {BasicNote} top (optional) The bottom of the signature\n   */\n  constructor(top: number = 4, bottom: BasicNote = BasicNote.QUARTER_NOTE) {\n    if(!this.isCompatible(top, bottom)) {\n      this.top = 4;\n      this.bottom = BasicNote.QUARTER_NOTE;\n    }\n    this.top = top;\n    this.bottom = bottom;\n  }\n\n  /**\n   * Get the {@link SignatureComponent#top|top}'s value\n   *\n   * @returns The top of the signature\n   */\n  getTop(): number {\n    return this.top;\n  }\n  /**\n   * Set the {@link SignatureComponent#top|top}'s value\n   *\n   * @param {number} top The new top of the signature\n   */\n  setTop(top: number): void {\n    if(this.isCompatible(top, this.bottom)) {\n      this.top = top;\n    }\n  }\n\n  /**\n   * Get the {@link SignatureComponent#bottom|bottom}'s value\n   *\n   * @returns The bottom of the signature\n   */\n  getBottom(): BasicNote {\n    return this.bottom;\n  }\n\n  /**\n   * Set the {@link SignatureComponent#bottom|bottom}'s value\n   *\n   * @param {BasicNote} bottom The new bottom of the signature\n   */\n  setBottom(bottom: BasicNote): void {\n    if(this.isCompatible(this.top, bottom)) {\n\n      this.bottom = bottom;\n    }\n  }\n\n  /**\n   * Set both {@link SignatureComponent#top|top} and\n   *   {@link SignatureComponent#bottom|bottom} values of the signature\n   */\n  setTopAndBottom(top: number, bottom: BasicNote) {\n    if(this.isCompatible(top, bottom)) {\n      this.top = top;\n      this.bottom = bottom;\n    }\n  }\n\n  /**\n   * Check if the {@link SignatureComponent#top|top} and {@link SignatureComponent#bottom|bottom}\n   *   number of the signature are compatible\n   * NOT FINISHED\n   */\n  private isCompatible(top: number, bottom: BasicNote): boolean {\n    if(top >= 1 && top % 1 == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Get the {@link BasicNote#getNumber|number} associated to the {@link BasicNote|note} of the {@link SignatureComponent#bottom|bottom} of the signature\n   *\n   * @returns The number of the signature's bottom\n   */\n  getBottomNumber(): number {\n    return BasicNote.getNumber(this.bottom);\n  }\n\n  /**\n   * Get the {@link BasicNote#name|name} associated to the {@link BasicNote|note} of the {@link SignatureComponent#bottom|bottom} of the signature\n   *\n   * @returns The name of the signature's bottom\n   */\n  getBottomName(): string {\n    return BasicNote.getName(this.bottom);\n  }\n\n  /**\n   * Get the {@link BasicNote#imgPath|image path} associated to the {@link BasicNote|note} of the {@link SignatureComponent#bottom|bottom} of the signature\n   *\n   * @returns The image path of the signature's bottom\n   */\n  getBottomImgPath(): string {\n    return BasicNote.getImgPath(this.bottom);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignatureComponent.html":{"url":"components/SignatureComponent.html","title":"component - SignatureComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SignatureComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/signature/signature.component.ts\n\n\n    \n        Description\n    \n    \n        TODO. Kind of similar to TempoComponent\nUsed to define the signature of a project or measure\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signature\n            \n\n            \n                styleUrls\n                ./signature.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./signature.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isModifyingBottomSignature\n                            \n                            \n                                isModifyingTopSignature\n                            \n                            \n                                modifiableBottom\n                            \n                            \n                                modifiableTop\n                            \n                            \n                                signature\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBasicNoteList\n                            \n                            \n                                getImgPath\n                            \n                            \n                                getName\n                            \n                            \n                                setNoteToBottom\n                            \n                            \n                                toggleModifyBottomSignature\n                            \n                            \n                                toggleModifyTopSignature\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBasicNoteList\n                        \n                        \n                    \n                \n            \n            \n                \ngetBasicNoteList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/signature/signature.component.ts:89\n                \n            \n\n\n            \n                \n                    Get all the notes that the user can chose as the tempo's note\n\n\n                    \n                    \n                    \n                        Returns :         BasicNote[]\n\n                    \n                    \n                        The notes that the user can chose\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getImgPath\n                        \n                        \n                    \n                \n            \n            \n                \ngetImgPath(note: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/signature/signature.component.ts:98\n                \n            \n\n\n            \n                \n                    Get the path to the image of a note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note we want the path to its image\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The path to the image of the note\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getName\n                        \n                        \n                    \n                \n            \n            \n                \ngetName(note: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/signature/signature.component.ts:106\n                \n            \n\n\n            \n                \n                    Get the name of a note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note we want the name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The name of the note\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setNoteToBottom\n                        \n                        \n                    \n                \n            \n            \n                \nsetNoteToBottom(note: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/signature/signature.component.ts:114\n                \n            \n\n\n            \n                \n                    Set the note for the bottom number of the SignatureComponent\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the note to use as base\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleModifyBottomSignature\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleModifyBottomSignature()\n                \n            \n\n\n            \n                \n                    Defined in src/app/signature/signature.component.ts:75\n                \n            \n\n\n            \n                \n                    Toggle if the SignatureComponent is being modified or not\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleModifyTopSignature\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleModifyTopSignature()\n                \n            \n\n\n            \n                \n                    Defined in src/app/signature/signature.component.ts:61\n                \n            \n\n\n            \n                \n                    Toggle if the SignatureComponent is being modified or not\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isModifyingBottomSignature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/signature/signature.component.ts:41\n                            \n                        \n\n                \n                    \n                        Is SignatureComponent being modified\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isModifyingTopSignature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/signature/signature.component.ts:36\n                            \n                        \n\n                \n                    \n                        Is SignatureComponent being modified\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modifiableBottom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BasicNote\n\n                        \n                    \n                    \n                        \n                            Default value : this.signature.getBottom()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/signature/signature.component.ts:31\n                            \n                        \n\n                \n                    \n                        The bottom note based number of the signature\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modifiableTop\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : this.signature.getTop()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/signature/signature.component.ts:26\n                            \n                        \n\n                \n                    \n                        The top number of the signature\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            signature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Signature\n\n                        \n                    \n                    \n                        \n                            Default value : new Signature(4, BasicNote.QUARTER_NOTE)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/signature/signature.component.ts:21\n                            \n                        \n\n                \n                    \n                        The  signature associated to the component\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit , Output, EventEmitter} from '@angular/core';\n\nimport { BasicNote } from \"../enums/basic-note\";\nimport { Signature } from \"../classes/signature\";\n\n\n/**\n * TODO. Kind of similar to {@link TempoComponent|TempoComponent}\n * Used to define the signature of a project or measure\n */\n@Component({\n  selector: 'app-signature',\n  templateUrl: './signature.component.html',\n  styleUrls: ['./signature.component.sass']\n})\nexport class SignatureComponent implements OnInit {\n\n  /**\n   * The  {@link Signature|signature} associated to the component\n   */\n  signature: Signature = new Signature(4, BasicNote.QUARTER_NOTE);\n\n  /**\n  * The top number of the signature\n  */\n  modifiableTop: number = this.signature.getTop();\n\n  /**\n  * The bottom note based number of the signature\n  */\n  modifiableBottom: BasicNote = this.signature.getBottom();\n\n  /**\n  * Is {@link SignatureComponent#modifiableTop} being modified\n  */\n  isModifyingTopSignature: boolean = false;\n\n  /**\n  * Is {@link SignatureComponent#modifiableBottom} being modified\n  */\n  isModifyingBottomSignature: boolean = false;\n\n  /**\n  * @ignore\n  */\n  @Output() signatureOut: EventEmitter = new EventEmitter();\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n  * Toggle if the {@link SignatureComponent#modifiableTop} is being modified or not\n  */\n  toggleModifyTopSignature(): void {\n    if(!this.isModifyingBottomSignature){\n      this.isModifyingTopSignature = !this.isModifyingTopSignature;\n      if(!this.isModifyingTopSignature) {\n        this.signature.setTop(this.modifiableTop);\n      }\n      this.signatureOut.emit(this.signature);\n    }\n  }\n\n\n  /**\n  * Toggle if the {@link SignatureComponent#modifiableBottom} is being modified or not\n  */\n  toggleModifyBottomSignature(): void {\n    if(!this.isModifyingTopSignature){\n      this.isModifyingBottomSignature = !this.isModifyingBottomSignature;\n      if(!this.isModifyingBottomSignature) {\n        this.signature.setBottom(this.modifiableBottom);\n      }\n      this.signatureOut.emit(this.signature);\n    }\n  }\n\n  /**\n   * Get all the notes that the user can chose as the {@link Tempo|tempo}'s {@link Tempo#note|note}\n   * @returns The notes that the user can chose\n   */\n  getBasicNoteList(): BasicNote[] {\n    return BasicNote.values();\n  }\n\n  /**\n   * Get the path to the image of a {@link BasicNote|note}\n   * @param {BasicNote} note The note we want the path to its image\n   * @returns The path to the image of the note\n   */\n  getImgPath(note: BasicNote): string {\n    return BasicNote.getImgPath(note);\n  }\n  /**\n   * Get the name of a {@link BasicNote|note}\n   * @param {BasicNote} note The note we want the name\n   * @returns The name of the note\n   */\n  getName(note: BasicNote): string {\n    return BasicNote.getName(note);\n  }\n\n  /**\n  * Set the note for the bottom number of the {@link SignatureComponent#signature}\n  * @param {BasicNote} note the note to use as base\n  */\n  setNoteToBottom(note: BasicNote){\n    this.toggleModifyBottomSignature();\n    this.signature.setBottom(note);\n  }\n}\n\n    \n\n    \n        \n  Signature\n  \n    {{ signature.getTop() }}\n    {{ signature.getBottomNumber() }}\n\n    \n      \n      ➤\n    \n\n    \n      \n    \n\n  \n\n\n    \n\n    \n                \n                    ./signature.component.sass\n                \n                @use \"~sass/vars\"\n\n.sig-root\n  background-color: vars.$LIGHT_GRAY\n  border-radius: 1.5rem\n  padding: 0.75rem 1rem\n\n  p\n   margin: 0 0 0.75rem 0\n   text-align: center\n\n  div\n    display: flex\n    flex-direction: column\n    justify-content: center\n    align-items: center\n\n    span\n      font-size: 1.3em\n      padding: 0.25rem\n      cursor: pointer\n\n    span:first-child\n      margin-bottom: 0.25rem\n.selectNote\n  img\n    height: 1.5em\n    padding: 0.25rem\n    cursor: pointer\n  img:hover\n    -webkit-filter: drop-shadow(0 0 0.05rem rgba(255, 255, 255, .7))\n    filter: drop-shadow(0 0 0.1rem rgba(255, 255, 255, .7))\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Signature      {{ signature.getTop() }}    {{ signature.getBottomNumber() }}                ➤                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignatureComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SoundPlayerComponent.html":{"url":"components/SoundPlayerComponent.html","title":"component - SoundPlayerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SoundPlayerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/sound-player/sound-player.component.ts\n\n\n    \n        Description\n    \n    \n        This component represent a sound-player, never to be displayed to plays sound\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-sound-player\n            \n\n            \n                styleUrls\n                ./sound-player.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./sound-player.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                sound\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                pause\n                            \n                            \n                                playFromTime\n                            \n                            \n                                playSound\n                            \n                            \n                                setVolume\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isPlaying\n                            \n                            \n                                soundName\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isPlaying\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/sound-player/sound-player.component.ts:33\n                            \n                        \n                \n                    \n                        Is the player playing sound\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        soundName\n                    \n                \n                \n                    \n                        Type :         String\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/sound-player/sound-player.component.ts:28\n                            \n                        \n                \n                    \n                        The name of the sound file played\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            pause\n                        \n                        \n                    \n                \n            \n            \n                \npause()\n                \n            \n\n\n            \n                \n                    Defined in src/app/sound-player/sound-player.component.ts:97\n                \n            \n\n\n            \n                \n                    Pause the audio if playing\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            playFromTime\n                        \n                        \n                    \n                \n            \n            \n                \nplayFromTime(startTime: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/sound-player/sound-player.component.ts:87\n                \n            \n\n\n            \n                \n                    Play the sound from a certain point in time\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    startTime\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                    \n                                        The time in seconds from which the sound starts playing. If unspecified, the sound starts from the beginning (StartTime = 0s)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            playSound\n                        \n                        \n                    \n                \n            \n            \n                \nplaySound()\n                \n            \n\n\n            \n                \n                    Defined in src/app/sound-player/sound-player.component.ts:77\n                \n            \n\n\n            \n                \n                    Play the audio\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setVolume\n                        \n                        \n                    \n                \n            \n            \n                \nsetVolume(volume: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/sound-player/sound-player.component.ts:108\n                \n            \n\n\n            \n                \n                    Set the volume of the sound\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    volume\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value of the volume that will be set. Should be included between [0;1]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/sound-player/sound-player.component.ts:18\n                            \n                        \n\n                \n                    \n                        The sound played by the player\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, SimpleChanges, OnChanges, EventEmitter, Output, Input } from '@angular/core';\n\nimport { environment } from \"./../../environments/environment\";\n\n/**\n* This component represent a sound-player, never to be displayed to plays sound\n*/\n@Component({\n  selector: 'app-sound-player',\n  templateUrl: './sound-player.component.html',\n  styleUrls: ['./sound-player.component.sass']\n})\nexport class SoundPlayerComponent implements OnInit, OnChanges {\n\n  /**\n  * The sound played by the player\n  */\n  private sound: any;\n\n  /**\n  * @ignore\n  */\n  @Output() finishedPlayingTrack: EventEmitter = new EventEmitter();\n\n  /**\n  * The name of the sound file played\n  */\n  @Input() soundName: String = \"\";\n\n  /**\n  * Is the player playing sound\n  */\n  @Input() isPlaying: boolean = false;\n\n  /**\n  * @ignore\n  */\n  constructor() {\n    this.sound = new Audio();\n  }\n\n  /**\n  * @ignore\n  */\n  ngOnInit(): void {\n\n      this.sound = new Audio(\"../\"+environment.pathsFromApp.sounds+this.soundName);\n      this.sound.onended = (err:any) => {\n        this.finishedPlayingTrack.emit(false);\n        //this.isPlaying = false;\n      }\n      //this.sound.play();\n  }\n\n  /**\n  * @ignore\n  */\n  ngOnChanges(changes: SimpleChanges){\n     for(const propName in changes) {\n       if(changes.hasOwnProperty(propName)) {\n         if(propName === \"isPlaying\") {\n           if(changes[\"isPlaying\"].currentValue) {\n             this.playSound();\n           } else {\n             if(changes[\"isPlaying\"].previousValue) {\n               this.pause();\n             }\n           }\n         }\n       }\n     }\n  }\n\n  /**\n  * Play the audio\n  */\n  playSound() {\n    if(this.sound){\n      this.sound.play();\n    }\n  }\n\n  /**\n  * Play the sound from a certain point in time\n  * @param {number} startTime The time in seconds from which the sound starts playing. If unspecified, the sound starts from the beginning (StartTime = 0s)\n  */\n  playFromTime(startTime: number = 0) {\n    this.sound.currentTime = startTime;\n  //  this.isPlaying = true;\n    this.sound.play();\n  }\n\n\n  /**\n  * Pause the audio if playing\n  */\n  pause() {\n    if(!this.sound.paused){\n  //      this.isPlaying = false;\n      this.sound.pause();\n    }\n  }\n\n  /**\n  *  Set the volume of the sound\n  * @param {float} volume The value of the volume that will be set. Should be included between [0;1]\n  */\n  setVolume(volume: number) {\n    if(volume 1){\n        console.log(\"Tried to set the volume to an amount that exceeds 1. Volume should be included between [0;1]\");\n      }else{\n        this.sound.volume = volume;\n        this.sound.load();\n      }\n    }\n  }\n\n\n}\n\n    \n\n    \n        \n    \n\n    \n                \n                    ./sound-player.component.sass\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SoundPlayerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tempo.html":{"url":"classes/Tempo.html","title":"class - Tempo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tempo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/tempo.ts\n        \n\n            \n                Description\n            \n            \n                This class represent a tempo\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bpm\n                            \n                            \n                                    Private\n                                note\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBPM\n                            \n                            \n                                getNote\n                            \n                            \n                                getNoteImgPath\n                            \n                            \n                                getNoteName\n                            \n                            \n                                getNoteNumber\n                            \n                            \n                                setBPM\n                            \n                            \n                                setNote\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(note: BasicNote, bpm: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/tempo.ts:14\n                            \n                        \n\n                \n                    \n                            Create a tempo object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        note\n                                                  \n                                                        \n                                                                        BasicNote\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The {\n\n                                                        \n                                                \n                                                \n                                                        bpm\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The {\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            bpm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/tempo.ts:14\n                            \n                        \n\n                \n                    \n                        The BPM or Beat Per Minute\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            note\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BasicNote\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/tempo.ts:10\n                            \n                        \n\n                \n                    \n                        The note that is beat. See BasicNote for more details\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBPM\n                        \n                        \n                    \n                \n            \n            \n                \ngetBPM()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/tempo.ts:49\n                \n            \n\n\n            \n                \n                    Get the BPM of the tempo\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNote\n                        \n                        \n                    \n                \n            \n            \n                \ngetNote()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/tempo.ts:32\n                \n            \n\n\n            \n                \n                    Get the note of the tempo\n\n\n                    \n                    \n                    \n                        Returns :         BasicNote\n\n                    \n                    \n                        The {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNoteImgPath\n                        \n                        \n                    \n                \n            \n            \n                \ngetNoteImgPath()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/tempo.ts:78\n                \n            \n\n\n            \n                \n                    Get the image path of the note associated to the tempo\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNoteName\n                        \n                        \n                    \n                \n            \n            \n                \ngetNoteName()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/tempo.ts:86\n                \n            \n\n\n            \n                \n                    Get the name of the note associated to the tempo\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNoteNumber\n                        \n                        \n                    \n                \n            \n            \n                \ngetNoteNumber()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/tempo.ts:70\n                \n            \n\n\n            \n                \n                    Get the number of the note associated to the tempo\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setBPM\n                        \n                        \n                    \n                \n            \n            \n                \nsetBPM(bpm: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/tempo.ts:57\n                \n            \n\n\n            \n                \n                    Set the BPM of the tempo\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bpm\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new tempo's {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setNote\n                        \n                        \n                    \n                \n            \n            \n                \nsetNote(note: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/tempo.ts:40\n                \n            \n\n\n            \n                \n                    Set the note of the tempo\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new tempo's {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BasicNote } from \"../enums/basic-note\";\n\n/**\n * This class represent a tempo\n */\nexport class Tempo {\n  /**\n   * The note that is beat. See {@link BasicNote|BasicNote} for more details\n   */\n  private note: BasicNote;\n  /**\n   * The BPM or Beat Per Minute\n   */\n  private bpm: number;\n\n  /**\n   * Create a tempo object\n   *\n   * @param {BasicNote|null} note The {@link Tempo#note|note} of the new tempo\n   * @param {number|null} bpm The {@link Tempo#bpm|BPM} of the new tempo\n   */\n  constructor(note: BasicNote = BasicNote.QUARTER_NOTE, bpm: number = 60) {\n    this.note = note;\n    this.bpm = bpm;\n  }\n\n  /**\n   * Get the {@link Tempo#note|note} of the tempo\n   *\n   * @returns The {@link Tempo#note|note} of the tempo\n   */\n  getNote(): BasicNote {\n    return this.note;\n  }\n  /**\n   * Set the {@link Tempo#note|note} of the tempo\n   *\n   * @param {BasicNote} note The new tempo's {@link Tempo#note|note}\n   */\n  setNote(note: BasicNote): void {\n    this.note = note;\n  }\n\n  /**\n   * Get the {@link Tempo#bpm|BPM} of the tempo\n   *\n   * @returns The {@link Tempo#bpm|BPM} of the tempo\n   */\n  getBPM(): number {\n    return this.bpm;\n  }\n  /**\n   * Set the {@link Tempo#bpm|BPM} of the tempo\n   *\n   * @param {number} bpm The new tempo's {@link Tempo#bpm|BPM}\n   */\n  setBPM(bpm: number): boolean {\n    if(bpm >= 1 && bpm % 1 == 0) {\n      this.bpm = bpm;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get the {@link BasicNote#number|number} of the {@link Tempo#note|note} associated to the tempo\n   *\n   * @returns The {@link BasicNote#number|number} associated to the tempo's {@link Tempo#note|note}\n   */\n  getNoteNumber(): number {\n    return BasicNote.getNumber(this.note);\n  }\n  /**\n   * Get the {@link BasicNote#imgPath|image path} of the {@link Tempo#note|note} associated to the tempo\n   *\n   * @returns The {@link BasicNote#imgPath|image path} associated to the tempo's {@link Tempo#note|note}\n   */\n  getNoteImgPath(): string {\n    return BasicNote.getImgPath(this.note);\n  }\n  /**\n   * Get the {@link BasicNote#name|name} of the {@link Tempo#note|note} associated to the tempo\n   *\n   * @returns The {@link BasicNote#name|name} associated to the tempo's {@link Tempo#note|note}\n   */\n  getNoteName(): string {\n    return BasicNote.getName(this.note);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TempoComponent.html":{"url":"components/TempoComponent.html","title":"component - TempoComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TempoComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tempo/tempo.component.ts\n\n\n    \n        Description\n    \n    \n        This component allow the user to modify the tempo\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-tempo\n            \n\n            \n                styleUrls\n                ./tempo.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./tempo.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isModifyingBPM\n                            \n                            \n                                isModifyingNote\n                            \n                            \n                                modifiableBPM\n                            \n                            \n                                tempo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBasicNoteList\n                            \n                            \n                                getImgPath\n                            \n                            \n                                getName\n                            \n                            \n                                setBPM\n                            \n                            \n                                setNote\n                            \n                            \n                                toggleModifyBPM\n                            \n                            \n                                toggleModifyNote\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                tempoOutput\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        tempoOutput\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/tempo/tempo.component.ts:38\n                            \n                        \n                \n                    \n                        The attribute that notify the parent component of the new tempo when it is changed\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBasicNoteList\n                        \n                        \n                    \n                \n            \n            \n                \ngetBasicNoteList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/tempo/tempo.component.ts:102\n                \n            \n\n\n            \n                \n                    Get all the notes that the user can chose as the tempo's note\n\n\n                    \n                    \n                    \n                        Returns :         BasicNote[]\n\n                    \n                    \n                        The notes that the user can chose\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getImgPath\n                        \n                        \n                    \n                \n            \n            \n                \ngetImgPath(note: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/tempo/tempo.component.ts:112\n                \n            \n\n\n            \n                \n                    Get the path to the image of a note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note we want the path to its image\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The path to the image of the note\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getName\n                        \n                        \n                    \n                \n            \n            \n                \ngetName(note: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/tempo/tempo.component.ts:121\n                \n            \n\n\n            \n                \n                    Get the name of a note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note we want the name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The name of the note\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setBPM\n                        \n                        \n                    \n                \n            \n            \n                \nsetBPM(bpm: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/tempo/tempo.component.ts:71\n                \n            \n\n\n            \n                \n                    Set the BPM of the tempo\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bpm\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new tempo's BPM\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setNote\n                        \n                        \n                    \n                \n            \n            \n                \nsetNote(note: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/tempo/tempo.component.ts:58\n                \n            \n\n\n            \n                \n                    Set the note of the tempo\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new tempo's note\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleModifyBPM\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleModifyBPM()\n                \n            \n\n\n            \n                \n                    Defined in src/app/tempo/tempo.component.ts:87\n                \n            \n\n\n            \n                \n                    Toggle if the tempo's BPM is being modified, and modify it if it's the end of the modification\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleModifyNote\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleModifyNote()\n                \n            \n\n\n            \n                \n                    Defined in src/app/tempo/tempo.component.ts:79\n                \n            \n\n\n            \n                \n                    Toggle if the tempo's note is being modified\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isModifyingBPM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tempo/tempo.component.ts:33\n                            \n                        \n\n                \n                    \n                        Whether or note the user is modigying the BPM of the tempo\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isModifyingNote\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tempo/tempo.component.ts:29\n                            \n                        \n\n                \n                    \n                        Whether or note the user is modigying the note of the tempo\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modifiableBPM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"0\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tempo/tempo.component.ts:24\n                            \n                        \n\n                \n                    \n                        The BPM that can be directly modified by the user\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tempo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tempo\n\n                        \n                    \n                    \n                        \n                            Default value : new Tempo()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tempo/tempo.component.ts:19\n                            \n                        \n\n                \n                    \n                        The current tempo\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, EventEmitter, Output } from '@angular/core';\n\nimport { Tempo } from \"../classes/tempo\";\nimport { BasicNote } from \"../enums/basic-note\";\n\n\n/**\n * This component allow the user to modify the tempo\n */\n@Component({\n  selector: 'app-tempo',\n  templateUrl: './tempo.component.html',\n  styleUrls: ['./tempo.component.sass']\n})\nexport class TempoComponent implements OnInit {\n  /**\n   * The current tempo\n   */\n  tempo: Tempo = new Tempo();\n\n  /**\n   * The BPM that can be directly modified by the user\n   */\n  modifiableBPM: string = \"0\";\n\n  /**\n   * Whether or note the user is modigying the {@link Tempo#note|note} of the {@link Tempo|tempo}\n   */\n  isModifyingNote: boolean = false;\n  /**\n   * Whether or note the user is modigying the {@link Tempo#bpm|BPM} of the {@link Tempo|tempo}\n   */\n  isModifyingBPM: boolean = false;\n\n  /**\n   * The attribute that notify the parent component of the new tempo when it is changed\n   */\n  @Output() tempoOutput: EventEmitter = new EventEmitter();\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n    this.modifiableBPM = this.tempo.getBPM().toString();\n    this.tempoOutput.emit(this.tempo);\n  }\n\n  /**\n   * Set the {@link Tempo#note|note} of the {@link Tempo|tempo}\n   *\n   * @param {BasicNote} note The new tempo's note\n   */\n  setNote(note: BasicNote): void {\n    this.tempo.setNote(note);\n    if(this.isModifyingNote) {\n      this.isModifyingNote = false;\n    }\n    this.tempoOutput.emit(this.tempo);\n  }\n\n  /**\n   * Set the {@link Tempo#bpm|BPM} of the {@link Tempo|tempo}\n   *\n   * @param {number} bpm The new tempo's BPM\n   */\n  setBPM(bpm: number): void {\n    this.tempo.setBPM(bpm);\n    this.tempoOutput.emit(this.tempo);\n  }\n\n  /**\n   * Toggle if the tempo's note is being modified\n   */\n  toggleModifyNote(): void {\n    if(!this.isModifyingBPM) {\n      this.isModifyingNote = !this.isModifyingNote;\n    }\n  }\n  /**\n   * Toggle if the tempo's BPM is being modified, and modify it if it's the end of the modification\n   */\n  toggleModifyBPM(): void {\n    if(!this.isModifyingNote) {\n      this.isModifyingBPM = !this.isModifyingBPM;\n      //if(!this.isModifyingBPM) {\n        this.tempo.setBPM(parseInt(this.modifiableBPM, 10));\n      //}\n      this.tempoOutput.emit(this.tempo);\n    }\n  }\n\n  /**\n   * Get all the notes that the user can chose as the {@link Tempo|tempo}'s {@link Tempo#note|note}\n   *\n   * @returns The notes that the user can chose\n   */\n  getBasicNoteList(): BasicNote[] {\n    return BasicNote.values();\n  }\n\n  /**\n   * Get the path to the image of a {@link BasicNote|note}\n   *\n   * @param {BasicNote} note The note we want the path to its image\n   * @returns The path to the image of the note\n   */\n  getImgPath(note: BasicNote): string {\n    return BasicNote.getImgPath(note);\n  }\n  /**\n   * Get the name of a {@link BasicNote|note}\n   *\n   * @param {BasicNote} note The note we want the name\n   * @returns The name of the note\n   */\n  getName(note: BasicNote): string {\n    return BasicNote.getName(note);\n  }\n}\n\n    \n\n    \n        \n  Tempo\n  \n    \n    = {{ tempo.getBPM() }}\n\n    \n      \n      ➤\n    \n  \n  \n    \n  \n\n\n    \n\n    \n                \n                    ./tempo.component.sass\n                \n                @use \"~sass/vars\"\n\n.tempo-root\n  background-color: vars.$LIGHT_GRAY\n  border-radius: 1.5rem\n  padding: 0.75rem 1.5rem\n\n  p\n   margin: 0 0 0.75rem 0\n   text-align: center\n\n  div\n    display: flex\n    justify-content: center\n    align-items: center\n\n    img, img+span\n      padding: 0.25rem\n    img, span>span\n      cursor: pointer\n\n    img\n      height: 1.5em\n\n    img+span\n      font-size: 1.3em\n\n    input\n      max-width: 5rem\n\n.selectNote\n  img\n    height: 1.5em\n    padding: 0.25rem\n    cursor: pointer\n  img:hover\n    -webkit-filter: drop-shadow(0 0 0.05rem rgba(255, 255, 255, .7))\n    filter: drop-shadow(0 0 0.1rem rgba(255, 255, 255, .7))\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Tempo          = {{ tempo.getBPM() }}                ➤              '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TempoComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Track.html":{"url":"classes/Track.html","title":"class - Track","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Track\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/track.ts\n        \n\n            \n                Description\n            \n            \n                A class that represents a Track\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                id\n                            \n                            \n                                    Private\n                                instrument\n                            \n                            \n                                    Private\n                                measures\n                            \n                            \n                                    Private\n                                    Static\n                                nextId\n                            \n                            \n                                    Private\n                                notes\n                            \n                            \n                                    Private\n                                plan\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNote\n                            \n                            \n                                clearNotes\n                            \n                            \n                                deleteNotesBetweenTimecodes\n                            \n                            \n                                getId\n                            \n                            \n                                getInstrument\n                            \n                            \n                                getMeasures\n                            \n                            \n                                getNoteAtIndex\n                            \n                            \n                                getNoteAtTimecode\n                            \n                            \n                                getNotes\n                            \n                            \n                                getPlan\n                            \n                            \n                                planToString\n                            \n                            \n                                setInstrument\n                            \n                            \n                                setNotes\n                            \n                            \n                                setPlan\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(instrument: string, plan: number, measures: Measure[], notes: Note[])\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/track.ts:37\n                            \n                        \n\n                \n                    \n                            The constructor : Create a new track whose attributes corresponds to the parameters. Its id is auto-incremented\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        instrument\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                (optional) The {\n\n                                                        \n                                                \n                                                \n                                                        plan\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                (optional) The {\n\n                                                        \n                                                \n                                                \n                                                        measures\n                                                  \n                                                        \n                                                                        Measure[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        notes\n                                                  \n                                                        \n                                                                        Note[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                (optional) The {\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/track.ts:16\n                            \n                        \n\n                \n                    \n                        The id of the track\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            instrument\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/track.ts:20\n                            \n                        \n\n                \n                    \n                        The instrument used for the sound of the track\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            measures\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Measure[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/track.ts:32\n                            \n                        \n\n                \n                    \n                        A list of the measures in this track\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            nextId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/track.ts:11\n                            \n                        \n\n                \n                    \n                        The auto-increment value for the tracks' ids\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            notes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Note[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/track.ts:37\n                            \n                        \n\n                \n                    \n                        The notes inside the track\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            plan\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/track.ts:27\n                            \n                        \n\n                \n                    \n                        The sound plan of the track\n0 -> \"Normal\" (not solo nor mute)\n1 -> Solo\n2 -> Mute\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addNote\n                        \n                        \n                    \n                \n            \n            \n                \naddNote(note: Note)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:167\n                \n            \n\n\n            \n                \n                    Add a note on the track\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                Note\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the note to add\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearNotes\n                        \n                        \n                    \n                \n            \n            \n                \nclearNotes()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:174\n                \n            \n\n\n            \n                \n                    Clear the list of notes of the track\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteNotesBetweenTimecodes\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteNotesBetweenTimecodes(from: number, to: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:183\n                \n            \n\n\n            \n                \n                    Delete all notes that begins in an interval of timecodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    from\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the start of the interval\n\n                                    \n                                \n                                \n                                    to\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the end of the interval\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getId\n                        \n                        \n                    \n                \n            \n            \n                \ngetId()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:64\n                \n            \n\n\n            \n                \n                    Get the id of the track Track\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        the id of the track\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInstrument\n                        \n                        \n                    \n                \n            \n            \n                \ngetInstrument()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:72\n                \n            \n\n\n            \n                \n                    Get the instrument playing on this track Track\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The instrument playing\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMeasures\n                        \n                        \n                    \n                \n            \n            \n                \ngetMeasures()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:120\n                \n            \n\n\n            \n                \n                    Get a list of all the measures of this track Track\n\n\n                    \n                    \n                    \n                        Returns :         Measure[]\n\n                    \n                    \n                        A lsit of the measures\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNoteAtIndex\n                        \n                        \n                    \n                \n            \n            \n                \ngetNoteAtIndex(i: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:137\n                \n            \n\n\n            \n                \n                    Get a note based on the index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the index of the note\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Note\n\n                    \n                    \n                        the note\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNoteAtTimecode\n                        \n                        \n                    \n                \n            \n            \n                \ngetNoteAtTimecode(timecode: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:146\n                \n            \n\n\n            \n                \n                    Get the note based on its timecode\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    timecode\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the timecode of the note\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Note | null\n\n                    \n                    \n                        the note\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNotes\n                        \n                        \n                    \n                \n            \n            \n                \ngetNotes()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:128\n                \n            \n\n\n            \n                \n                    Get a list of the notes in the track Track\n\n\n                    \n                    \n                    \n                        Returns :         Note[]\n\n                    \n                    \n                        A list of the notes\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPlan\n                        \n                        \n                    \n                \n            \n            \n                \ngetPlan()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:88\n                \n            \n\n\n            \n                \n                    Get the plan on this track\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The plan {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            planToString\n                        \n                        \n                    \n                \n            \n            \n                \nplanToString()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:106\n                \n            \n\n\n            \n                \n                    Get the name of the plan of this track Track\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The name of the plan\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInstrument\n                        \n                        \n                    \n                \n            \n            \n                \nsetInstrument(instrument: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:80\n                \n            \n\n\n            \n                \n                    Set the instrument that plays on this track Track\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    instrument\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The instrument to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setNotes\n                        \n                        \n                    \n                \n            \n            \n                \nsetNotes(notes: Note[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:159\n                \n            \n\n\n            \n                \n                    Set the list of notes of the track Track\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    notes\n                                    \n                                                Note[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the list of notes to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setPlan\n                        \n                        \n                    \n                \n            \n            \n                \nsetPlan(plan: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:96\n                \n            \n\n\n            \n                \n                    Set the plan of this track Track\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The plan to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:196\n                \n            \n\n\n            \n                \n                    Return the track in string form\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        a stringified version of the track\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Measure } from \"./measure\";\nimport { Note } from \"./note\";\n\n/**\n* A class that represents a Track\n*/\nexport class Track {\n  /**\n   * The auto-increment value for the tracks' ids\n   */\n  private static nextId: number = 1;\n\n  /**\n   * The id of the track\n   */\n  private id: number;\n  /**\n   * The instrument used for the sound of the track\n   */\n  private instrument: string;\n  /**\n   * The sound plan of the track\n   * 0 -> \"Normal\" (not solo nor mute)\n   * 1 -> Solo\n   * 2 -> Mute\n   */\n  private plan: number;\n\n  /**\n   * A list of the measures in this track\n   */\n private measures: Measure[];\n\n  /**\n   * The notes inside the track\n   */\n  private notes: Note[];\n\n  /**\n   * The constructor : Create a new track whose attributes corresponds to the parameters. Its id is auto-incremented\n   *\n   * @param {string} instrument (optional) The {@link Track#instrument|instrument} of the track\n   * @param {number} plan (optional) The {@link Track#plan|plan sound} of the track. Must be 0, 1 or 2. If incorrect set to 0\n   * @param {Note[]} notes (optional) The {@link Track#notes|notes} of the track.\n   */\n  constructor(instrument: string = \"\", plan: number = 0, measures: Measure[] = new Array(), notes: Note[] = new Array()) {\n    this.id = Track.nextId;\n    this.measures = measures;\n    ++Track.nextId;\n\n    this.instrument = instrument;\n    if(plan  2 || plan % 1 != 0) {\n      plan = 0;\n    }\n    this.plan = plan;\n    //this.measures = measures;\n    this.notes = notes;\n  }\n\n  /**\n  * Get the id of the track {@link Track#id}\n  * @returns {number} the id of the track\n  */\n  getId(): number {\n    return this.id;\n  }\n\n  /**\n  * Get the instrument playing on this track {@link Track#instrument}\n  * @returns {String} The instrument playing\n  */\n  getInstrument(): string {\n    return this.instrument;\n  }\n\n  /**\n  * Set the instrument that plays on this track {@link Track#instrument}\n  * @param {String} instrument The instrument to set\n  */\n  setInstrument(instrument: string): void {\n    this.instrument = instrument;\n  }\n\n  /**\n  * Get the plan on this track\n  * @returns {number} The plan {@link Track#plan}\n  */\n  getPlan(): number {\n    return this.plan;\n  }\n\n  /**\n  * Set the plan of this track {@link Track#plan}\n  * @param {number} plan The plan to set\n  */\n  setPlan(plan: number): void {\n    if(plan >= 0 && plan ();\n  }\n\n  /**\n  * Delete all notes that begins in an interval of timecodes\n  * @param {number} from the start of the interval\n  * @param {number} to the end of the interval\n  */\n  deleteNotesBetweenTimecodes(from: number, to: number): void {\n    for(let i = 0 ; i = from && timecode \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TrackComponent.html":{"url":"components/TrackComponent.html","title":"component - TrackComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TrackComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/track/track.component.ts\n\n\n    \n        Description\n    \n    \n        A component that represents a single track. Added together, they are to form the rhythm\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-track\n            \n\n            \n                styleUrls\n                ./track.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./track.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isSelected\n                            \n                            \n                                modifiableInstrument\n                            \n                            \n                                modifyInstrument\n                            \n                            \n                                volume\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeSoundPlan\n                            \n                            \n                                endOfTrack\n                            \n                            \n                                getId\n                            \n                            \n                                mute\n                            \n                            \n                                selectTrack\n                            \n                            \n                                setSoloMuted\n                            \n                            \n                                setVolume\n                            \n                            \n                                toggleModifyInstrument\n                            \n                            \n                                toggleSoloMuted\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isPlaying\n                            \n                            \n                                signature\n                            \n                            \n                                soloMuted\n                            \n                            \n                                tempo\n                            \n                            \n                                track\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isPlaying\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:44\n                            \n                        \n                \n                    \n                        Is the track playing\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        signature\n                    \n                \n                \n                    \n                        Type :         Signature\n\n                    \n                \n                \n                    \n                        Default value : new Signature()\n                    \n                \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:82\n                            \n                        \n                \n                    \n                        The general signature of the track\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        soloMuted\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:60\n                            \n                        \n                \n                    \n                        Is the track to be played as solo\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        tempo\n                    \n                \n                \n                    \n                        Type :         Tempo\n\n                    \n                \n                \n                    \n                        Default value : new Tempo()\n                    \n                \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:87\n                            \n                        \n                \n                    \n                        The general tempo of the track\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        track\n                    \n                \n                \n                    \n                        Type :         Track\n\n                    \n                \n                \n                    \n                        Default value : new Track()\n                    \n                \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:27\n                            \n                        \n                \n                    \n                        The track\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            changeSoundPlan\n                        \n                        \n                    \n                \n            \n            \n                \nchangeSoundPlan()\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:112\n                \n            \n\n\n            \n                \n                    Change the track's Track\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            endOfTrack\n                        \n                        \n                    \n                \n            \n            \n                \nendOfTrack(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:204\n                \n            \n\n\n            \n                \n                    Event triggered when the track stops playing\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getId\n                        \n                        \n                    \n                \n            \n            \n                \ngetId()\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:196\n                \n            \n\n\n            \n                \n                    Get the id of the Track\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mute\n                        \n                        \n                    \n                \n            \n            \n                \nmute()\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:145\n                \n            \n\n\n            \n                \n                    Set the TrackComponent to 0\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selectTrack\n                        \n                        \n                    \n                \n            \n            \n                \nselectTrack()\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:184\n                \n            \n\n\n            \n                \n                    Toggle the TrackComponent condition\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSoloMuted\n                        \n                        \n                    \n                \n            \n            \n                \nsetSoloMuted(bool: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:138\n                \n            \n\n\n            \n                \n                    Set TrackComponent condition\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bool\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new value of the condition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setVolume\n                        \n                        \n                    \n                \n            \n            \n                \nsetVolume(volume: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:153\n                \n            \n\n\n            \n                \n                    Set the TrackComponent to a specific amount\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    volume\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new volume to apply to the track. Note that this should be set between [0;1]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleModifyInstrument\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleModifyInstrument()\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:165\n                \n            \n\n\n            \n                \n                    Toggle TrackComponent condition\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleSoloMuted\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleSoloMuted()\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:130\n                \n            \n\n\n            \n                \n                    Toggle TrackComponent condition\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isSelected\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:70\n                            \n                        \n\n                \n                    \n                        Is the track selected\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modifiableInstrument\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:32\n                            \n                        \n\n                \n                    \n                        The instrument played for the track\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modifyInstrument\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:37\n                            \n                        \n\n                \n                    \n                        Is TrackComponent being modified\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            volume\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:55\n                            \n                        \n\n                \n                    \n                        The volume of the track\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, OnChanges, SimpleChanges, Input, EventEmitter, Output, ViewChild//, ElementRef\n } from \"@angular/core\";\n\nimport { Track } from \"../classes/track\";\nimport { Note } from \"../classes/note\";\nimport { NoteRepresentation } from \"../classes/note-representation\";\n//import { SoundPlayer } from \"../classes/sound-player\";\nimport { SoundPlayerComponent } from \"../sound-player/sound-player.component\";\n\n\nimport { Signature } from \"../classes/signature\";\nimport { Tempo } from \"../classes/tempo\";\n\n/**\n* A component that represents a single track. Added together, they are to form the rhythm\n*/\n@Component({\n  selector: \"app-track\",\n  templateUrl: \"./track.component.html\",\n  styleUrls: [\"./track.component.sass\"]\n})\nexport class TrackComponent implements OnInit, OnChanges {\n\n  /**\n  * The track\n  */\n  @Input() track: Track = new Track();\n\n  /**\n  * The instrument played for the track\n  */\n  modifiableInstrument: string = \"\";\n\n  /**\n  * Is {@link TrackComponent#modifiableInstrument} being modified\n  */\n  modifyInstrument = false;\n\n//  soundPlayer: SoundPlayer = new SoundPlayer(\"exampleout.mid.wav\");\n\n  /**\n  * Is the track playing\n  */\n  @Input() isPlaying: boolean = false;\n\n  /**\n  * @ignore\n  */\n  @Output() isPlayingOutput: EventEmitter = new EventEmitter();\n\n    // Must be between 0 (mute) and 1 (max)\n  /**\n  * The volume of the track\n  */\n  volume: number = 1;\n\n  /**\n  * Is the track to be played as solo\n  */\n  @Input() soloMuted: boolean = false;\n\n  /**\n  * @ignore\n  */\n  @Output() isSolo: EventEmitter = new EventEmitter();\n\n  /**\n  * Is the track selected\n  */\n  isSelected: boolean = false;\n\n  /**\n  * @ignore\n  */\n  @Output() selectedTrack: EventEmitter = new EventEmitter();\n\n  //@ViewChild('instruInput', { static: true }) intrumentInput: ElementRef;\n\n  /**\n  * The general signature of the track\n  */\n  @Input() signature: Signature = new Signature();\n\n  /**\n  * The general tempo of the track\n  */\n  @Input() tempo: Tempo = new Tempo();\n\n\n  //test: NoteRepresentation = new NoteRepresentation([\"8N\"], null);\n\n  /**\n  * @ignore\n  */\n  constructor() { }\n\n  /**\n  * @ignore\n  */\n  ngOnInit(): void {\n    this.modifiableInstrument = this.track.getInstrument();\n  }\n  /**\n  * @ignore\n  */\n  ngOnChanges(changes: SimpleChanges): void { }\n\n\n  /**\n  * Change the track's {@link Track#plan}\n  */\n  changeSoundPlan(): void {\n      // Change the number of the selected sound plan\n    this.track.setPlan((this.track.getPlan() + 1) % 3);\n\n      // TODO: change the sound track behaviour\n    if(this.track.getPlan() == 2) {\n      this.mute();\n      this.isSolo.emit(false);\n    } else if(this.track.getPlan() == 0) {\n      this.volume = 1;\n    } else {\n      this.isSolo.emit(true);\n    }\n  }\n\n  /**\n  * Toggle {@link TrackComponent#soloMuted} condition\n  */\n  toggleSoloMuted(): void {\n    this.soloMuted = !this.soloMuted;\n  }\n\n  /**\n  * Set {@link TrackComponent#soloMuted} condition\n  * @param {boolean} bool The new value of the condition\n  */\n  setSoloMuted(bool: boolean): void {\n    this.soloMuted = bool;\n  }\n\n  /**\n  * Set the {@link TrackComponent#volume} to 0\n  */\n  mute(): void {\n    this.volume = 0;\n  }\n\n  /**\n  * Set the {@link TrackComponent#volume} to a specific amount\n  * @param {number} volume The new volume to apply to the track. Note that this should be set between [0;1]\n  */\n  setVolume(volume: number): void {\n    if(volume >= 0 && volume {\n        this.intrumentInput.nativeElement.focus();\n      }, 0);*/\n    }\n\n      // TODO: change the sound track's behaviour (with the musical librairy part)\n  }\n\n  /**\n  * Toggle the {@link TrackComponent#isSelected} condition\n  */\n  selectTrack(): void {\n    this.isSelected = !this.isSelected;\n    if(this.isSelected) {\n      this.selectedTrack.emit(this.track.getId());\n    } else {\n      this.selectedTrack.emit(null);\n    }\n  }\n\n  /**\n  * Get the id of the Track\n  */\n  getId(): number {\n    return this.track.getId();\n  }\n\n  /**\n  * Event triggered when the track stops playing\n  * @param {Event} evt The end of track event\n  */\n  endOfTrack(event: any){\n    this.isPlaying = false;\n    this.isPlayingOutput.emit(false);\n  }\n\n}\n\n    \n\n    \n        \n\n  \n\n  \n    \n    \n    \n  \n  \n    \n      \n      \n    \n    \n    -->\n    -->\n  \n  \n      {{ track.getInstrument() }}\n      Défaut\n    \n      \n      ➤\n    \n  \n\n\n    \n\n    \n                \n                    ./track.component.sass\n                \n                @use \"~sass/vars\"\n\n$HEIGHT: 3rem\n\n$INSTRUMENT_WIDTH: 9rem\n$INSTR_INPUT_HEIGHT: 2rem\n\n$BORDER_WIDTH: 0.25rem\n\n@mixin create-gradient($property, $exterior-color, $interior-color)\n  #{$property}: linear-gradient(to right, $exterior-color, $interior-color 5%, $interior-color 87%, $exterior-color)\n\n%absVertCenteredInteractive\n  cursor: pointer\n  position: absolute\n  top: 50%\n  transform: translateY(-50%)\n\n:host\n  display: block\n  width: 100%\n  max-width: 100%\n\n  &.selected>article\n    @include create-gradient(border-image-source, vars.$TRANSPARENT_ORANGE, vars.$ORANGE)\n    border-image-slice: 100% 0 100% 0\n    border-image-width: $BORDER_WIDTH 0 $BORDER_WIDTH 0\n    border-image-repeat: stretch\n\n  &.recording>article\n    @include create-gradient(border-image-source, vars.$TRANSPARENT_RED, vars.$RED)\n\n\narticle\n  display: flex\n  height: $HEIGHT\n  width: 100%\n  max-width: 100%\n  @include create-gradient(background-image, vars.$TRANSPARENT_MIDDLE_DARK_GRAY, vars.$MIDDLE_DARK_GRAY)\n  margin: 0.75rem 0\n  padding: 0 0.5rem\n\n  background-clip: padding-box\n\n  border-style: solid\n  border-width: $BORDER_WIDTH 0\n  border-color: transparent\n\n  &>div\n    height: 100%\n\n.sound-plan\n  position: relative\n  justify-content: center\n  width: $HEIGHT\n  flex-shrink: 0\n  //margin-right: $BORDER_WIDTH\n\n\n  img\n    @extend %absVertCenteredInteractive\n\n.track-content\n  flex-grow: 1\n  margin: 0 $BORDER_WIDTH\n  display: flex\n  align-items: center\n  overflow-x: auto\n  scroll-behavior: smooth\n  box-sizing: border-box\n\n  &::-webkit-scrollbar\n    height: 0px\n    width: 0px\n    background: transparent\n\n  .content-wrapper\n    position: relative\n    //flex-grow: 1\n    height: 80%\n    //max-width: 100%\n    display: flex\n    justify-content: flex-start\n    align-items: center\n    border-left: 0.2rem solid vars.$LIGHT_GRAY\n    background-image: linear-gradient(vars.$LIGHT_GRAY, vars.$LIGHT-GRAY)\n    background-size: 100% 0.2rem\n    background-repeat: no-repeat\n    background-position: center\n\n    .cursor\n      position: absolute\n      top: 50%\n      transform: translateY(-50%)\n      height: 100%\n      width: 0.2rem\n      background-color: vars.$ORANGE\n\n  img\n    display: inline-block\n    max-height: $HEIGHT\n    max-width: $HEIGHT\n    height: 80%\n    width: auto\n\n.instrument\n  flex-shrink: 0\n  position: relative\n  min-width: $INSTRUMENT_WIDTH\n\n  div, span\n    @extend %absVertCenteredInteractive\n  &>div\n    cursor: default\n    width: 100%\n    height: $INSTR_INPUT_HEIGHT\n    display: flex\n\n    input\n      flex-grow: 1\n      max-width: $INSTRUMENT_WIDTH - $INSTR_INPUT_HEIGHT - 1rem\n      border-top-right-radius: 0\n      border-bottom-right-radius: 0\n    button\n      height: 100%\n      width: $INSTR_INPUT_HEIGHT\n      background: vars.$DEEP_DARK_GRAY\n      border-top-left-radius: 0\n      border-bottom-left-radius: 0\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                -->    -->          {{ track.getInstrument() }}      Défaut                ➤      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TrackComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/classes/measure.ts\n            \n            class\n            Measure\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/classes/metronome.ts\n            \n            function\n            getPath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/classes/metronome.ts\n            \n            function\n            getSoundNameByPath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/classes/metronome.ts\n            \n            function\n            values\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/classes/note-representation.ts\n            \n            class\n            AddOn\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/app/classes/note-representation.ts\n            \n            class\n            NoteRepresentation\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/app/classes/note.ts\n            \n            class\n            Note\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/classes/signature.ts\n            \n            class\n            Signature\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/classes/tempo.ts\n            \n            class\n            Tempo\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/classes/track.ts\n            \n            class\n            Track\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/app/create-track/create-track.component.ts\n            \n            component\n            CreateTrackComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/dashboard/dashboard.component.ts\n            \n            component\n            DashboardComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/enums/basic-note.ts\n            \n            function\n            getImgPath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/enums/basic-note.ts\n            \n            function\n            getJSON\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/enums/basic-note.ts\n            \n            function\n            getName\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/enums/basic-note.ts\n            \n            function\n            getNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/enums/basic-note.ts\n            \n            function\n            values\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/enums/binary-note.ts\n            \n            function\n            getRepresentation\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/export-menu/export-menu.component.ts\n            \n            component\n            ExportMenuComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/main-menu/main-menu.component.ts\n            \n            component\n            MainMenuComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/measure/measure.component.ts\n            \n            component\n            MeasureComponent\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/metronome-sound/metronome-sound.component.ts\n            \n            component\n            MetronomeSoundComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/metronome/metronome.component.ts\n            \n            component\n            MetronomeComponent\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/app/note/note.component.ts\n            \n            component\n            NoteComponent\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/playbar/playbar.component.ts\n            \n            component\n            PlaybarComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/rhythm/rhythm.component.ts\n            \n            component\n            RhythmComponent\n            \n                100 %\n                (28/28)\n            \n        \n        \n            \n                \n                src/app/save-menu/save-menu.component.ts\n            \n            component\n            SaveMenuComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/signature/signature.component.ts\n            \n            component\n            SignatureComponent\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/app/sound-player/sound-player.component.ts\n            \n            component\n            SoundPlayerComponent\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/app/tempo/tempo.component.ts\n            \n            component\n            TempoComponent\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/track/track.component.ts\n            \n            component\n            TrackComponent\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~11.0.4\n        \n            @angular/common : ~11.0.4\n        \n            @angular/compiler : ~11.0.4\n        \n            @angular/core : ~11.0.4\n        \n            @angular/forms : ~11.0.4\n        \n            @angular/platform-browser : ~11.0.4\n        \n            @angular/platform-browser-dynamic : ~11.0.4\n        \n            @angular/router : ~11.0.4\n        \n            @types/events : ^3.0.0\n        \n            events : ^3.2.0\n        \n            rxjs : ~6.6.0\n        \n            tslib : ^2.0.0\n        \n            zone.js : ~0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BasicNote   (src/.../basic-note.ts)\n                        \n                        \n                            BinaryNote   (src/.../binary-note.ts)\n                        \n                        \n                            Intrument   (src/.../instrument.ts)\n                        \n                        \n                            Sound   (src/.../metronome.ts)\n                        \n                        \n                            TernaryNote   (src/.../ternary-note.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/enums/basic-note.ts\n    \n        \n            \n                \n                    \n                        \n                        BasicNote\n                    \n                \n                    \n                        \n                            The enum that stores the primal notes from the whole note to sixteen note\n\n                        \n                    \n                        \n                            \n                                 WHOLE_NOTE\n                            \n                        \n                        \n                            \n                                Value : {\"number\": 1, \"name\": \"Whole note\", \"img\": \"whole-note.svg\"}\n                            \n                        \n                        \n                            \n                                 HALF_NOTE\n                            \n                        \n                        \n                            \n                                Value : {\"number\": 2, \"name\": \"Half note\", \"img\": \"half-note.svg\"}\n                            \n                        \n                        \n                            \n                                 QUARTER_NOTE\n                            \n                        \n                        \n                            \n                                Value : {\"number\": 4, \"name\": \"Quarter note\", \"img\": \"quarter-note.svg\"}\n                            \n                        \n                        \n                            \n                                 HEIGHT_NOTE\n                            \n                        \n                        \n                            \n                                Value : {\"number\": 8, \"name\": \"Height note\", \"img\": \"height-note.svg\"}\n                            \n                        \n                        \n                            \n                                 SIXTEEN_NOTE\n                            \n                        \n                        \n                            \n                                Value : {\"number\": 16, \"name\": \"Sixteen note\", \"img\": \"sixteen-note.svg\"}\n                            \n                        \n            \n        \n\n    src/app/enums/binary-note.ts\n    \n        \n            \n                \n                    \n                        \n                        BinaryNote\n                    \n                \n                    \n                        \n                            This enum list every note type that can be visually created.\nVALUES NOTATION :\n   All values start by _ due to the fact that a value cannot start by a number.\n   R -> rest\n   D -> dotted\n   TR -> triplet\n   1N -> whole note\n   2N -> half note\n   4N -> quarter note\n   8N -> eight note\n   16N -> sixteenth note\n   A number not followed by a N but by an _ specify the number of linked notes after it\n   following themselves. ex : 28N = two eight note or eight note eight note.\n\n                        \n                    \n                        \n                            \n                                 _4N\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 _4N_TR\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 _4_8N\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n                        \n                            \n                                 _2_8N\n                            \n                        \n                        \n                            \n                                Value : 4\n                            \n                        \n                        \n                            \n                                 _2_16N\n                            \n                        \n                        \n                            \n                                Value : 5\n                            \n                        \n                        \n                            \n                                 _16N_8N_16N\n                            \n                        \n                        \n                            \n                                Value : 6\n                            \n                        \n                        \n                            \n                                 _8N_2_16N\n                            \n                        \n                        \n                            \n                                Value : 7\n                            \n                        \n                        \n                            \n                                 _2_16N_8N\n                            \n                        \n                        \n                            \n                                Value : 8\n                            \n                        \n                        \n                            \n                                 _4_16N\n                            \n                        \n                        \n                            \n                                Value : 9\n                            \n                        \n                        \n                            \n                                 _1N_R\n                            \n                        \n                        \n                            \n                                Value : 10\n                            \n                        \n                        \n                            \n                                 _2N_R\n                            \n                        \n                        \n                            \n                                Value : 11\n                            \n                        \n                        \n                            \n                                 _4N_R\n                            \n                        \n                        \n                            \n                                Value : 12\n                            \n                        \n                        \n                            \n                                 _8N_R\n                            \n                        \n                        \n                            \n                                Value : 13\n                            \n                        \n                        \n                            \n                                 _16N_R\n                            \n                        \n                        \n                            \n                                Value : 14\n                            \n                        \n            \n        \n\n    src/app/enums/instrument.ts\n    \n        \n            \n                \n                    \n                        \n                        Intrument\n                    \n                \n                        \n                            \n                                 ACOUSTIC_GRAND_PIANO\n                            \n                        \n                        \n                            \n                                 BRIGHT_ACOUSTIC_PIANO\n                            \n                        \n                        \n                            \n                                 ELECTRIC_GRAND_PIANO\n                            \n                        \n                        \n                            \n                                 HONKYTONK_PIANO\n                            \n                        \n                        \n                            \n                                 ELECTRIC_PIANO_1\n                            \n                        \n                        \n                            \n                                 ELECTRIC_PIANO_2\n                            \n                        \n                        \n                            \n                                 HARPSICHORD\n                            \n                        \n                        \n                            \n                                 CLAVINET\n                            \n                        \n                        \n                            \n                                 CELESTA\n                            \n                        \n                        \n                            \n                                 GLOCKENSPIEL\n                            \n                        \n                        \n                            \n                                 MUSIC_BOX\n                            \n                        \n                        \n                            \n                                 VIBRAPHONE\n                            \n                        \n                        \n                            \n                                 MARIMBA\n                            \n                        \n                        \n                            \n                                 XYLOPHONE\n                            \n                        \n                        \n                            \n                                 TUBULAR_BELLS\n                            \n                        \n                        \n                            \n                                 DULCIMER\n                            \n                        \n                        \n                            \n                                 DRAWBAR_ORGAN\n                            \n                        \n                        \n                            \n                                 PERCUSSIVE_ORGAN\n                            \n                        \n                        \n                            \n                                 ROCK_ORGAN\n                            \n                        \n                        \n                            \n                                 CHURCH_ORGAN\n                            \n                        \n                        \n                            \n                                 REED_ORGAN\n                            \n                        \n                        \n                            \n                                 ACCORDION\n                            \n                        \n                        \n                            \n                                 HARMONICA\n                            \n                        \n                        \n                            \n                                 TANGO_ACCORDION\n                            \n                        \n                        \n                            \n                                 ACOUSTIC_GUITAR_NYLON\n                            \n                        \n                        \n                            \n                                 ACOUSTIC_GUITAR_STEEL\n                            \n                        \n                        \n                            \n                                 ELECTRIC_GUITAR_JAZZ\n                            \n                        \n                        \n                            \n                                 ELECTRIC_GUITAR_CLEAN\n                            \n                        \n                        \n                            \n                                 ELECTRIC_GUITAR_MUTED\n                            \n                        \n                        \n                            \n                                 OVERDRIVEN_GUITAR\n                            \n                        \n                        \n                            \n                                 DISTORTION_GUITAR\n                            \n                        \n                        \n                            \n                                 GUITAR_HARMONICS\n                            \n                        \n                        \n                            \n                                 ACOUSTIC_BASS\n                            \n                        \n                        \n                            \n                                 ELECTRIC_BASS_FINGER\n                            \n                        \n                        \n                            \n                                 ELECTRIC_BASS_PICK\n                            \n                        \n                        \n                            \n                                 FRETLESS_BASS\n                            \n                        \n                        \n                            \n                                 SLAP_BASS_1\n                            \n                        \n                        \n                            \n                                 SLAP_BASS_2\n                            \n                        \n                        \n                            \n                                 SYNTH_BASS_1\n                            \n                        \n                        \n                            \n                                 SYNTH_BASS_2\n                            \n                        \n                        \n                            \n                                 VIOLIN\n                            \n                        \n                        \n                            \n                                 VIOLA\n                            \n                        \n                        \n                            \n                                 CELLO\n                            \n                        \n                        \n                            \n                                 CONTRABASS\n                            \n                        \n                        \n                            \n                                 TREMOLO_STRINGS\n                            \n                        \n                        \n                            \n                                 PIZZICATO_STRINGS\n                            \n                        \n                        \n                            \n                                 ORCHESTRAL_HARP\n                            \n                        \n                        \n                            \n                                 TIMPANI\n                            \n                        \n                        \n                            \n                                 STRING_ENSEMBLE_1\n                            \n                        \n                        \n                            \n                                 STRING_ENSEMBLE_2\n                            \n                        \n                        \n                            \n                                 SYNTH_STRINGS_1\n                            \n                        \n                        \n                            \n                                 SYNTH_STRINGS_2\n                            \n                        \n                        \n                            \n                                 CHOIR_AAHS\n                            \n                        \n                        \n                            \n                                 VOICE_OOHS\n                            \n                        \n                        \n                            \n                                 SYNTH_CHOIR\n                            \n                        \n                        \n                            \n                                 ORCHESTRA_HIT\n                            \n                        \n                        \n                            \n                                 TRUMPET\n                            \n                        \n                        \n                            \n                                 TROMBONE\n                            \n                        \n                        \n                            \n                                 TUBA\n                            \n                        \n                        \n                            \n                                 MUTED_TRUMPET\n                            \n                        \n                        \n                            \n                                 FRENCH_HORN\n                            \n                        \n                        \n                            \n                                 BRASS_SECTION\n                            \n                        \n                        \n                            \n                                 SYNTH_BRASS_1\n                            \n                        \n                        \n                            \n                                 SYNTH_BRASS_2\n                            \n                        \n                        \n                            \n                                 SOPRANO_SAX\n                            \n                        \n                        \n                            \n                                 ALTO_SAX\n                            \n                        \n                        \n                            \n                                 TENOR_SAX\n                            \n                        \n                        \n                            \n                                 BARITONE_SAX\n                            \n                        \n                        \n                            \n                                 OBOE\n                            \n                        \n                        \n                            \n                                 ENGLISH_HORN\n                            \n                        \n                        \n                            \n                                 BASSOON\n                            \n                        \n                        \n                            \n                                 CLARINET\n                            \n                        \n                        \n                            \n                                 PICCOLO\n                            \n                        \n                        \n                            \n                                 FLUTE\n                            \n                        \n                        \n                            \n                                 RECORDER\n                            \n                        \n                        \n                            \n                                 PAN_FLUTE\n                            \n                        \n                        \n                            \n                                 BLOWN_BOTTLE\n                            \n                        \n                        \n                            \n                                 SHAKUHACHI\n                            \n                        \n                        \n                            \n                                 WHISTLE\n                            \n                        \n                        \n                            \n                                 OCARINA\n                            \n                        \n                        \n                            \n                                 LEAD_1_SQUARE\n                            \n                        \n                        \n                            \n                                 LEAD_2_SAWTOOTH\n                            \n                        \n                        \n                            \n                                 LEAD_3_CALLIOPE\n                            \n                        \n                        \n                            \n                                 LEAD_4_CHIFF\n                            \n                        \n                        \n                            \n                                 LEAD_5_CHARANG\n                            \n                        \n                        \n                            \n                                 LEAD_6_VOICE\n                            \n                        \n                        \n                            \n                                 LEAD_7_FIFTHS\n                            \n                        \n                        \n                            \n                                 LEAD_8_BASS_AND_LEAD\n                            \n                        \n                        \n                            \n                                 PAD_1_NEW_AGE\n                            \n                        \n                        \n                            \n                                 PAD_2_WARM\n                            \n                        \n                        \n                            \n                                 PAD_3_POLYSYNTH\n                            \n                        \n                        \n                            \n                                 PAD_4_CHOIR\n                            \n                        \n                        \n                            \n                                 PAD_5_BOWED\n                            \n                        \n                        \n                            \n                                 PAD_6_METALLIC\n                            \n                        \n                        \n                            \n                                 PAD_7_HALO\n                            \n                        \n                        \n                            \n                                 PAD_8_SWEEP\n                            \n                        \n                        \n                            \n                                 FX_1_RAIN\n                            \n                        \n                        \n                            \n                                 FX_2_SOUNDTRACK\n                            \n                        \n                        \n                            \n                                 FX_3_CRYSTAL\n                            \n                        \n                        \n                            \n                                 FX_4_ATMOSPHERE\n                            \n                        \n                        \n                            \n                                 FX_5_BRIGHTNESS\n                            \n                        \n                        \n                            \n                                 FX_6_GOBLINS\n                            \n                        \n                        \n                            \n                                 FX_7_ECHOES\n                            \n                        \n                        \n                            \n                                 FX_8_SCIFI\n                            \n                        \n                        \n                            \n                                 SITAR\n                            \n                        \n                        \n                            \n                                 BANJO\n                            \n                        \n                        \n                            \n                                 SHAMISEN\n                            \n                        \n                        \n                            \n                                 KOTO\n                            \n                        \n                        \n                            \n                                 KALIMBA\n                            \n                        \n                        \n                            \n                                 BAGPIPE\n                            \n                        \n                        \n                            \n                                 FIDDLE\n                            \n                        \n                        \n                            \n                                 SHANAI\n                            \n                        \n                        \n                            \n                                 TINKLE_BELL\n                            \n                        \n                        \n                            \n                                 AGOGO\n                            \n                        \n                        \n                            \n                                 STEEL_DRUMS\n                            \n                        \n                        \n                            \n                                 WOODBLOCK\n                            \n                        \n                        \n                            \n                                 TAIKO_DRUM\n                            \n                        \n                        \n                            \n                                 MELODIC_TOM\n                            \n                        \n                        \n                            \n                                 SYNTH_DRUM\n                            \n                        \n                        \n                            \n                                 REVERSE_CYMBAL\n                            \n                        \n                        \n                            \n                                 GUITAR_FRET_NOISE\n                            \n                        \n                        \n                            \n                                 BREATH_NOISE\n                            \n                        \n                        \n                            \n                                 SEASHORE\n                            \n                        \n                        \n                            \n                                 BIRD_TWEET\n                            \n                        \n                        \n                            \n                                 TELEPHONE_RING\n                            \n                        \n                        \n                            \n                                 HELICOPTER\n                            \n                        \n                        \n                            \n                                 APPLAUSE\n                            \n                        \n                        \n                            \n                                 GUNSHOT\n                            \n                        \n            \n        \n\n    src/app/classes/metronome.ts\n    \n        \n            \n                \n                    \n                        \n                        Sound\n                    \n                \n                    \n                        \n                            An enum of the different sounds possible\n\n                        \n                    \n                        \n                            \n                                 TOC\n                            \n                        \n                        \n                            \n                                Value : ../../assets/sounds/metronome/toc.wav\n                            \n                        \n                        \n                            \n                                 CLOCK_1\n                            \n                        \n                        \n                            \n                                Value : ../../assets/sounds/metronome/clock-1.wav\n                            \n                        \n                        \n                            \n                                 CLOCK_2\n                            \n                        \n                        \n                            \n                                Value : ../../assets/sounds/metronome/clock-2.wav\n                            \n                        \n            \n        \n\n    src/app/enums/ternary-note.ts\n    \n        \n            \n                \n                    \n                        \n                        TernaryNote\n                    \n                \n                    \n                        \n                            This enum list every ternary note that can be visually created.\nVALUES NOTATION :\n   All values start by _ due to the fact that a value cannot start by a number.\n   R -> rest\n   D -> dotted\n   DU -> duplet\n   2N -> half note\n   4N -> quarter note\n   8N -> eight note\n   16N -> sixteenth note\n   A number not followed by a N but by an _ specify the number of linked notes after it\n   following themselves. ex : 28N = two eight note or eight note eight note.\n\n                        \n                    \n                        \n                            \n                                 _4N\n                            \n                        \n                        \n                            \n                                 _D_4N\n                            \n                        \n                        \n                            \n                                 _8N\n                            \n                        \n                        \n                            \n                                 _3_8N\n                            \n                        \n                        \n                            \n                                 _2_16N\n                            \n                        \n                        \n                            \n                                 _6_16N\n                            \n                        \n                        \n                            \n                                 _8N_4_16N\n                            \n                        \n                        \n                            \n                                 _4_16N_8N\n                            \n                        \n                        \n                            \n                                 _8N_2_16N_8N\n                            \n                        \n                        \n                            \n                                 _8N_16N_8N\n                            \n                        \n                        \n                            \n                                 _2_8N_2_16N\n                            \n                        \n                        \n                            \n                                 _2_16N_2_8N\n                            \n                        \n                        \n                            \n                                 _D_8N_3_16N\n                            \n                        \n                        \n                            \n                                 _3_16N_D_8N\n                            \n                        \n                        \n                            \n                                 _2_16N_8N_2_16N\n                            \n                        \n                        \n                            \n                                 _DU\n                            \n                        \n                        \n                            \n                                 _8N_R\n                            \n                        \n                        \n                            \n                                 _16N_R\n                            \n                        \n                        \n                            \n                                 _D_2N_R\n                            \n                        \n                        \n                            \n                                 _D_4N_R\n                            \n                        \n                        \n                            \n                                 _D_8N_R\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getImgPath   (src/.../basic-note.ts)\n                        \n                        \n                            getJSON   (src/.../basic-note.ts)\n                        \n                        \n                            getName   (src/.../basic-note.ts)\n                        \n                        \n                            getNumber   (src/.../basic-note.ts)\n                        \n                        \n                            getPath   (src/.../metronome.ts)\n                        \n                        \n                            getRepresentation   (src/.../binary-note.ts)\n                        \n                        \n                            getSoundNameByPath   (src/.../metronome.ts)\n                        \n                        \n                            values   (src/.../metronome.ts)\n                        \n                        \n                            values   (src/.../basic-note.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/enums/basic-note.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getImgPath\n                        \n                        \n                    \n                \n            \n            \n                \ngetImgPath(note)\n                \n            \n\n\n\n\n            \n                \n                    Get the path to the image of the note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note that we want the image path to\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The complete path to the image of the note, from the app repertory\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getJSON\n                        \n                        \n                    \n                \n            \n            \n                \ngetJSON(note)\n                \n            \n\n\n\n\n            \n                \n                    Get the value of the BasicNote on its JSON form\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note that we want the JSON value of\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The JSON associated to the note. It's form is {number: {number}, name: {string}, img: {string}}, were img is the name of the image with it's extension, that doesn't include the path to the image\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getName\n                        \n                        \n                    \n                \n            \n            \n                \ngetName(note)\n                \n            \n\n\n\n\n            \n                \n                    Get the name of the note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note that we want the name of\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The name of the note, in english, starting with a capital..\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNumber\n                        \n                        \n                    \n                \n            \n            \n                \ngetNumber(note)\n                \n            \n\n\n\n\n            \n                \n                    Get the number associated to the note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note that we want the number of\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The number of the note, as the denominator of it's time duration. Whole note is 1, half note 2...\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            values\n                        \n                        \n                    \n                \n            \n            \n                \nvalues()\n                \n            \n\n\n\n\n            \n                \n                    Get all the BasicNote values\nTO CHANGE FOR SOMETHING DYNAMIC\n\n\n                    \n                    \n                    \n                        Returns :         BasicNote[]\n\n                    \n                    \n                        All the possible BasicNote's values\n\n                    \n                \n            \n        \n    \n    src/app/classes/metronome.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getPath\n                        \n                        \n                    \n                \n            \n            \n                \ngetPath(soundName)\n                \n            \n\n\n\n\n            \n                \n                    Get the path of a sound using its name\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    soundName\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Metronome.Sound\n\n                    \n                    \n                        The path to the sound\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSoundNameByPath\n                        \n                        \n                    \n                \n            \n            \n                \ngetSoundNameByPath(soundPath)\n                \n            \n\n\n\n\n            \n                \n                    Get the name of a sound using its path\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    soundPath\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Tha path to the sound\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         String\n\n                    \n                    \n                        The name of the sound\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            values\n                        \n                        \n                    \n                \n            \n            \n                \nvalues()\n                \n            \n\n\n\n\n            \n                \n                    Get all the possible sounds names\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        A list of the possible sound's name\n\n                    \n                \n            \n        \n    \n    src/app/enums/binary-note.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getRepresentation\n                        \n                        \n                    \n                \n            \n            \n                \ngetRepresentation(note)\n                \n            \n\n\n\n\n            \n                \n                    Get the representation of the binary note.\nTO COMPLETE\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note we wants the representation of\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     NoteRepresentation | null\n\n                    \n                    \n                        The {\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPolyrythmique\nThis project was generated with Angular CLI version 11.0.4.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCreateTrackComponent\n\nCreateTrackComponent\n\nAppModule -->\n\nCreateTrackComponent->AppModule\n\n\n\n\n\nDashboardComponent\n\nDashboardComponent\n\nAppModule -->\n\nDashboardComponent->AppModule\n\n\n\n\n\nExportMenuComponent\n\nExportMenuComponent\n\nAppModule -->\n\nExportMenuComponent->AppModule\n\n\n\n\n\nMainMenuComponent\n\nMainMenuComponent\n\nAppModule -->\n\nMainMenuComponent->AppModule\n\n\n\n\n\nMeasureComponent\n\nMeasureComponent\n\nAppModule -->\n\nMeasureComponent->AppModule\n\n\n\n\n\nMetronomeComponent\n\nMetronomeComponent\n\nAppModule -->\n\nMetronomeComponent->AppModule\n\n\n\n\n\nMetronomeSoundComponent\n\nMetronomeSoundComponent\n\nAppModule -->\n\nMetronomeSoundComponent->AppModule\n\n\n\n\n\nNoteComponent\n\nNoteComponent\n\nAppModule -->\n\nNoteComponent->AppModule\n\n\n\n\n\nPlaybarComponent\n\nPlaybarComponent\n\nAppModule -->\n\nPlaybarComponent->AppModule\n\n\n\n\n\nRhythmComponent\n\nRhythmComponent\n\nAppModule -->\n\nRhythmComponent->AppModule\n\n\n\n\n\nSaveMenuComponent\n\nSaveMenuComponent\n\nAppModule -->\n\nSaveMenuComponent->AppModule\n\n\n\n\n\nSignatureComponent\n\nSignatureComponent\n\nAppModule -->\n\nSignatureComponent->AppModule\n\n\n\n\n\nSoundPlayerComponent\n\nSoundPlayerComponent\n\nAppModule -->\n\nSoundPlayerComponent->AppModule\n\n\n\n\n\nTempoComponent\n\nTempoComponent\n\nAppModule -->\n\nTempoComponent->AppModule\n\n\n\n\n\nTrackComponent\n\nTrackComponent\n\nAppModule -->\n\nTrackComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    16 Components\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        6 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AddOnJson   (src/.../note-representation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/classes/note-representation.ts\n    \n    \n        \n            \n                \n                    \n                    AddOnJson\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n                \n                    \n                        The environment variables when the application is in production\n\n                    \n                \n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false,\n\n  pathsFromApp: {\n    img: \"../assets/images/\",\n    rythmsImg: \"../assets/images/rythms/\",\n    notesImg: \"../assets/images/notes/\",\n    sounds: \"../assets/sounds/\"\n  }\n}\n                        \n                    \n\n                \n                    \n                        The environment variables when the application is in debug mode\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
