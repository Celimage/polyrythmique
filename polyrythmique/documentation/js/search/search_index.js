var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddOn.html",[0,0.074,1,2.149]],["body/classes/AddOn.html",[0,0.103,1,4.066,2,1.208,3,0.289,4,0.256,5,0.256,6,3.801,7,1.741,8,0.322,9,3.251,10,2.058,11,3.804,12,3.598,13,0.572,14,1.022,15,2.521,16,1.412,17,5.215,18,0.807,19,3.251,20,4.17,21,3.854,22,3.854,23,0.88,24,3.235,25,1.816,26,1.005,27,3.854,28,1.202,29,0.03,30,0.615,31,0.666,32,1.202,33,2.66,34,3.235,35,3.235,36,3.235,37,4.426,38,2.66,39,1.094,40,2.66,41,2.522,42,4.16,43,3.235,44,3.235,45,4.17,46,3.235,47,2.66,48,1.697,49,0.92,50,3.235,51,2.66,52,3.235,53,0.289,54,1.573,55,1.951,56,0.418,57,3.324,58,1.743,59,1.623,60,3.804,61,3.804,62,3.804,63,3.804,64,1.72,65,2.233,66,2.233,67,1.115,68,1.784,69,2.233,70,1.741,71,1.741,72,2.441,73,0.744,74,2.278,75,2.233,76,1.57,77,2.233,78,1.951,79,1.951,80,4.033,81,2.827,82,1.313,83,0.885,84,3.235,85,2.233,86,0.959,87,1.573,88,3.418,89,2.233,90,1.951,91,3.235,92,1.208,93,0.875,94,2.233,95,2.233,96,3.235,97,2.233,98,1.573,99,1.951,100,2.233,101,3.235,102,2.233,103,1.313,104,0.885,105,2.233,106,1.573,107,1.022,108,3.804,109,2.233,110,2.233,111,1.975,112,2.396,113,3.235,114,2.522,115,3.235,116,1.741,117,2.233,118,3.235,119,2.233,120,3.804,121,2.233,122,3.804,123,2.233,124,2.233,125,2.233,126,1.113,127,2.233,128,2.233,129,3.324,130,2.233,131,2.233,132,3.235,133,2.233,134,2.233,135,2.233,136,3.235,137,2.233,138,2.233,139,0.653,140,2.233,141,0.431,142,1.951,143,2.233,144,2.233,145,0.012,146,0.017,147,0.012]],["title/components/AppComponent.html",[148,0.014,149,0.582]],["body/components/AppComponent.html",[0,0.076,3,0.365,4,0.324,5,0.324,8,0.407,13,0.365,14,1.204,25,1.299,26,0.804,29,0.03,30,0.493,31,0.55,53,0.365,56,0.493,68,1.63,76,1.204,103,2.241,126,1.114,139,0.825,141,0.736,145,0.015,146,0.02,147,0.015,148,0.027,149,0.975,150,1.03,151,0.825,152,0.825,153,0.825,154,0.825,155,2.821,156,4.345,157,1.167,158,0.825,159,1.619,160,1.272,161,3.329,162,1.114,163,5.141,164,1.114,165,4.54,166,5.141,167,5.749,168,0.951,169,4.54,170,4.54,171,4.54,172,4.54,173,4.54,174,4.54,175,4.54,176,4.54,177,4.54,178,4.54,179,4.54,180,4.54,181,4.54,182,4.54,183,4.54,184,4.54,185,4.54,186,4.54,187,4.54,188,4.54,189,4.54,190,4.54,191,4.54,192,4.54,193,4.54,194,4.54,195,4.54,196,4.54,197,4.54,198,4.54,199,4.54,200,4.54,201,4.54,202,4.54,203,4.54,204,4.54,205,4.54,206,4.54,207,4.54,208,4.54,209,4.54,210,4.54,211,4.54,212,4.54,213,4.54,214,1.903,215,4.54,216,4.54,217,4.54,218,4.54,219,4.54,220,4.54,221,4.54,222,4.54,223,5.505,224,4.54,225,4.54,226,4.54,227,4.54,228,4.54,229,4.54,230,4.54,231,4.54,232,4.54,233,4.54,234,4.54,235,4.54,236,3.361,237,2.97,238,2.445,239,4.54,240,4.54,241,3.81,242,3.361,243,0.648,244,3.361,245,3.361,246,1.527,247,1.659,248,1.207,249,1.207,250,1.903,251,2.062,252,1.987,253,0.704,254,1.114,255,1.114,256,0.825,257,1.351,258,0.825,259,0.825,260,0.595,261,0.595,262,0.825,263,0.545,264,0.825,265,0.595,266,1.262,267,0.595,268,0.595,269,0.825,270,0.545,271,0.825,272,0.595,273,0.704,274,0.825,275,0.595,276,0.825,277,0.595,278,0.825,279,0.545,280,0.825,281,0.595,282,0.763,283,0.595,284,0.825,285,0.595,286,0.545,287,0.825,288,0.595,289,0.825,290,0.595,291,0.545,292,0.825,293,0.825]],["title/modules/AppModule.html",[294,2.149,295,2.149]],["body/modules/AppModule.html",[0,0.081,3,0.388,4,0.344,5,0.344,29,0.03,53,0.724,56,0.513,145,0.016,146,0.021,147,0.016,149,1.147,157,0.811,160,0.689,243,0.689,253,0.749,260,1.068,261,0.633,263,0.978,265,1.068,267,1.068,268,1.068,270,0.978,272,1.068,273,0.749,275,1.068,277,1.068,279,0.978,281,1.068,282,0.811,283,1.068,285,1.068,286,0.58,288,1.068,290,1.068,294,2.338,295,4.465,296,2.112,297,2.338,298,4.449,299,4.449,300,3.969,301,2.338,302,2.999,303,2.999,304,2.999,305,2.999,306,3.565,307,3.969,308,2.999,309,2.338,310,3.573,311,3.969,312,4.729,313,2.999,314,2.621,315,3.969,316,4.729,317,2.999,318,3.573,319,3.573,320,2.621,321,5.301,322,2.999,323,3.573,324,2.999,325,2.621,326,3.573,327,3.573,328,2.621,329,2.621,330,3.573,331,3.573,332,2.999,333,3.573,334,3.573,335,2.621,336,3.573,337,2.338,338,2.999]],["title/modules/AppRoutingModule.html",[294,2.149,306,1.941]],["body/modules/AppRoutingModule.html",[0,0.108,3,0.515,4,0.458,5,0.458,29,0.03,53,0.693,56,0.515,145,0.021,146,0.025,147,0.021,148,0.028,243,0.916,263,0.917,270,0.917,273,0.995,279,1.014,286,0.77,296,2.807,301,3.106,306,3.343,311,3.984,315,4.746,322,3.984,324,3.984,332,3.984,339,4.748,340,4.748,341,3.952,342,5.655,343,3.984,344,4.748,345,3.199,346,3.7,347,4.746,348,4.748,349,4.748,350,4.748,351,4.748]],["title/components/CreateTrackComponent.html",[148,0.014,260,0.582]],["body/components/CreateTrackComponent.html",[0,0.079,3,0.377,4,0.335,5,0.335,8,0.42,10,1.577,13,0.377,18,0.972,23,0.615,26,0.822,29,0.03,30,0.503,31,0.42,39,0.67,49,0.848,53,0.377,56,0.503,68,2.003,73,0.895,86,1.008,104,1.544,107,1.23,111,1.246,145,0.015,146,0.02,147,0.015,148,0.023,149,0.615,150,1.053,151,0.852,152,0.852,153,0.852,154,0.852,157,0.788,158,0.852,159,1.625,160,1.277,162,1.139,164,1.139,243,0.67,247,1.713,248,1.876,249,1.246,250,1.455,253,0.727,254,1.139,255,1.468,256,0.852,257,1.369,258,0.852,259,0.852,260,0.988,261,1.16,262,0.852,263,0.563,264,0.852,265,0.615,266,1.283,267,0.615,268,0.615,269,0.852,270,0.563,271,0.852,272,0.615,273,0.727,274,0.852,275,0.615,276,0.852,277,0.615,278,0.852,279,0.563,280,0.852,281,0.615,282,0.788,283,0.615,284,0.852,285,0.615,286,0.563,287,0.852,288,0.615,289,0.852,290,0.615,291,0.991,292,0.852,293,0.852,325,3.832,352,4.385,353,2.913,354,4.639,355,4.639,356,4.639,357,3.893,358,4.639,359,1.23,360,1.385,361,4.385,362,3.893,363,5.578,364,3.893,365,2.753,366,3.471,367,2.743,368,4.639,369,4.639,370,4.091,371,3.471,372,3.893,373,2.29,374,0.92,375,3.471,376,4.639,377,3.402,378,4.639,379,4.639,380,3.471,381,5.813,382,2.546,383,2.64,384,2.052,385,1.455,386,1.945,387,2.107,388,1.713,389,3.402,390,2.743,391,2.052,392,2.052,393,2.052,394,2.499,395,2.052,396,1.577,397,2.546,398,2.29,399,2.271,400,2.107,401,2.052,402,4.639,403,4.639,404,2.271,405,2.271,406,1.346,407,2.373,408,3.471,409,3.402,410,3.035,411,2.052,412,2.546,413,2.546]],["title/components/DashboardComponent.html",[148,0.014,263,0.533]],["body/components/DashboardComponent.html",[0,0.085,3,0.405,4,0.36,5,0.36,8,0.452,23,0.662,29,0.03,30,0.528,49,0.606,53,0.405,56,0.528,73,0.94,83,1.244,107,1.291,139,0.917,145,0.016,146,0.021,147,0.016,148,0.024,149,0.662,150,1.105,151,0.917,152,0.917,153,0.917,154,0.917,157,0.848,158,0.917,159,1.637,160,1.287,162,1.195,164,1.195,243,0.721,246,1.697,248,1.945,249,1.945,250,2.407,251,1.697,253,0.783,254,1.195,255,1.195,256,0.917,257,1.409,258,0.917,259,0.917,260,0.662,261,0.662,262,0.917,263,0.931,264,0.917,265,0.662,266,1.33,267,0.662,268,0.662,269,0.917,270,0.606,271,0.917,272,0.662,273,0.783,274,0.917,275,0.662,276,0.917,277,0.662,278,0.917,279,0.606,280,0.917,281,0.662,282,0.848,283,0.662,284,0.917,285,0.662,286,0.606,287,0.917,288,0.662,289,0.917,290,0.662,291,0.606,292,0.917,293,0.917,347,4.087,359,1.291,360,1.437,374,0.991,383,2.461,384,2.209,385,2.041,386,2.041,387,1.697,388,2.404,390,2.209,391,2.209,392,2.209,395,2.209,396,1.697,400,2.212,406,1.888,407,1.697,414,3.136,415,4.87,416,4.087,417,5.418,418,4.87,419,4.87,420,4.87,421,4.87,422,4.87,423,5.741,424,5.741,425,4.87,426,4.87,427,4.87,428,4.087,429,4.87,430,4.87,431,4.087,432,4.87,433,4.87,434,3.136,435,2.74,436,3.736,437,4.87,438,3.736,439,3.736,440,2.404,441,2.879,442,2.445,443,2.209,444,2.209,445,2.209,446,2.012,447,2.209,448,2.404,449,2.209,450,2.445,451,4.087,452,2.445,453,3.572,454,2.74,455,3.572]],["title/components/ExportMenuComponent.html",[148,0.014,265,0.582]],["body/components/ExportMenuComponent.html",[0,0.093,3,0.447,4,0.397,5,0.397,8,0.499,23,0.73,29,0.03,30,0.563,49,0.668,53,0.447,56,0.704,73,1,82,2.034,139,1.012,145,0.018,146,0.023,147,0.018,148,0.025,149,0.73,150,1.177,151,1.012,152,1.012,153,1.012,154,1.012,157,0.935,158,1.012,159,1.652,160,1.299,162,1.273,164,1.273,243,0.795,253,0.863,254,1.273,255,1.273,256,1.012,257,1.462,258,1.012,259,1.012,260,0.73,261,0.73,262,1.012,263,0.668,264,1.012,265,1.055,266,1.393,267,0.73,268,0.73,269,1.012,270,0.668,271,1.012,272,0.73,273,0.863,274,1.012,275,0.73,276,1.012,277,0.73,278,1.012,279,0.668,280,1.012,281,0.73,282,0.935,283,0.73,284,1.012,285,0.73,286,0.668,287,1.012,288,0.73,289,1.012,290,0.73,291,0.668,292,1.012,293,1.012,301,3.393,329,3.022,359,1.375,360,1.505,374,1.093,456,3.459,457,2.697,458,3.896,459,4.352,460,5.186,461,2.174,462,4.161,463,3.803,464,2.436]],["title/components/MainMenuComponent.html",[148,0.014,267,0.582]],["body/components/MainMenuComponent.html",[0,0.065,3,0.311,4,0.276,5,0.276,8,0.492,10,2.144,13,0.612,16,1.28,18,0.851,23,0.507,26,0.72,28,0.759,29,0.03,30,0.512,31,0.492,32,0.759,39,0.552,48,1.254,49,0.766,53,0.311,56,0.441,58,0.819,73,0.784,83,1.352,103,2.33,107,1.681,126,1.384,139,0.703,141,0.464,145,0.013,146,0.018,147,0.013,148,0.021,149,0.507,150,0.922,151,0.703,152,0.703,153,0.703,154,0.703,156,2.979,157,1.387,158,0.703,159,1.589,160,1.249,162,0.997,164,0.997,168,0.6,214,1.979,243,0.552,246,1.3,248,2.082,249,1.845,250,2.713,251,2.464,252,1.692,253,0.6,254,0.997,255,0.997,256,0.703,257,1.261,258,0.703,259,0.703,260,0.507,261,0.507,262,0.703,263,0.464,264,0.703,265,0.507,266,1.159,267,0.91,268,0.507,269,0.703,270,0.464,271,0.703,272,0.507,273,0.989,274,0.703,275,0.507,276,0.703,277,0.507,278,0.703,279,0.464,280,0.703,281,0.507,282,0.65,283,0.507,284,0.703,285,0.507,286,0.766,287,0.703,288,0.507,289,0.703,290,0.507,291,0.464,292,0.703,293,0.703,320,3.462,346,3.362,359,1.077,360,1.252,374,0.759,377,4.134,384,1.692,385,1.979,386,2.275,387,1.845,389,2.979,390,2.401,396,1.3,398,2.782,399,1.873,400,2.144,401,2.791,404,3.55,405,2.658,406,2.185,407,2.56,411,2.401,412,2.099,431,3.409,435,2.099,440,1.413,441,1.692,442,1.873,443,1.692,444,1.692,446,3.246,448,3.016,452,1.873,453,2.979,454,2.099,457,1.873,458,3.688,462,3.462,463,2.979,465,3.962,466,4.062,467,1.845,468,6.241,469,2.862,470,4.73,471,4.062,472,2.862,473,2.005,474,1.703,475,2.862,476,4.312,477,4.312,478,4.062,479,4.062,480,4.721,481,2.862,482,2.862,483,4.721,484,2.862,485,4.062,486,1.542,487,4.062,488,1.692,489,3.409,490,4.062,491,2.401,492,4.73,493,1.542,494,2.402,495,3.962,496,5.426,497,2.099,498,4.481,499,2.099,500,1.873,501,1.542,502,2.862,503,2.099,504,2.862,505,2.099,506,2.862,507,2.862,508,4.721,509,2.402,510,2.862,511,3.409,512,2.402,513,2.401,514,2.862,515,2.862,516,2.862,517,2.862,518,2.862,519,2.862,520,2.862,521,2.862,522,2.862,523,2.862,524,1.413,525,1.692,526,2.862]],["title/classes/Measure.html",[0,0.074,527,1.377]],["body/classes/Measure.html",[0,0.122,2,1.691,3,0.404,4,0.359,5,0.359,8,0.451,13,0.404,14,1.288,15,2.67,16,1.246,18,1.018,26,1.054,29,0.03,31,0.655,39,1.106,53,0.404,56,0.404,64,1.641,67,2.731,73,0.718,74,3.389,76,1.617,86,1.044,87,3.198,92,2.207,93,1.43,106,2.201,112,2.77,126,1.193,141,0.877,145,0.016,146,0.021,147,0.016,168,0.78,291,0.877,398,3.066,440,2.398,527,2.787,528,3.125,529,3.179,530,5.409,531,4.812,532,3.752,533,3.723,534,4.078,535,3.179,536,4.078,537,4.859,538,4.859,539,3.723,540,3.723,541,3.723,542,3.723,543,3.564,544,3.179,545,2.873,546,3.723,547,3.125,548,3.723,549,3.723,550,3.723,551,3.723,552,3.723,553,4.859,554,3.723,555,4.859,556,5.409,557,3.723,558,4.54,559,3.723,560,3.723,561,5.948,562,3.723,563,3.723,564,3.723,565,3.723]],["title/components/MeasureComponent.html",[148,0.014,268,0.582]],["body/components/MeasureComponent.html",[0,0.075,3,0.36,4,0.319,5,0.319,8,0.401,13,0.36,16,1.146,18,0.942,23,0.587,26,0.97,29,0.03,30,0.488,31,0.618,39,0.867,49,0.729,53,0.594,56,0.488,59,1.287,64,0.948,73,0.985,86,1.138,98,2.658,116,2.942,126,0.813,139,0.813,141,0.828,145,0.015,146,0.02,147,0.015,148,0.022,149,0.587,150,1.02,151,0.813,152,0.813,153,0.813,154,0.813,157,0.752,158,0.813,159,1.617,160,1.27,162,1.104,164,1.104,168,1.069,243,0.639,246,1.505,247,1.635,248,1.614,249,1.832,250,2.398,251,2.042,253,0.694,254,1.104,255,1.104,256,0.813,257,1.343,258,0.813,259,0.813,260,0.587,261,0.587,262,0.813,263,0.537,264,0.813,265,0.587,266,1.253,267,0.587,268,0.97,269,0.813,270,0.537,271,0.813,272,0.587,273,0.694,274,0.813,275,0.587,276,0.813,277,0.587,278,0.813,279,0.537,280,0.813,281,0.587,282,0.752,283,0.587,284,0.813,285,0.587,286,0.537,287,0.813,288,0.587,289,0.813,290,0.904,291,0.537,292,0.813,293,0.813,359,1.192,360,1.353,374,0.879,388,1.635,406,1.743,447,1.959,448,1.635,452,2.942,461,2.294,467,2.042,473,1.635,474,2.294,488,1.959,500,2.168,505,3.297,527,2.777,547,2.781,566,2.781,567,2.942,568,2.942,569,4.496,570,3.297,571,4.496,572,3.773,573,4.496,574,3.017,575,5.103,576,4.496,577,5.473,578,2.907,579,2.638,580,4.496,581,3.313,582,3.313,583,3.313,584,3.313,585,2.658,586,1.959,587,1.785,588,3.313,589,1.959,590,4.496,591,2.168,592,2.43,593,3.313,594,3.313,595,2.781,596,3.313,597,3.313,598,2.43,599,2.781,600,3.313,601,3.313,602,2.43,603,2.43,604,2.781,605,2.43]],["title/components/MetronomeComponent.html",[148,0.014,270,0.533]],["body/components/MetronomeComponent.html",[0,0.052,3,0.249,4,0.221,5,0.221,8,0.56,13,0.249,14,0.916,16,1.133,18,0.724,23,0.407,25,1.324,26,1.07,28,1.102,29,0.03,30,0.655,31,0.674,32,1.102,39,1.12,48,1.718,49,0.969,53,0.502,56,0.375,58,1.189,59,1.189,64,0.989,68,1.241,73,0.667,76,1.435,80,2.535,82,1.133,83,0.764,86,0.957,93,0.521,104,0.764,107,0.916,111,0.824,112,2.101,126,0.563,139,0.563,141,0.878,145,0.01,146,0.015,147,0.01,148,0.018,149,0.407,150,0.784,151,0.563,152,0.563,153,0.563,154,0.563,157,0.521,158,0.563,159,1.541,160,1.211,162,0.848,164,0.848,168,0.969,237,2.261,238,2.808,243,0.443,247,1.133,248,1.493,249,1.493,250,1.742,251,1.888,253,0.481,254,0.848,255,0.848,256,0.563,257,1.136,258,0.563,259,0.563,260,0.407,261,0.407,262,0.563,263,0.372,264,0.563,265,0.407,266,1.02,267,0.407,268,0.407,269,0.563,270,0.805,271,0.563,272,0.407,273,1.384,274,0.563,275,0.407,276,0.563,277,0.407,278,0.563,279,0.372,280,0.563,281,0.407,282,0.521,283,0.407,284,0.563,285,0.407,286,0.98,287,0.563,288,0.407,289,0.563,290,0.407,291,0.372,292,0.563,293,0.563,309,1.502,359,0.916,360,1.102,367,2.043,374,0.609,383,1.888,385,0.962,386,1.939,387,1.57,390,1.357,393,2.457,394,2.491,396,1.043,398,2.052,399,1.502,400,1.043,401,1.357,404,1.502,405,1.502,406,1.793,407,2.101,409,2.535,410,3.727,411,2.043,413,3.824,440,1.133,441,1.357,442,1.502,443,1.357,444,1.357,455,3.048,464,1.357,473,1.706,486,2.239,491,1.357,493,1.236,501,1.236,513,1.357,524,2.283,525,1.357,579,2.599,587,1.236,606,1.926,607,2.901,608,4.157,609,3.456,610,4.157,611,4.157,612,4.157,613,4.626,614,4.626,615,2.535,616,2.901,617,2.901,618,3.392,619,3.882,620,2.295,621,3.392,622,3.456,623,3.456,624,2.295,625,4.083,626,4.626,627,1.706,628,3.456,629,2.901,630,3.456,631,3.456,632,2.535,633,2.295,634,4.376,635,3.882,636,3.882,637,3.456,638,3.456,639,2.295,640,2.535,641,2.261,642,2.535,643,2.901,644,2.295,645,2.295,646,2.261,647,2.295,648,2.901,649,2.295,650,3.392,651,2.261,652,1.782,653,2.295,654,2.901,655,2.295,656,2.901,657,2.261,658,2.295,659,2.535,660,2.901,661,2.295,662,2.535,663,1.926,664,2.261,665,3.456,666,2.535,667,2.295,668,1.926,669,1.133,670,1.357,671,1.926,672,2.295,673,1.926,674,3.456,675,3.456,676,1.926,677,2.295,678,2.295,679,1.926,680,2.295,681,1.926,682,2.295,683,3.456,684,3.456,685,2.295,686,2.295,687,2.295,688,2.295,689,3.456,690,3.456,691,2.295,692,2.295,693,2.295,694,1.683,695,2.295,696,3.456,697,3.456,698,2.901,699,4.626,700,2.295,701,4.157,702,2.295,703,2.295,704,1.926,705,1.683,706,1.926,707,2.295,708,2.295,709,2.295,710,2.295,711,2.295,712,2.295,713,2.295,714,2.535,715,3.882,716,1.926,717,4.376,718,1.926,719,3.411,720,2.295,721,4.164,722,3.456,723,3.456,724,1.926,725,2.901,726,2.535,727,1.926,728,1.926,729,2.295,730,2.295,731,2.295,732,2.295,733,2.295,734,2.295,735,2.295,736,2.295,737,2.295,738,1.502]],["title/components/MetronomeSoundComponent.html",[148,0.014,272,0.582]],["body/components/MetronomeSoundComponent.html",[0,0.055,3,0.264,4,0.234,5,0.234,8,0.437,13,0.264,14,0.956,16,0.901,18,0.755,23,0.43,25,1.032,26,1.043,28,0.644,29,0.03,30,0.467,31,0.701,32,0.644,39,0.981,49,0.894,53,0.516,56,0.391,58,0.695,59,1.362,64,0.695,68,1.912,73,0.696,82,1.199,86,1.027,98,2.132,103,1.199,104,1.431,107,1.584,126,1.307,139,0.596,141,0.824,145,0.011,146,0.016,147,0.011,148,0.028,149,0.43,150,0.818,151,0.596,152,0.596,153,0.596,154,0.596,157,0.551,158,0.596,159,1.554,160,1.221,162,0.885,164,0.885,168,1.065,214,2.131,237,2.36,243,0.469,253,0.509,254,0.885,255,0.885,256,0.596,257,1.168,258,0.596,259,0.596,260,0.43,261,0.43,262,0.596,263,0.394,264,0.596,265,0.43,266,1.056,267,0.43,268,0.43,269,0.596,270,0.394,271,0.596,272,0.843,273,1.366,274,0.596,275,0.43,276,0.596,277,0.43,278,0.596,279,0.394,280,0.596,281,0.43,282,0.551,283,0.43,284,0.596,285,0.43,286,1.067,287,0.596,288,0.43,289,0.596,290,0.43,291,0.394,292,0.596,293,0.596,335,4.38,359,0.956,360,1.14,367,3.644,370,4.317,374,0.644,459,3.027,464,1.436,467,1.638,474,1.512,491,2.132,503,2.645,524,2.349,527,1.512,567,2.814,570,3.728,574,2.542,578,2.674,579,2.504,585,3.005,586,1.436,587,1.309,589,2.132,591,1.59,592,1.782,618,3.49,627,2.349,629,2.039,646,2.36,652,1.825,657,2.36,659,2.645,660,3.027,662,2.645,663,2.039,664,2.36,668,2.039,671,2.039,673,3.027,694,2.645,739,5.012,740,2.039,741,3.606,742,3.027,743,5.886,744,3.484,745,4.758,746,4.855,747,3.606,748,4.758,749,4.3,750,3.606,751,3.606,752,3.609,753,4.758,754,4.758,755,4.758,756,2.43,757,1.942,758,3.606,759,3.484,760,5.325,761,5.663,762,2.43,763,2.43,764,2.43,765,3.027,766,3.027,767,3.993,768,2.43,769,3.606,770,3.728,771,3.606,772,3.027,773,4.266,774,3.609,775,2.43,776,2.43,777,1.942,778,2.43,779,2.43,780,3.606,781,2.43,782,2.43,783,2.43,784,2.43,785,3.606,786,2.43,787,2.039,788,2.039,789,2.039,790,3.027,791,2.039,792,2.43,793,2.43,794,3.606,795,3.606,796,3.606,797,2.43,798,2.43,799,2.039,800,2.43,801,1.59,802,2.43]],["title/classes/Note.html",[0,0.074,93,0.745]],["body/classes/Note.html",[0,0.116,2,1.523,3,0.364,4,0.323,5,0.323,8,0.406,13,0.364,14,1.202,15,2.688,16,1.381,18,0.95,25,1.297,26,1.118,28,1.202,29,0.03,30,0.492,31,0.79,32,1.202,39,1.237,48,1.698,49,0.892,53,0.492,56,0.364,58,1.297,59,1.574,64,1.644,67,1.9,68,1.628,70,3.759,71,3.759,73,0.647,76,1.523,92,2.059,93,1.528,104,1.509,141,0.544,145,0.015,146,0.02,147,0.015,168,0.703,291,0.735,461,1.406,532,3.599,544,2.966,545,2.68,602,2.46,627,2.238,646,2.966,803,2.815,804,4.533,805,4.733,806,5.135,807,4.626,808,5.5,809,5.5,810,5.5,811,4.533,812,4.533,813,3.354,814,3.354,815,4.616,816,3.354,817,3.354,818,3.805,819,3.354,820,3.354,821,3.354,822,4.533,823,3.354,824,4.533,825,3.354,826,3.354,827,3.354,828,3.354,829,3.354,830,5.135,831,5.135,832,2.815,833,3.354,834,3.354,835,2.815,836,3.354,837,3.354,838,3.354,839,4.533,840,4.533,841,3.354,842,3.354,843,3.354,844,3.354,845,3.354]],["title/components/NoteComponent.html",[148,0.014,275,0.582]],["body/components/NoteComponent.html",[0,0.091,3,0.435,4,0.387,5,0.387,8,0.486,13,0.435,23,0.711,26,0.711,29,0.03,30,0.553,31,0.486,49,0.65,53,0.553,56,0.553,67,2.137,73,0.983,86,0.983,93,1.494,116,3.335,141,0.65,145,0.018,146,0.022,147,0.018,148,0.025,149,0.711,150,1.157,151,0.984,152,0.984,153,0.984,154,0.984,157,0.91,158,0.984,159,1.648,160,1.295,162,1.251,164,1.251,168,0.84,243,0.774,253,0.84,254,1.251,255,1.251,256,0.984,257,1.447,258,0.984,259,0.984,260,0.711,261,0.711,262,0.984,263,0.65,264,0.984,265,0.711,266,1.375,267,0.711,268,0.993,269,0.984,270,0.65,271,0.984,272,0.711,273,0.84,274,0.984,275,1.045,276,0.984,277,0.711,278,0.984,279,0.65,280,0.984,281,0.711,282,0.91,283,0.711,284,0.984,285,0.711,286,0.65,287,0.984,288,0.711,289,0.984,290,0.711,291,0.65,292,0.984,293,0.984,359,1.352,360,1.486,374,1.063,461,2.137,467,2.315,474,2.137,568,3.335,846,3.366,847,5.603,848,5.097,849,5.097,850,4.01,851,2.941,852,5.097]],["title/classes/NoteRepresentation.html",[0,0.074,72,1.769]],["body/classes/NoteRepresentation.html",[0,0.104,1,4.19,2,1.02,3,0.244,4,0.216,5,0.216,6,3.975,7,1.469,8,0.65,9,3.215,10,1.863,11,3.442,12,3.704,13,0.6,14,0.901,15,2.492,16,1.402,17,4.844,18,0.712,19,1.469,20,1.884,23,0.81,24,1.884,25,1.701,26,1.066,28,1.424,29,0.03,30,0.683,31,0.699,32,1.424,34,1.884,35,1.884,36,1.884,37,3.839,39,1.16,41,1.469,42,4.152,43,1.884,44,1.884,45,2.852,46,1.884,48,1.517,49,0.918,50,1.884,52,1.884,53,0.244,54,1.327,55,1.646,56,0.369,57,3.938,58,1.678,59,1.537,60,3.442,61,3.442,62,3.442,63,3.442,64,1.651,65,2.852,66,2.852,67,1.425,68,1.986,69,2.852,70,2.224,71,2.224,72,2.785,73,0.656,74,2.009,75,1.884,76,1.684,77,1.884,78,1.646,79,1.646,80,4.455,81,3.355,82,1.678,83,1.131,84,3.839,85,3.442,86,1.036,87,2.009,88,3.492,89,2.852,90,2.493,91,4.124,92,1.544,93,1.038,94,2.852,95,2.852,96,2.852,97,2.852,98,2.009,99,2.493,100,2.852,101,3.839,102,2.852,103,1.678,104,1.131,105,2.852,106,1.327,107,0.901,108,3.442,109,1.884,110,3.839,111,2.247,112,2.731,113,4.124,114,2.224,115,3.839,116,2.224,117,2.852,118,2.852,119,1.884,120,3.442,121,1.884,122,4.339,123,2.852,124,1.884,125,1.884,126,1.007,127,2.852,128,2.852,129,3.792,130,2.852,131,1.884,132,2.852,133,1.884,134,1.884,135,3.839,136,2.852,137,1.884,138,2.852,139,0.834,140,1.884,141,0.742,142,2.493,143,3.839,144,1.884,145,0.01,146,0.015,147,0.01,168,0.712,345,1.678,398,1.108,853,3.399,854,3.399,855,3.399,856,4.101,857,3.399,858,3.399,859,3.399,860,3.399,861,2.245,862,2.245,863,2.245,864,2.245,865,2.245,866,2.245,867,2.245,868,2.245,869,1.884,870,2.245,871,2.245,872,2.245,873,2.245,874,2.245]],["title/components/PlaybarComponent.html",[148,0.014,277,0.582]],["body/components/PlaybarComponent.html",[0,0.083,3,0.398,4,0.353,5,0.353,8,0.444,13,0.398,15,1.536,18,1.007,23,0.649,25,1.376,26,0.852,29,0.03,30,0.522,31,0.444,39,0.707,49,0.871,53,0.398,56,0.522,59,1.049,73,1.099,82,1.809,86,0.707,139,0.9,141,0.594,145,0.016,146,0.021,147,0.016,148,0.024,149,0.649,150,1.092,151,0.9,152,0.9,153,0.9,154,0.9,157,0.832,158,0.9,159,1.634,160,1.284,162,1.181,164,1.181,168,0.768,243,0.707,247,1.809,248,1.316,249,1.316,253,0.768,254,1.181,255,1.181,256,0.9,257,1.399,258,0.9,259,0.9,260,0.649,261,0.649,262,0.9,263,0.594,264,0.9,265,0.649,266,1.318,267,0.649,268,0.649,269,0.9,270,0.594,271,0.9,272,0.649,273,0.768,274,0.9,275,0.649,276,0.9,277,1.048,278,0.9,279,0.594,280,0.9,281,0.649,282,0.832,283,0.649,284,0.9,285,0.649,286,0.594,287,0.9,288,0.649,289,0.9,290,0.649,291,0.871,292,0.9,293,0.9,359,1.275,360,1.423,365,2.649,373,2.374,374,0.972,383,2.184,385,1.536,386,1.536,411,2.167,441,2.167,445,2.167,461,2.016,464,2.167,467,2.184,474,2.016,488,2.843,525,2.167,535,3.147,572,4.036,574,3.173,585,2.843,589,2.167,652,1.727,657,3.729,744,3.512,757,3.069,777,2.59,801,3.147,875,3.076,876,4.809,877,4.809,878,4.036,879,4.809,880,4.809,881,4.809,882,5.368,883,4.809,884,5.699,885,3.665,886,3.665,887,3.665,888,3.665,889,3.665,890,3.665,891,2.688,892,2.167,893,4.809,894,3.076,895,3.665,896,3.665]],["title/components/RhythmComponent.html",[148,0.014,279,0.533]],["body/components/RhythmComponent.html",[0,0.031,3,0.15,4,0.134,5,0.134,8,0.603,9,2.275,10,1.579,13,0.481,14,0.613,16,1.3,18,0.485,23,0.246,25,1.552,26,1.077,28,1.32,29,0.03,30,0.606,31,0.72,32,1.32,39,1.101,48,1.614,49,0.926,53,0.453,56,0.251,58,1.268,59,1.106,64,1.106,68,0.831,73,0.446,76,1.025,83,0.461,86,1.139,87,2.852,88,2.598,92,0.63,93,0.676,99,1.697,104,0.77,106,1.368,107,1.32,111,0.498,112,1.897,114,0.907,126,1.255,139,0.34,141,0.865,145,0.013,146,0.01,147,0.006,148,0.017,149,0.246,150,0.676,151,0.34,152,0.34,153,0.34,154,0.34,157,0.315,158,0.34,159,1.401,160,1.112,162,0.568,164,0.568,168,1.117,214,1.62,238,2.598,243,0.446,246,0.63,247,0.684,248,1.732,249,2.07,250,2.274,251,2.191,252,2.055,253,0.29,254,0.568,255,0.568,256,0.34,257,0.854,258,0.34,259,0.34,260,0.246,261,0.246,262,0.34,263,0.225,264,0.34,265,0.246,266,0.731,267,0.246,268,0.246,269,0.34,270,0.225,271,0.34,272,0.246,273,0.29,274,0.34,275,0.246,276,0.34,277,0.246,278,0.34,279,0.719,280,0.34,281,0.246,282,0.315,283,0.246,284,0.34,285,0.246,286,0.375,287,0.34,288,0.246,289,0.34,290,0.246,291,0.991,292,0.34,293,0.34,346,2.529,359,0.613,360,0.79,365,0.684,367,2.469,372,1.163,373,0.684,374,0.368,377,1.697,383,2.013,385,1.751,386,1.947,387,2.322,388,1.47,393,2.469,394,2.25,395,0.819,396,2.013,398,1.47,400,1.051,401,0.819,404,1.514,406,1.982,407,1.579,410,3.258,413,2.184,434,1.163,435,1.017,440,1.142,441,1.76,442,0.907,443,1.76,444,1.76,445,0.819,446,1.604,448,2.381,449,2.055,450,1.948,451,1.163,458,0.907,461,0.97,467,1.897,470,1.942,473,0.684,474,0.581,476,1.942,477,1.942,486,1.246,488,0.819,489,1.163,491,2.943,492,1.942,493,2.25,494,1.163,495,1.163,498,1.017,499,1.017,500,1.514,501,1.873,503,1.697,505,1.017,513,0.819,524,2.062,525,2.746,527,2.087,532,2.275,535,3.938,543,1.017,544,1.514,545,1.368,567,2.529,568,2.733,578,2.618,579,2.368,586,0.819,587,0.747,591,0.907,592,1.017,602,1.017,603,1.697,605,2.55,617,1.942,618,1.697,627,1.716,641,2.275,643,1.942,652,1.836,666,1.017,679,1.163,681,1.163,704,1.163,706,1.942,714,1.697,715,2.918,716,1.163,717,3.505,718,1.163,719,2.733,721,2.499,724,1.163,725,1.942,726,2.184,727,1.163,728,1.163,742,2.918,752,2.499,757,1.604,759,1.514,765,1.163,767,1.942,770,1.017,772,1.163,773,3.244,774,2.499,777,1.246,799,1.163,805,3.063,807,1.017,851,1.017,891,2.55,892,1.368,894,1.163,897,1.163,898,2.314,899,2.314,900,2.978,901,2.314,902,2.978,903,2.978,904,2.978,905,2.978,906,5.112,907,2.978,908,2.978,909,2.978,910,2.978,911,2.978,912,1.942,913,2.314,914,4.177,915,2.314,916,2.314,917,2.314,918,2.314,919,2.314,920,2.314,921,2.314,922,3.477,923,3.477,924,2.314,925,4.291,926,1.386,927,4.049,928,3.244,929,2.314,930,1.386,931,2.918,932,3.477,933,1.942,934,1.386,935,2.314,936,3.477,937,2.314,938,1.386,939,3.477,940,5.581,941,2.314,942,3.477,943,2.314,944,1.386,945,2.314,946,2.314,947,4.093,948,2.314,949,2.314,950,2.314,951,2.314,952,2.314,953,2.314,954,1.386,955,1.386,956,1.386,957,2.314,958,1.386,959,2.314,960,1.386,961,1.386,962,1.386,963,1.386,964,1.163,965,1.163,966,1.017,967,2.55,968,1.386,969,1.386,970,2.314,971,1.386,972,2.314,973,3.477,974,1.386,975,1.386,976,2.314,977,2.314,978,2.314,979,1.386,980,2.314,981,2.314,982,5.648,983,1.386,984,4.177,985,1.386,986,1.386,987,2.499,988,1.386,989,2.314,990,1.386,991,1.386,992,2.314,993,1.386,994,1.386,995,2.918,996,1.942,997,1.386,998,1.942,999,1.386,1000,1.386,1001,1.386,1002,1.386,1003,2.314,1004,3.865,1005,1.163,1006,2.978,1007,1.386,1008,1.386,1009,1.386,1010,2.314,1011,2.314,1012,2.978,1013,1.386,1014,2.978,1015,2.978,1016,3.477,1017,1.386,1018,1.386,1019,1.386,1020,1.386,1021,1.386,1022,1.386,1023,2.314,1024,1.386,1025,1.386,1026,1.386,1027,1.386,1028,1.386,1029,2.314,1030,1.386,1031,1.386,1032,1.386,1033,1.386,1034,1.386,1035,1.386,1036,1.163,1037,1.386,1038,1.163,1039,1.386,1040,1.386,1041,1.386,1042,1.386,1043,1.386,1044,1.386,1045,2.314,1046,1.942,1047,1.386,1048,2.314,1049,1.386,1050,1.386,1051,4.824,1052,1.386,1053,2.314,1054,1.386,1055,2.499,1056,1.386,1057,2.314,1058,1.163,1059,1.386,1060,1.386,1061,1.386,1062,1.386,1063,1.386,1064,2.314,1065,5.112,1066,1.386,1067,2.978,1068,2.978,1069,1.163,1070,1.942,1071,1.386,1072,1.163,1073,1.386,1074,1.163,1075,1.163,1076,1.163,1077,1.386,1078,1.163,1079,1.942,1080,2.314,1081,2.314,1082,1.386,1083,1.386,1084,1.942,1085,2.314,1086,1.942,1087,1.386,1088,2.499,1089,1.163,1090,1.386,1091,1.386,1092,0.819,1093,1.386,1094,1.386,1095,2.314,1096,1.163,1097,1.386,1098,1.386,1099,1.386,1100,2.978,1101,2.978,1102,1.386,1103,1.386,1104,2.314]],["title/components/SaveMenuComponent.html",[148,0.014,281,0.582]],["body/components/SaveMenuComponent.html",[0,0.094,3,0.448,4,0.398,5,0.398,8,0.5,23,0.732,29,0.03,30,0.564,49,0.67,53,0.448,56,0.564,73,1.002,82,2.039,139,1.014,145,0.018,146,0.023,147,0.018,148,0.027,149,0.732,150,1.179,151,1.014,152,1.014,153,1.014,154,1.014,157,0.938,158,1.014,159,1.653,160,1.299,162,1.275,164,1.275,243,0.797,253,0.865,254,1.275,255,1.275,256,1.014,257,1.463,258,1.014,259,1.014,260,0.732,261,0.732,262,1.014,263,0.67,264,1.014,265,0.732,266,1.395,267,0.732,268,0.732,269,1.014,270,0.67,271,1.014,272,0.732,273,0.865,274,1.014,275,0.732,276,1.014,277,0.732,278,1.014,279,0.67,280,1.014,281,1.056,282,1.484,283,0.732,284,1.014,285,0.732,286,0.67,287,1.014,288,0.732,289,1.014,290,0.732,291,0.67,292,1.014,293,1.014,328,3.03,359,1.377,360,1.506,374,1.095,457,2.703,458,3.9,461,2.177,462,4.166,463,3.809,464,2.442,1105,3.467]],["title/classes/Signature.html",[0,0.074,578,1.492]],["body/classes/Signature.html",[0,0.105,2,1.249,3,0.298,4,0.265,5,0.265,8,0.611,10,2.976,13,0.298,14,1.047,15,2.502,16,1.385,18,0.827,23,0.487,25,1.129,26,1.098,28,1.417,29,0.03,30,0.636,31,0.694,32,1.554,39,1.215,41,2.582,48,1.809,49,0.867,53,0.298,56,0.298,58,1.444,59,1.85,64,1.639,68,1.417,76,1.338,86,0.973,93,1.262,104,0.915,107,0.729,111,1.658,126,0.969,141,1.005,145,0.012,146,0.017,147,0.012,168,1.057,261,0.699,345,2.49,501,3.615,527,1.654,529,2.582,578,3.004,598,3.7,627,1.948,652,0.987,669,3.192,670,1.625,766,3.312,1106,2.308,1107,5.045,1108,5.045,1109,5.045,1110,5.045,1111,5.045,1112,3.947,1113,3.947,1114,3.947,1115,3.947,1116,3.947,1117,3.947,1118,2.895,1119,5.045,1120,5.045,1121,3.7,1122,3.312,1123,2.749,1124,3.947,1125,2.749,1126,3.947,1127,2.749,1128,3.639,1129,5.562,1130,2.749,1131,2.749,1132,2.749,1133,3.947,1134,3.947,1135,2.749,1136,3.947,1137,3.947,1138,2.749,1139,3.947,1140,2.749,1141,3.947,1142,2.749,1143,2.582,1144,4.617,1145,5.562,1146,2.749,1147,5.343,1148,5.562,1149,3.947,1150,3.947,1151,3.947,1152,2.749,1153,2.749,1154,2.749,1155,3.386,1156,2.749,1157,2.308,1158,2.749,1159,2.308,1160,2.749]],["title/components/SignatureComponent.html",[148,0.014,283,0.582]],["body/components/SignatureComponent.html",[0,0.057,3,0.275,4,0.244,5,0.244,8,0.588,10,1.688,13,0.275,14,0.985,16,1.2,18,0.779,23,0.448,25,1.389,26,1.068,28,1.168,29,0.03,30,0.654,31,0.694,32,1.168,39,1.128,48,1.147,49,0.877,53,0.478,56,0.403,58,1.26,59,1.724,64,1.26,67,2.034,68,1.335,73,0.85,76,1.287,83,0.842,86,0.85,93,1.478,107,1.371,111,1.941,139,1.081,141,0.838,145,0.011,146,0.016,147,0.011,148,0.023,149,0.448,150,0.844,151,0.621,152,0.621,153,0.621,154,0.621,157,0.574,158,0.621,159,1.563,160,1.229,161,1.856,162,0.912,164,0.912,168,1.083,238,3.086,243,0.488,246,1.15,248,0.909,249,1.335,253,0.53,254,0.912,255,0.912,256,0.621,257,1.191,258,0.621,259,0.621,260,0.448,261,0.448,262,0.621,263,0.411,264,0.621,265,0.448,266,1.081,267,0.448,268,0.448,269,0.621,270,0.411,271,0.621,272,0.448,273,0.53,274,0.621,275,0.448,276,0.621,277,0.448,278,0.621,279,0.411,280,0.621,281,0.448,282,0.574,283,1.036,284,0.621,285,0.448,286,0.411,287,0.621,288,0.658,289,0.621,290,0.448,291,0.411,292,0.621,293,0.621,345,2.667,359,0.985,360,1.168,365,2.174,373,1.834,374,0.671,382,1.856,383,1.688,384,1.496,385,1.061,386,1.061,387,2,388,1.249,391,2.197,392,2.197,393,1.496,394,1.363,395,1.496,396,1.688,397,1.856,400,2,406,0.981,407,1.15,443,1.496,444,1.496,446,1.363,447,1.496,448,1.249,449,1.496,450,1.656,461,1.558,486,1.363,493,1.363,501,2.784,513,1.496,527,1.558,578,2.877,586,1.496,591,2.432,607,3.119,641,2.432,651,3.749,652,1.743,669,3.127,670,1.496,705,1.856,738,2.882,777,2.614,891,1.856,892,2.197,1096,2.124,1121,2.726,1122,3.119,1128,2.432,1155,2.726,1161,2.124,1162,3.716,1163,3.716,1164,3.119,1165,4.404,1166,3.716,1167,4.404,1168,4.404,1169,4.404,1170,4.404,1171,4.073,1172,2.432,1173,2.432,1174,3.716,1175,4.853,1176,4.853,1177,2.531,1178,4.073,1179,4.073,1180,1.856,1181,2.726,1182,2.531,1183,3.559,1184,2.726,1185,2.531,1186,3.716,1187,2.531,1188,2.531,1189,2.531,1190,2.531,1191,2.531,1192,3.716,1193,2.531,1194,2.531,1195,3.716,1196,2.531,1197,2.531,1198,2.531,1199,3.716,1200,3.716,1201,2.531,1202,3.716,1203,3.716,1204,3.716,1205,2.531,1206,3.716,1207,3.716,1208,2.531,1209,2.124,1210,1.856,1211,2.124,1212,2.124,1213,2.124,1214,2.531,1215,2.531,1216,2.531,1217,3.716,1218,3.716,1219,2.531,1220,2.124,1221,2.124,1222,3.119,1223,3.119,1224,3.119,1225,2.124,1226,3.119,1227,4.073,1228,2.432,1229,2.124]],["title/components/SoundPlayerComponent.html",[148,0.014,285,0.582]],["body/components/SoundPlayerComponent.html",[0,0.065,3,0.31,4,0.276,5,0.455,8,0.571,13,0.31,14,1.076,15,1.978,16,1.214,18,0.85,23,0.507,25,1.162,26,1.027,28,1.076,29,0.03,30,0.611,31,0.657,32,1.076,39,0.991,48,1.674,49,0.88,53,0.44,54,1.691,55,2.097,56,0.44,58,1.162,73,0.991,76,1.076,86,0.91,104,0.952,107,1.076,126,0.996,141,0.88,145,0.013,146,0.018,147,0.013,148,0.024,149,0.507,150,0.921,151,0.702,152,0.702,153,0.702,154,0.702,157,0.649,158,0.702,159,1.589,160,1.249,162,0.996,164,0.996,168,0.989,243,0.552,253,0.599,254,0.996,255,0.996,256,0.702,257,1.261,258,0.702,259,0.702,260,0.507,261,0.507,262,0.702,263,0.464,264,0.702,265,0.507,266,1.158,267,0.507,268,0.507,269,0.702,270,0.464,271,0.702,272,0.507,273,0.599,274,0.702,275,0.507,276,0.702,277,0.507,278,0.702,279,0.464,280,0.702,281,0.507,282,0.649,283,0.507,284,0.702,285,0.91,286,1.08,287,0.702,288,0.507,289,0.702,290,0.507,291,0.464,292,0.702,293,0.702,337,3.875,359,1.076,360,1.251,365,2.329,373,2.004,374,0.758,445,2.79,467,1.844,474,1.978,570,2.097,574,2.79,585,2.4,589,1.691,627,2.535,640,3.767,642,3.461,646,3.361,652,1.844,657,3.361,694,2.977,744,3.361,757,3.035,787,2.4,788,2.4,789,2.4,790,2.4,791,2.4,801,3.088,869,3.407,878,4.729,987,3.407,998,3.407,1230,4.97,1231,2.4,1232,3.407,1233,4.97,1234,4.059,1235,4.059,1236,3.407,1237,4.719,1238,4.059,1239,4.059,1240,5.136,1241,3.407,1242,2.86,1243,2.86,1244,2.86,1245,5.424,1246,4.059,1247,2.86,1248,4.059,1249,5.424,1250,4.059,1251,4.059,1252,2.86,1253,3.407,1254,2.86,1255,5.056,1256,4.719,1257,3.96,1258,2.86,1259,2.86,1260,2.86,1261,2.86,1262,2.86,1263,2.86,1264,4.719,1265,2.86,1266,2.86,1267,2.86,1268,2.86,1269,2.86,1270,2.86,1271,2.86,1272,2.86,1273,2.4,1274,2.86,1275,2.4,1276,2.86,1277,2.86,1278,2.86]],["title/classes/Tempo.html",[0,0.074,579,1.377]],["body/classes/Tempo.html",[0,0.113,2,1.431,3,0.342,4,0.304,5,0.304,8,0.649,13,0.342,14,1.152,15,2.436,16,1.347,18,0.91,23,0.558,25,1.243,26,1.104,28,1.318,29,0.03,30,0.581,31,0.681,32,1.318,39,1.224,48,1.654,49,0.705,53,0.342,56,0.342,58,1.533,59,1.9,64,1.704,76,1.421,86,1.121,93,1.481,104,1.049,107,0.836,111,1.131,114,2.062,126,1.066,145,0.014,146,0.019,147,0.014,261,0.77,345,2.454,579,2.789,615,3.186,625,4.765,632,3.186,634,4.497,635,3.646,636,3.646,652,1.131,662,3.186,664,2.842,666,2.311,669,3.155,670,1.863,1118,3.186,1121,2.311,1128,4.029,1157,3.646,1159,3.646,1180,4.367,1210,4.616,1232,3.646,1279,2.645,1280,5.359,1281,5.359,1282,5.359,1283,5.359,1284,5.359,1285,3.646,1286,4.344,1287,4.344,1288,3.151,1289,4.344,1290,3.151,1291,3.151,1292,3.151,1293,3.151,1294,3.151,1295,3.151,1296,3.646,1297,3.151,1298,3.151,1299,3.151,1300,4.718,1301,4.972,1302,4.972,1303,3.151,1304,4.344,1305,3.151,1306,3.151,1307,3.151]],["title/components/TempoComponent.html",[148,0.014,288,0.582]],["body/components/TempoComponent.html",[0,0.055,3,0.262,4,0.233,5,0.233,8,0.614,13,0.262,14,0.953,16,0.994,18,0.753,23,0.428,25,1.358,26,1.07,28,1.258,29,0.03,30,0.655,31,0.7,32,1.258,39,1.134,48,1.465,49,0.937,53,0.465,56,0.39,58,1.358,59,1.728,64,1.227,67,1.99,73,0.693,76,1.409,83,1.58,86,1.114,93,1.486,107,1.459,111,1.909,139,0.593,141,0.77,145,0.011,146,0.016,147,0.011,148,0.024,149,0.428,150,0.815,151,0.593,152,0.593,153,0.593,154,0.593,157,0.549,158,0.593,159,1.553,160,1.221,161,1.773,162,0.882,164,0.882,168,0.994,237,3.105,238,2.556,243,0.466,246,1.098,248,0.868,249,0.868,250,1.013,252,1.429,253,0.506,254,0.882,255,0.882,256,0.593,257,1.165,258,0.593,259,0.593,260,0.428,261,0.428,262,0.593,263,0.392,264,0.593,265,0.428,266,1.052,267,0.428,268,0.428,269,0.593,270,0.392,271,0.593,272,0.428,273,0.506,274,0.593,275,0.428,276,0.593,277,0.428,278,0.593,279,0.392,280,0.593,281,0.428,282,0.549,283,0.428,284,0.593,285,0.428,286,0.392,287,0.593,288,0.841,289,0.593,290,0.428,291,0.392,292,0.593,293,0.593,345,2.623,359,0.953,360,1.137,364,3.015,365,2.343,367,2.124,370,2.635,373,1.773,374,0.641,382,1.773,383,1.098,385,1.013,386,1.013,387,1.947,388,1.193,391,2.124,392,2.124,393,1.429,394,1.302,395,1.429,396,1.632,397,1.773,400,1.947,406,1.393,407,1.098,446,1.302,447,1.429,448,1.193,449,1.429,450,2.351,455,1.773,474,1.013,486,1.302,493,1.302,497,1.773,543,2.635,579,2.708,587,1.302,615,2.635,625,4.312,632,2.635,651,3.478,652,1.821,654,3.015,669,3.064,670,1.429,676,2.029,705,2.635,738,2.351,759,2.351,777,2.556,892,2.124,1036,3.015,1038,3.015,1092,2.124,1155,2.635,1171,3.983,1172,2.351,1173,2.351,1178,5.069,1179,3.983,1180,4.237,1181,2.635,1183,3.481,1184,2.635,1209,2.029,1210,3.144,1211,2.029,1212,2.029,1213,2.029,1220,2.029,1221,2.029,1222,3.015,1223,3.015,1224,3.015,1225,2.029,1226,3.015,1227,3.983,1228,2.351,1229,2.029,1285,3.015,1296,3.015,1300,3.015,1308,2.029,1309,3.592,1310,4.746,1311,4.287,1312,3.592,1313,4.287,1314,4.287,1315,4.287,1316,4.746,1317,4.746,1318,4.287,1319,2.417,1320,3.592,1321,2.417,1322,2.417,1323,2.417,1324,2.417,1325,2.417,1326,2.417,1327,2.417,1328,2.417,1329,4.746,1330,2.417,1331,2.417,1332,3.592,1333,2.417,1334,4.746,1335,2.417,1336,2.417,1337,4.746,1338,2.417,1339,2.417,1340,4.287,1341,3.592,1342,2.417,1343,3.592,1344,2.417,1345,3.592,1346,2.417]],["title/classes/Track.html",[0,0.074,291,0.533]],["body/classes/Track.html",[0,0.097,2,1.091,3,0.261,4,0.232,5,0.232,8,0.698,9,2.34,13,0.464,14,0.948,15,2.65,16,1.382,18,0.749,23,0.757,26,1.14,28,1.557,29,0.03,30,0.637,31,0.745,32,1.631,39,1.219,48,1.839,49,0.936,53,0.388,56,0.261,58,1.572,59,1.615,64,1.354,67,2.65,68,1.284,74,2.526,76,1.656,86,0.913,87,2.114,88,1.294,92,1.091,93,1.47,98,2.114,106,1.421,107,1.529,112,2.564,126,1.302,141,0.693,145,0.011,146,0.016,147,0.011,168,0.503,214,1.984,261,0.634,286,0.821,291,1.09,440,2.336,524,1.765,527,2.366,529,2.34,531,3.586,532,2.795,534,3.002,535,2.34,536,3.002,544,1.572,545,1.421,558,2.017,567,3.947,568,2.34,616,3.002,641,2.34,650,4.659,698,3.586,757,2.549,807,3.471,912,3.002,947,4.369,966,4.764,967,3.471,1092,2.114,1236,3.002,1347,2.017,1348,4.272,1349,4.272,1350,3.577,1351,3.972,1352,4.732,1353,4.272,1354,3.577,1355,3.577,1356,4.732,1357,4.272,1358,3.577,1359,3.577,1360,3.577,1361,3.577,1362,3.577,1363,3.577,1364,3.577,1365,2.403,1366,2.403,1367,2.403,1368,2.403,1369,2.403,1370,3.577,1371,3.972,1372,2.403,1373,2.403,1374,2.403,1375,2.403,1376,3.577,1377,2.403,1378,3.577,1379,3.577,1380,5.304,1381,3.577,1382,2.403,1383,2.403,1384,2.403,1385,2.403,1386,2.403,1387,2.403,1388,2.403,1389,2.403,1390,2.403,1391,2.403,1392,2.403,1393,3.577,1394,2.403,1395,2.403,1396,2.403,1397,3.577,1398,2.403,1399,2.403,1400,2.403,1401,2.403,1402,2.403,1403,2.403,1404,3.577,1405,3.577,1406,3.577,1407,3.577,1408,3.577,1409,2.403,1410,3.577,1411,3.002]],["title/components/TrackComponent.html",[148,0.014,290,0.582]],["body/components/TrackComponent.html",[0,0.042,3,0.201,4,0.35,5,0.179,8,0.44,10,1.876,12,1.213,13,0.201,14,0.777,16,1.12,18,0.614,23,0.329,25,1.567,26,1.074,28,0.964,29,0.03,30,0.488,31,0.676,32,0.964,39,1.031,48,1.603,49,0.967,53,0.563,56,0.318,58,1.04,59,1.433,64,0.531,72,1.579,73,0.923,74,1.096,76,0.777,83,0.976,86,1.139,88,0.999,92,1.331,93,0.825,103,0.915,104,0.617,107,1.638,111,1.799,126,1.275,139,0.455,141,0.906,142,3.921,145,0.008,146,0.013,147,0.008,148,0.02,149,0.329,150,0.665,151,0.455,152,0.455,153,0.455,154,0.455,157,0.421,158,0.455,159,1.487,160,1.169,162,0.719,164,0.719,168,1.147,214,0.777,238,1.579,243,0.358,246,0.842,247,0.915,248,1.717,249,1.966,250,2.498,251,2.58,252,2.961,253,0.388,254,0.719,255,0.719,256,0.455,257,1.014,258,0.455,259,0.455,260,0.329,261,0.797,262,0.455,263,0.301,264,0.455,265,0.329,266,0.892,267,0.329,268,0.329,269,0.455,270,0.301,271,0.455,272,0.329,273,0.388,274,0.455,275,0.329,276,0.455,277,0.329,278,0.455,279,0.301,280,0.455,281,0.329,282,0.421,283,0.329,284,0.455,285,0.519,286,0.776,287,0.455,288,0.329,289,0.455,290,0.99,291,1.059,292,0.455,293,0.455,337,1.213,338,1.556,346,1.918,359,0.777,360,0.964,361,3.05,362,2.46,365,2.472,373,2.039,374,0.492,383,1.651,384,1.096,385,1.229,386,1.731,387,1.876,388,1.794,389,1.36,390,1.733,391,2.149,392,1.096,394,0.999,396,1.331,398,2.361,399,2.378,400,1.331,401,2.149,405,1.918,406,2.263,407,2.359,409,2.666,410,2.703,411,1.733,412,2.15,428,1.556,440,1.447,445,2.149,446,2.797,447,1.096,448,2.804,449,2.442,452,1.213,453,2.666,454,1.36,461,1.229,467,1.331,473,2.22,474,2.1,486,0.999,488,2.442,491,1.096,493,1.579,498,2.15,499,1.36,500,1.918,501,1.579,511,1.556,513,1.096,524,0.915,525,1.096,529,1.918,574,2.149,578,2.487,579,2.295,585,1.733,586,1.096,587,0.999,589,1.096,603,1.36,604,3.05,605,2.666,619,3.05,640,3.029,648,2.46,650,2.666,651,1.918,652,1.92,714,1.36,719,2.378,726,2.15,738,1.213,744,2.378,757,2.225,777,2.423,801,1.213,835,1.556,851,2.15,892,1.096,925,3.776,927,3.05,928,1.556,931,3.05,933,2.46,947,2.15,965,3.05,966,2.15,967,2.15,995,3.467,1005,1.556,1046,3.05,1069,1.556,1070,1.556,1072,1.556,1074,1.556,1075,1.556,1076,1.556,1078,1.556,1079,2.46,1084,2.46,1086,2.46,1088,1.556,1089,1.556,1092,1.096,1233,1.556,1241,2.46,1253,2.46,1255,4.595,1257,2.46,1273,1.556,1275,2.46,1351,3.467,1371,3.776,1411,1.556,1412,1.556,1413,2.931,1414,2.931,1415,3.635,1416,3.635,1417,4.13,1418,2.931,1419,4.13,1420,2.931,1421,4.13,1422,3.635,1423,1.854,1424,1.854,1425,1.854,1426,1.854,1427,1.854,1428,1.854,1429,2.931,1430,1.854,1431,2.931,1432,1.854,1433,1.854,1434,1.854,1435,2.931,1436,1.854,1437,1.854,1438,2.931,1439,2.931,1440,1.854,1441,1.854,1442,1.854,1443,1.854,1444,1.854,1445,1.854,1446,1.854,1447,2.931,1448,3.635,1449,1.854,1450,1.854,1451,1.854,1452,1.854,1453,1.854,1454,1.854,1455,1.854,1456,1.854,1457,1.556,1458,1.854,1459,1.854,1460,1.854,1461,1.854,1462,2.931,1463,2.931,1464,1.854,1465,1.854,1466,2.931,1467,1.854,1468,2.931,1469,3.635,1470,2.931,1471,1.854,1472,1.854,1473,1.854,1474,2.931,1475,1.854,1476,1.854,1477,1.854,1478,1.854,1479,1.854,1480,2.931,1481,2.931,1482,3.635,1483,1.854,1484,4.13,1485,4.783,1486,1.854,1487,3.635,1488,3.635,1489,1.854,1490,1.556,1491,1.854,1492,3.635,1493,1.854,1494,2.931,1495,1.854,1496,1.854,1497,1.854,1498,1.854,1499,1.854,1500,1.854,1501,1.854,1502,1.854,1503,1.854,1504,1.854,1505,2.931,1506,1.854,1507,2.931,1508,1.854,1509,1.854,1510,1.854]],["title/coverage.html",[1511,3.751]],["body/coverage.html",[0,0.142,1,2.528,5,0.372,6,3.257,7,3.257,19,2.528,29,0.03,31,0.468,54,2.942,72,2.081,86,0.745,93,0.877,145,0.017,146,0.022,147,0.017,148,0.029,149,0.685,155,3.243,251,3.102,260,0.685,263,0.627,265,0.685,267,0.685,268,0.685,270,0.627,272,0.685,275,0.685,277,0.685,279,0.627,281,0.685,283,0.685,285,0.685,288,0.685,290,0.685,291,0.627,320,2.834,325,2.834,328,2.834,329,2.834,335,2.834,337,2.528,352,3.243,353,3.243,414,3.243,456,3.243,457,3.603,465,3.243,527,1.62,528,3.243,566,3.243,578,1.755,579,1.62,606,3.243,739,3.243,740,3.243,803,3.243,846,3.243,875,3.243,897,3.243,964,5.384,1105,3.243,1106,3.243,1143,3.257,1161,3.243,1172,2.528,1173,2.528,1230,3.243,1231,3.243,1279,3.243,1308,3.243,1347,3.243,1412,3.243,1511,3.243,1512,3.864,1513,3.864,1514,3.864,1515,5.815,1516,3.864,1517,4.038,1518,3.243,1519,6.61,1520,3.243,1521,4.977,1522,4.977,1523,5.506,1524,4.977,1525,3.864,1526,4.413,1527,4.518,1528,3.243,1529,2.834,1530,3.243,1531,3.864,1532,3.864,1533,3.864,1534,3.864,1535,3.864,1536,3.243,1537,4.977,1538,3.243,1539,3.864,1540,3.864]],["title/dependencies.html",[297,2.582,1541,2.749]],["body/dependencies.html",[29,0.03,145,0.022,146,0.026,147,0.022,243,0.96,297,3.257,313,4.881,314,4.265,317,4.178,343,4.178,357,4.178,1542,4.978,1543,5.586,1544,4.978,1545,4.978,1546,4.178,1547,4.978,1548,4.978,1549,4.978,1550,4.978,1551,4.978,1552,4.978,1553,4.978,1554,4.978,1555,4.978]],["title/miscellaneous/enumerations.html",[1556,1.249,1557,3.312]],["body/miscellaneous/enumerations.html",[13,0.335,16,1.314,29,0.03,30,0.606,31,0.374,67,2.063,70,2.805,71,2.805,81,2.267,83,1.858,93,1.508,103,1.526,112,1.947,126,1.052,129,3.144,141,1.077,145,0.014,146,0.019,147,0.014,214,1.797,286,0.695,406,1.662,497,2.267,509,2.595,512,3.598,524,2.624,595,2.595,598,3.144,599,3.598,621,2.267,669,2.116,770,3.144,818,2.595,832,3.598,1143,3.478,1228,2.023,1490,2.595,1517,2.267,1526,2.267,1527,4.237,1529,2.267,1556,1.404,1557,2.595,1558,2.595,1559,2.595,1560,4.287,1561,3.092,1562,2.595,1563,3.092,1564,5.315,1565,3.092,1566,3.092,1567,4.461,1568,4.922,1569,3.092,1570,5.583,1571,3.092,1572,4.461,1573,3.092,1574,5.315,1575,3.092,1576,3.092,1577,2.595,1578,4.287,1579,4.287,1580,4.287,1581,5.315,1582,4.287,1583,4.287,1584,4.287,1585,4.287,1586,4.287,1587,4.287,1588,3.092,1589,3.092,1590,4.287,1591,4.287,1592,4.287,1593,6.039,1594,4.287,1595,4.287,1596,4.287,1597,4.287,1598,4.287,1599,4.287,1600,4.287,1601,4.287,1602,3.092,1603,3.092,1604,3.092,1605,4.287,1606,3.092,1607,2.595,1608,3.092,1609,3.092,1610,3.092,1611,3.092,1612,3.092,1613,3.092,1614,3.092,1615,3.092,1616,4.287,1617,3.092,1618,4.287,1619,3.092,1620,3.092,1621,3.092,1622,3.092,1623,3.092,1624,3.092,1625,3.092,1626,3.092,1627,3.092,1628,3.092,1629,3.092,1630,3.092,1631,3.092,1632,3.092,1633,3.092,1634,3.092,1635,3.092,1636,3.092,1637,3.092,1638,3.092,1639,3.092,1640,3.092,1641,3.092,1642,3.092,1643,3.092,1644,3.092,1645,3.092,1646,3.092,1647,3.092,1648,3.092,1649,3.092,1650,3.092,1651,3.092,1652,3.092,1653,3.092,1654,3.092,1655,3.092,1656,3.092,1657,3.092,1658,3.092,1659,3.092,1660,3.092,1661,3.092,1662,3.092,1663,3.092,1664,3.092,1665,3.092,1666,3.092,1667,3.092,1668,3.092,1669,3.092,1670,3.092,1671,3.092,1672,3.092,1673,3.092,1674,3.092,1675,3.092,1676,3.092,1677,3.092,1678,3.092,1679,3.092,1680,3.092,1681,3.092,1682,3.092,1683,3.092,1684,3.092,1685,3.092,1686,3.092,1687,3.092,1688,3.092,1689,3.092,1690,3.092,1691,3.092,1692,3.092,1693,3.092,1694,3.092,1695,3.092,1696,3.092,1697,3.092,1698,3.092,1699,3.092,1700,3.092,1701,3.092,1702,3.092,1703,3.092,1704,3.092,1705,3.092,1706,3.092,1707,3.092,1708,3.092,1709,3.092,1710,3.092,1711,3.092,1712,3.092,1713,3.092,1714,3.092,1715,3.092,1716,3.092,1717,3.092,1718,3.092,1719,3.092,1720,3.092,1721,3.092,1722,3.092,1723,3.092,1724,3.092,1725,3.092,1726,3.092,1727,3.092,1728,3.092,1729,3.092,1730,3.092,1731,3.092,1732,3.092,1733,3.092,1734,3.092,1735,3.092,1736,3.092,1737,3.092,1738,3.092,1739,3.092,1740,3.092,1741,3.092,1742,3.092,1743,3.092,1744,3.092,1745,3.092,1746,3.092,1747,3.092,1748,3.092,1749,2.267,1750,3.092,1751,3.092,1752,3.092,1753,4.287,1754,3.092,1755,3.092,1756,3.092,1757,3.092,1758,3.092,1759,3.092,1760,3.092,1761,3.092,1762,3.092,1763,3.092,1764,3.092,1765,3.092,1766,3.092,1767,3.092,1768,3.092,1769,3.092,1770,3.092,1771,3.092,1772,3.092,1773,3.092,1774,3.092,1775,3.092,1776,3.092]],["title/miscellaneous/functions.html",[1556,1.249,1777,3.312]],["body/miscellaneous/functions.html",[8,0.76,12,3.269,13,0.422,16,1.293,19,3.269,28,1.664,29,0.03,30,0.725,32,1.664,39,1.239,42,3.664,72,2.093,76,1.636,78,2.85,83,1.663,88,2.093,90,2.85,92,2.269,93,1.526,111,2.165,112,1.765,126,0.954,141,0.81,145,0.017,146,0.022,147,0.017,160,0.75,214,1.629,286,0.978,345,3.17,473,1.918,621,4.049,627,1.918,642,2.85,659,2.85,669,2.725,719,2.543,759,3.613,805,2.85,815,3.262,996,3.262,1058,4.634,1128,3.269,1143,4.159,1172,3.269,1173,3.269,1181,2.85,1183,4.274,1184,2.85,1517,2.85,1518,4.193,1520,4.193,1526,2.85,1527,4.662,1528,4.193,1529,2.85,1530,4.193,1546,3.262,1556,1.765,1558,5.06,1559,3.262,1562,4.634,1567,3.262,1572,3.262,1749,2.85,1777,3.262,1778,4.996,1779,3.887,1780,3.887,1781,3.887,1782,3.887,1783,3.887,1784,3.887,1785,3.887,1786,3.887,1787,3.887,1788,3.887,1789,3.887,1790,3.887,1791,3.887,1792,3.887,1793,3.887]],["title/index.html",[13,0.298,1794,2.749,1795,2.749]],["body/index.html",[4,0.445,29,0.024,30,0.501,41,3.019,86,0.89,139,1.465,145,0.02,146,0.024,147,0.02,148,0.026,160,0.89,241,3.872,309,3.019,416,3.872,473,2.277,545,2.728,656,4.666,664,3.019,1055,3.872,1092,3.662,1164,4.666,1457,3.872,1543,3.872,1796,4.614,1797,5.967,1798,5.967,1799,4.614,1800,5.559,1801,6.338,1802,6.512,1803,4.614,1804,4.614,1805,4.614,1806,4.614,1807,4.614,1808,4.614,1809,4.614,1810,4.614,1811,4.614,1812,5.967,1813,4.614,1814,6.338,1815,4.614,1816,4.614,1817,4.614,1818,4.614,1819,4.614,1820,4.614,1821,3.872,1822,5.559,1823,6.194,1824,5.559,1825,5.559,1826,4.614,1827,4.614,1828,4.614,1829,4.614,1830,5.967,1831,3.384,1832,4.614,1833,4.614]],["title/modules.html",[296,2.642]],["body/modules.html",[29,0.026,79,3.844,145,0.023,146,0.026,147,0.023,295,3.429,296,3.098,306,3.098,314,3.844,1834,5.241,1835,5.991,1836,5.241,1837,5.241]],["title/overview.html",[1831,3.278]],["body/overview.html",[2,1.987,29,0.03,145,0.019,146,0.024,147,0.019,149,1.141,150,0.993,214,1.834,253,0.916,260,1.033,263,0.945,265,1.033,267,1.033,268,1.033,270,0.945,272,1.033,275,1.033,277,1.033,279,0.945,281,1.033,283,1.033,285,1.033,288,1.033,290,1.033,294,2.862,295,4.502,296,2.586,297,2.862,298,3.671,299,3.671,300,3.671,301,2.862,302,3.671,303,3.671,304,3.671,305,3.671,306,3.446,307,4.516,308,3.671,309,2.862,341,2.862,1228,2.862,1577,3.671,1607,3.671,1831,3.208]],["title/routes.html",[341,2.924]],["body/routes.html",[29,0.027,145,0.023,146,0.027,147,0.023,341,3.479]],["title/miscellaneous/typealiases.html",[1556,1.249,1838,3.946]],["body/miscellaneous/typealiases.html",[6,3.418,7,3.913,13,0.567,29,0.026,31,0.724,57,4.386,145,0.023,146,0.026,147,0.023,1556,2.373,1839,5.224,1840,5.224,1841,5.224]],["title/miscellaneous/variables.html",[1556,1.249,1842,3.312]],["body/miscellaneous/variables.html",[13,0.534,29,0.03,31,0.699,54,3.862,83,1.637,104,1.637,141,0.937,145,0.022,146,0.025,147,0.022,156,4.235,168,1.21,652,1.766,746,4.128,1118,4.235,1536,4.128,1538,4.128,1556,2.234,1749,3.607,1821,5.145,1842,5.145,1843,4.918,1844,4.918,1845,4.918,1846,4.918,1847,4.918,1848,4.918,1849,4.918,1850,4.918,1851,4.918,1852,4.918]]],"invertedIndex":[["",{"_index":29,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":107,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["0.05rem",{"_index":1225,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["0.10.2",{"_index":1555,"title":{},"body":{"dependencies.html":{}}}],["0.1688888",{"_index":712,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["0.1rem",{"_index":1229,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["0.25rem",{"_index":738,"title":{},"body":{"components/MetronomeComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["0.2rem",{"_index":604,"title":{},"body":{"components/MeasureComponent.html":{},"components/TrackComponent.html":{}}}],["0.5rem",{"_index":525,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["0.75",{"_index":526,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["0.75rem",{"_index":892,"title":{},"body":{"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["0.8373333",{"_index":711,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["0.85",{"_index":484,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["0.8em",{"_index":736,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["0;1",{"_index":1257,"title":{},"body":{"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["0px",{"_index":1079,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["0s",{"_index":1251,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["0|1)|47|mc|nd|ri)|sgh",{"_index":219,"title":{},"body":{"components/AppComponent.html":{}}}],["0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h",{"_index":222,"title":{},"body":{"components/AppComponent.html":{}}}],["1",{"_index":126,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["1.2em",{"_index":706,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["1.3",{"_index":403,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["1.3em",{"_index":382,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["1.5em",{"_index":705,"title":{},"body":{"components/MetronomeComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["1.5rem",{"_index":450,"title":{},"body":{"components/DashboardComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["1.6",{"_index":402,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["1.6em",{"_index":380,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["1.75",{"_index":1095,"title":{},"body":{"components/RhythmComponent.html":{}}}],["1.8em",{"_index":1085,"title":{},"body":{"components/RhythmComponent.html":{}}}],["1.wav",{"_index":1754,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["1/1",{"_index":1519,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":497,"title":{},"body":{"components/MainMenuComponent.html":{},"components/TempoComponent.html":{},"miscellaneous/enumerations.html":{}}}],["100",{"_index":251,"title":{},"body":{"components/AppComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{}}}],["1000",{"_index":1016,"title":{},"body":{"components/RhythmComponent.html":{}}}],["100vh",{"_index":489,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["11",{"_index":1613,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["11.0.4",{"_index":1543,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["11/11",{"_index":1523,"title":{},"body":{"coverage.html":{}}}],["112.5",{"_index":703,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["113.2",{"_index":597,"title":{},"body":{"components/MeasureComponent.html":{}}}],["12",{"_index":1615,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["12/12",{"_index":1534,"title":{},"body":{"coverage.html":{}}}],["120",{"_index":682,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["120.6",{"_index":482,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["1207|6310|6590|3gso|4thp|50[1",{"_index":174,"title":{},"body":{"components/AppComponent.html":{}}}],["12rem",{"_index":451,"title":{},"body":{"components/DashboardComponent.html":{},"components/RhythmComponent.html":{}}}],["13",{"_index":1617,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["13/13",{"_index":1524,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":1619,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["14/14",{"_index":1522,"title":{},"body":{"coverage.html":{}}}],["153",{"_index":594,"title":{},"body":{"components/MeasureComponent.html":{}}}],["16",{"_index":1577,"title":{},"body":{"miscellaneous/enumerations.html":{},"overview.html":{}}}],["16n",{"_index":1594,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["19/19",{"_index":1535,"title":{},"body":{"coverage.html":{}}}],["1n",{"_index":595,"title":{},"body":{"components/MeasureComponent.html":{},"miscellaneous/enumerations.html":{}}}],["1rem",{"_index":384,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/SignatureComponent.html":{},"components/TrackComponent.html":{}}}],["2",{"_index":214,"title":{},"body":{"components/AppComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["2.0.0",{"_index":1553,"title":{},"body":{"dependencies.html":{}}}],["2.4em",{"_index":1087,"title":{},"body":{"components/RhythmComponent.html":{}}}],["2.wav",{"_index":1756,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["2/2",{"_index":1532,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1090,"title":{},"body":{"components/RhythmComponent.html":{}}}],["20|go|ma)|i230|iac",{"_index":196,"title":{},"body":{"components/AppComponent.html":{}}}],["23/23",{"_index":1525,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":724,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["255",{"_index":1227,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["275px",{"_index":520,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["28/28",{"_index":1533,"title":{},"body":{"coverage.html":{}}}],["28n",{"_index":1600,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["2]|n20[2",{"_index":207,"title":{},"body":{"components/AppComponent.html":{}}}],["2n",{"_index":1590,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["2rem",{"_index":603,"title":{},"body":{"components/MeasureComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["2s",{"_index":732,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["2|po(ck|rt|se)|prox|psio|pt",{"_index":211,"title":{},"body":{"components/AppComponent.html":{}}}],["3",{"_index":103,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/NoteRepresentation.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{}}}],["3.0.0",{"_index":1548,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":1549,"title":{},"body":{"dependencies.html":{}}}],["3.5rem",{"_index":435,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["3/3",{"_index":1515,"title":{},"body":{"coverage.html":{}}}],["30rem",{"_index":700,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m",{"_index":208,"title":{},"body":{"components/AppComponent.html":{}}}],["3rem",{"_index":1069,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["4",{"_index":598,"title":{},"body":{"components/MeasureComponent.html":{},"classes/Signature.html":{},"miscellaneous/enumerations.html":{}}}],["40",{"_index":519,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["45deg",{"_index":723,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["49.1",{"_index":481,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["4n",{"_index":1591,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["5",{"_index":1490,"title":{},"body":{"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{}}}],["5/5",{"_index":1531,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":410,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["500",{"_index":521,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["5rem",{"_index":455,"title":{},"body":{"components/DashboardComponent.html":{},"components/MetronomeComponent.html":{},"components/TempoComponent.html":{}}}],["5|g",{"_index":189,"title":{},"body":{"components/AppComponent.html":{}}}],["6",{"_index":1607,"title":{},"body":{"miscellaneous/enumerations.html":{},"overview.html":{}}}],["6.6.0",{"_index":1551,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1516,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":666,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"classes/Tempo.html":{}}}],["60vw",{"_index":439,"title":{},"body":{"components/DashboardComponent.html":{}}}],["6]i|770s|802s|a",{"_index":175,"title":{},"body":{"components/AppComponent.html":{}}}],["6rem",{"_index":1083,"title":{},"body":{"components/RhythmComponent.html":{}}}],["7",{"_index":1228,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["75",{"_index":728,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["77",{"_index":601,"title":{},"body":{"components/MeasureComponent.html":{}}}],["7]0|os|wa|ze)|fetc|fly",{"_index":186,"title":{},"body":{"components/AppComponent.html":{}}}],["7]|i",{"_index":215,"title":{},"body":{"components/AppComponent.html":{}}}],["8",{"_index":512,"title":{},"body":{"components/MainMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["8/8",{"_index":1521,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1507,"title":{},"body":{"components/TrackComponent.html":{}}}],["87",{"_index":1491,"title":{},"body":{"components/TrackComponent.html":{}}}],["8]|c))|phil|pire|pl(ay|uc)|pn",{"_index":210,"title":{},"body":{"components/AppComponent.html":{}}}],["8n",{"_index":1592,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["8rem",{"_index":1066,"title":{},"body":{"components/RhythmComponent.html":{}}}],["9",{"_index":509,"title":{},"body":{"components/MainMenuComponent.html":{},"miscellaneous/enumerations.html":{}}}],["90",{"_index":702,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["9rem",{"_index":1483,"title":{},"body":{"components/TrackComponent.html":{}}}],["9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0",{"_index":230,"title":{},"body":{"components/AppComponent.html":{}}}],["_",{"_index":1581,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_)|g1",{"_index":187,"title":{},"body":{"components/AppComponent.html":{}}}],["_16n_8n_16n",{"_index":1606,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_16n_r",{"_index":1618,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_1n_r",{"_index":1611,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_2_16n",{"_index":1605,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_2_16n_2_8n",{"_index":1769,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_2_16n_8n",{"_index":1609,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_2_16n_8n_2_16n",{"_index":1772,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_2_8n",{"_index":1604,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_2_8n_2_16n",{"_index":1768,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_2n_r",{"_index":1612,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_3_16n_d_8n",{"_index":1771,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_3_8n",{"_index":1762,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_4_16n",{"_index":1610,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_4_16n_8n",{"_index":1765,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_4_8n",{"_index":1603,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_4n",{"_index":1601,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_4n_r",{"_index":1614,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_4n_tr",{"_index":1602,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_6_16n",{"_index":1763,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_8n",{"_index":1761,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_8n_16n_8n",{"_index":1767,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_8n_2_16n",{"_index":1608,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_8n_2_16n_8n",{"_index":1766,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_8n_4_16n",{"_index":1764,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_8n_r",{"_index":1616,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_d_2n_r",{"_index":1774,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_d_4n",{"_index":1760,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_d_4n_r",{"_index":1775,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_d_8n_3_16n",{"_index":1770,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_d_8n_r",{"_index":1776,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_du",{"_index":1773,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["_|a|g|p|s|t)|tp)|hu(aw|tc)|i",{"_index":195,"title":{},"body":{"components/AppComponent.html":{}}}],["absolute",{"_index":405,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/TrackComponent.html":{}}}],["absvertcenteredinteractive",{"_index":1492,"title":{},"body":{"components/TrackComponent.html":{}}}],["according",{"_index":771,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["accordion",{"_index":1642,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["acoustic_bass",{"_index":1653,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["acoustic_grand_piano",{"_index":1621,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["acoustic_guitar_nylon",{"_index":1645,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["acoustic_guitar_steel",{"_index":1646,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["active",{"_index":468,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["actual_component",{"_index":293,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["actually",{"_index":932,"title":{},"body":{"components/RhythmComponent.html":{}}}],["add",{"_index":9,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["added",{"_index":933,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["addnote",{"_index":912,"title":{},"body":{"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["addnote(evt",{"_index":924,"title":{},"body":{"components/RhythmComponent.html":{}}}],["addnote(note",{"_index":1372,"title":{},"body":{"classes/Track.html":{}}}],["addon",{"_index":1,"title":{"classes/AddOn.html":{}},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"coverage.html":{}}}],["addon#number",{"_index":60,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["addon#usehook",{"_index":61,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["addon(addon.number",{"_index":133,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["addon.usehook",{"_index":134,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["addonjson",{"_index":57,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/typealiases.html":{}}}],["addonjson|null",{"_index":96,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["addtoimgspaths",{"_index":853,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["addtoimgspaths(imgname",{"_index":117,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["addtrack",{"_index":913,"title":{},"body":{"components/RhythmComponent.html":{}}}],["addtrack(bool",{"_index":929,"title":{},"body":{"components/RhythmComponent.html":{}}}],["afterward",{"_index":571,"title":{},"body":{"components/MeasureComponent.html":{}}}],["agogo",{"_index":1734,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di",{"_index":177,"title":{},"body":{"components/AppComponent.html":{}}}],["ajouter",{"_index":376,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["aliases",{"_index":1839,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":396,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["allow",{"_index":1309,"title":{},"body":{"components/TempoComponent.html":{}}}],["allows",{"_index":459,"title":{},"body":{"components/ExportMenuComponent.html":{},"components/MetronomeSoundComponent.html":{}}}],["along",{"_index":748,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["alto_sax",{"_index":1686,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["amount",{"_index":1275,"title":{},"body":{"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["anacrouse",{"_index":1053,"title":{},"body":{"components/RhythmComponent.html":{}}}],["android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|android|silk|lge",{"_index":169,"title":{},"body":{"components/AppComponent.html":{}}}],["angular",{"_index":1797,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1542,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":1544,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":1545,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":243,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":343,"title":{},"body":{"modules/AppRoutingModule.html":{},"dependencies.html":{}}}],["animation",{"_index":730,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["animation($name",{"_index":716,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["animation(record",{"_index":1102,"title":{},"body":{"components/RhythmComponent.html":{}}}],["animation(rotating",{"_index":720,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["anote",{"_index":562,"title":{},"body":{"classes/Measure.html":{}}}],["anote.tostring",{"_index":563,"title":{},"body":{"classes/Measure.html":{}}}],["app",{"_index":160,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["app.component",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":165,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.sass",{"_index":163,"title":{},"body":{"components/AppComponent.html":{}}}],["appareil",{"_index":433,"title":{},"body":{"components/DashboardComponent.html":{}}}],["appcomponent",{"_index":149,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["applause",{"_index":1747,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["application",{"_index":156,"title":{},"body":{"components/AppComponent.html":{},"components/MainMenuComponent.html":{},"miscellaneous/variables.html":{}}}],["apply",{"_index":1439,"title":{},"body":{"components/TrackComponent.html":{}}}],["appmodule",{"_index":295,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":306,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["around",{"_index":1094,"title":{},"body":{"components/RhythmComponent.html":{}}}],["array",{"_index":87,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["article",{"_index":1500,"title":{},"body":{"components/TrackComponent.html":{}}}],["artifacts",{"_index":1815,"title":{},"body":{"index.html":{}}}],["aside",{"_index":485,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["assets/images",{"_index":1846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/images/notes",{"_index":1850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/images/rythms",{"_index":1848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/sounds",{"_index":1851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/sounds/metronome/clock",{"_index":1753,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["assets/sounds/metronome/toc.wav",{"_index":1751,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["associated",{"_index":1128,"title":{},"body":{"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"miscellaneous/functions.html":{}}}],["async",{"_index":752,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["atmeasure",{"_index":914,"title":{},"body":{"components/RhythmComponent.html":{}}}],["atrack",{"_index":1060,"title":{},"body":{"components/RhythmComponent.html":{}}}],["atrack.tostring",{"_index":1062,"title":{},"body":{"components/RhythmComponent.html":{}}}],["attribute",{"_index":367,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"components/TempoComponent.html":{}}}],["attributes",{"_index":98,"title":{},"body":{"classes/AddOn.html":{},"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/NoteRepresentation.html":{},"classes/Track.html":{}}}],["audio",{"_index":1245,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["audio(\"../\"+environment.pathsfromapp.sounds+this.soundname",{"_index":1260,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["auto",{"_index":440,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["automatically",{"_index":1807,"title":{},"body":{"index.html":{}}}],["available",{"_index":1837,"title":{},"body":{"modules.html":{}}}],["avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw",{"_index":180,"title":{},"body":{"components/AppComponent.html":{}}}],["await",{"_index":774,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["a|qc(07|12|21|32|60",{"_index":213,"title":{},"body":{"components/AppComponent.html":{}}}],["backgrond",{"_index":1091,"title":{},"body":{"components/RhythmComponent.html":{}}}],["background",{"_index":407,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["backward",{"_index":880,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["bagpipe",{"_index":1730,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["banjo",{"_index":1726,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bar",{"_index":876,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["baritone_sax",{"_index":1688,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["base",{"_index":1122,"title":{},"body":{"classes/Signature.html":{},"components/SignatureComponent.html":{}}}],["base.svg",{"_index":708,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["based",{"_index":641,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"classes/Track.html":{}}}],["basicnote",{"_index":669,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["basicnote#getnumber|number",{"_index":1154,"title":{},"body":{"classes/Signature.html":{}}}],["basicnote#imgpath|image",{"_index":1159,"title":{},"body":{"classes/Signature.html":{},"classes/Tempo.html":{}}}],["basicnote#name|name",{"_index":1157,"title":{},"body":{"classes/Signature.html":{},"classes/Tempo.html":{}}}],["basicnote#number|number",{"_index":1304,"title":{},"body":{"classes/Tempo.html":{}}}],["basicnote's",{"_index":1787,"title":{},"body":{"miscellaneous/functions.html":{}}}],["basicnote.getimgpath(note",{"_index":1212,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["basicnote.getimgpath(this.bottom",{"_index":1160,"title":{},"body":{"classes/Signature.html":{}}}],["basicnote.getimgpath(this.note",{"_index":1306,"title":{},"body":{"classes/Tempo.html":{}}}],["basicnote.getname(note",{"_index":1213,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["basicnote.getname(this.bottom",{"_index":1158,"title":{},"body":{"classes/Signature.html":{}}}],["basicnote.getname(this.note",{"_index":1307,"title":{},"body":{"classes/Tempo.html":{}}}],["basicnote.getnumber(this.bottom",{"_index":1156,"title":{},"body":{"classes/Signature.html":{}}}],["basicnote.getnumber(this.note",{"_index":1305,"title":{},"body":{"classes/Tempo.html":{}}}],["basicnote.quarter_note",{"_index":1121,"title":{},"body":{"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{}}}],["basicnote.values",{"_index":1211,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["basicnote|basicnote",{"_index":1298,"title":{},"body":{"classes/Tempo.html":{}}}],["basicnote|note",{"_index":1155,"title":{},"body":{"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["basicnote|null",{"_index":1299,"title":{},"body":{"classes/Tempo.html":{}}}],["bassoon",{"_index":1691,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["beat",{"_index":634,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Tempo.html":{}}}],["beats",{"_index":626,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["before",{"_index":404,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["beginning",{"_index":998,"title":{},"body":{"components/RhythmComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["begins",{"_index":1379,"title":{},"body":{"classes/Track.html":{}}}],["begun",{"_index":972,"title":{},"body":{"components/RhythmComponent.html":{}}}],["behavior",{"_index":1075,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["behaviour",{"_index":1462,"title":{},"body":{"components/TrackComponent.html":{}}}],["being",{"_index":238,"title":{},"body":{"components/AppComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["between",{"_index":445,"title":{},"body":{"components/DashboardComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["binary",{"_index":815,"title":{},"body":{"classes/Note.html":{},"miscellaneous/functions.html":{}}}],["binarynote",{"_index":70,"title":{},"body":{"classes/AddOn.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/enumerations.html":{}}}],["binarynote._4n",{"_index":843,"title":{},"body":{"classes/Note.html":{}}}],["binary|ternary",{"_index":841,"title":{},"body":{"classes/Note.html":{}}}],["binded",{"_index":743,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["bird_tweet",{"_index":1744,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["block",{"_index":390,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/TrackComponent.html":{}}}],["blown_bottle",{"_index":1697,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bold",{"_index":1099,"title":{},"body":{"components/RhythmComponent.html":{}}}],["bool",{"_index":931,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["boolean",{"_index":25,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["boolean|null",{"_index":140,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["bootstrap",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["bord",{"_index":421,"title":{},"body":{"components/DashboardComponent.html":{}}}],["border",{"_index":448,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["border_width",{"_index":1485,"title":{},"body":{"components/TrackComponent.html":{}}}],["both",{"_index":1120,"title":{},"body":{"classes/Signature.html":{}}}],["bottom",{"_index":501,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/TrackComponent.html":{}}}],["bottom's",{"_index":1126,"title":{},"body":{"classes/Signature.html":{}}}],["box",{"_index":453,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/TrackComponent.html":{}}}],["bpm",{"_index":625,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["brass_section",{"_index":1682,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["breath_noise",{"_index":1742,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bright_acoustic_piano",{"_index":1622,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["browse",{"_index":1835,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browsermodule",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":1814,"title":{},"body":{"index.html":{}}}],["button",{"_index":491,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["button:first",{"_index":890,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["button:nth",{"_index":893,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["button_size",{"_index":1068,"title":{},"body":{"components/RhythmComponent.html":{}}}],["buttons",{"_index":877,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["calc(100",{"_index":494,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["calc(100vh",{"_index":1077,"title":{},"body":{"components/RhythmComponent.html":{}}}],["called",{"_index":765,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["capital",{"_index":1783,"title":{},"body":{"miscellaneous/functions.html":{}}}],["celesta",{"_index":1629,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cello",{"_index":1663,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cell|chtm|cldc|cmd",{"_index":182,"title":{},"body":{"components/AppComponent.html":{}}}],["center",{"_index":387,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["certain",{"_index":869,"title":{},"body":{"classes/NoteRepresentation.html":{},"components/SoundPlayerComponent.html":{}}}],["ce|phone)|xda|xiino/i.test(navigator.useragent",{"_index":173,"title":{},"body":{"components/AppComponent.html":{}}}],["change",{"_index":473,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["changed",{"_index":654,"title":{},"body":{"components/MetronomeComponent.html":{},"components/TempoComponent.html":{}}}],["changes",{"_index":570,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["changesoundplan",{"_index":1417,"title":{},"body":{"components/TrackComponent.html":{}}}],["check",{"_index":41,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"classes/Signature.html":{},"index.html":{}}}],["child",{"_index":891,"title":{},"body":{"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{}}}],["child(1",{"_index":1082,"title":{},"body":{"components/RhythmComponent.html":{}}}],["child(1)>img",{"_index":895,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["child(2",{"_index":894,"title":{},"body":{"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{}}}],["child::after",{"_index":506,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["child::before",{"_index":504,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["choir_aahs",{"_index":1673,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["chose",{"_index":1179,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["church_organ",{"_index":1640,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["clarinet",{"_index":1692,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["class",{"_index":0,"title":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"classes/Signature.html":{},"classes/Tempo.html":{},"classes/Track.html":{}},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"classes/Signature.html":{},"classes/Tempo.html":{},"classes/Track.html":{},"overview.html":{}}}],["classes/measure",{"_index":588,"title":{},"body":{"components/MeasureComponent.html":{}}}],["classes/metronome",{"_index":668,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{}}}],["classes/note",{"_index":851,"title":{},"body":{"components/NoteComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["classes/signature",{"_index":586,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TrackComponent.html":{}}}],["classes/sound",{"_index":1449,"title":{},"body":{"components/TrackComponent.html":{}}}],["classes/tempo",{"_index":587,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["classes/track",{"_index":1005,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["clavinet",{"_index":1628,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["clear",{"_index":1375,"title":{},"body":{"classes/Track.html":{}}}],["clearnotes",{"_index":1349,"title":{},"body":{"classes/Track.html":{}}}],["cli",{"_index":1798,"title":{},"body":{"index.html":{}}}],["clip",{"_index":1504,"title":{},"body":{"components/TrackComponent.html":{}}}],["clock_1",{"_index":1752,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["clock_2",{"_index":1755,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cluster_appmodule",{"_index":302,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":305,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":303,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["co(mp|nd)|craw|da(it|ll|ng)|dbte|dc",{"_index":183,"title":{},"body":{"components/AppComponent.html":{}}}],["code",{"_index":1810,"title":{},"body":{"index.html":{}}}],["color",{"_index":446,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["column",{"_index":444,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{}}}],["command",{"_index":1832,"title":{},"body":{"index.html":{}}}],["compatible",{"_index":1119,"title":{},"body":{"classes/Signature.html":{}}}],["complete",{"_index":1778,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compoenent",{"_index":354,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["compoenent's",{"_index":949,"title":{},"body":{"components/RhythmComponent.html":{}}}],["componenet",{"_index":772,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["componenet's",{"_index":945,"title":{},"body":{"components/RhythmComponent.html":{}}}],["component",{"_index":148,"title":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"index.html":{}}}],["component's",{"_index":742,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["component_template",{"_index":258,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["components",{"_index":150,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"overview.html":{}}}],["condition",{"_index":142,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/TrackComponent.html":{}}}],["console.log(\"clicked",{"_index":692,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["console.log(\"enter",{"_index":550,"title":{},"body":{"classes/Measure.html":{}}}],["console.log(\"if",{"_index":555,"title":{},"body":{"classes/Measure.html":{}}}],["console.log(\"new",{"_index":1013,"title":{},"body":{"components/RhythmComponent.html":{}}}],["console.log(\"tried",{"_index":1274,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["console.log(measure.curmaxpos",{"_index":553,"title":{},"body":{"classes/Measure.html":{}}}],["console.log(numberofwholenote",{"_index":593,"title":{},"body":{"components/MeasureComponent.html":{}}}],["console.log(result",{"_index":1024,"title":{},"body":{"components/RhythmComponent.html":{}}}],["console.log(this.position",{"_index":559,"title":{},"body":{"classes/Measure.html":{}}}],["console.log(this.tostring",{"_index":560,"title":{},"body":{"classes/Measure.html":{}}}],["console.log(trackid",{"_index":551,"title":{},"body":{"classes/Measure.html":{}}}],["console.log(trackid.tostring(10",{"_index":552,"title":{},"body":{"classes/Measure.html":{}}}],["const",{"_index":344,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["constructor",{"_index":23,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["constructor(imgsnames",{"_index":105,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["constructor(instrument",{"_index":1360,"title":{},"body":{"classes/Track.html":{}}}],["constructor(note",{"_index":1286,"title":{},"body":{"classes/Tempo.html":{}}}],["constructor(number",{"_index":24,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["constructor(timecode",{"_index":829,"title":{},"body":{"classes/Note.html":{}}}],["constructor(top",{"_index":1116,"title":{},"body":{"classes/Signature.html":{}}}],["constructor(trackid",{"_index":549,"title":{},"body":{"classes/Measure.html":{}}}],["contain",{"_index":709,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["content",{"_index":386,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["contrabass",{"_index":1664,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["controls",{"_index":704,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["controls_height",{"_index":1067,"title":{},"body":{"components/RhythmComponent.html":{}}}],["conversion",{"_index":978,"title":{},"body":{"components/RhythmComponent.html":{}}}],["convertimgnametopath",{"_index":854,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["convertimgnametopath(imgname",{"_index":863,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["correct",{"_index":976,"title":{},"body":{"components/RhythmComponent.html":{}}}],["correspond",{"_index":747,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["corresponds",{"_index":1363,"title":{},"body":{"classes/Track.html":{}}}],["coverage",{"_index":1511,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":261,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["created",{"_index":1579,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["createtrack",{"_index":363,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["createtrackcomponent",{"_index":260,"title":{"components/CreateTrackComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["creating",{"_index":358,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t",{"_index":204,"title":{},"body":{"components/AppComponent.html":{}}}],["créer",{"_index":476,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["curid",{"_index":538,"title":{},"body":{"classes/Measure.html":{}}}],["curmaxpos",{"_index":530,"title":{},"body":{"classes/Measure.html":{}}}],["current",{"_index":543,"title":{},"body":{"classes/Measure.html":{},"components/RhythmComponent.html":{},"components/TempoComponent.html":{}}}],["currently",{"_index":935,"title":{},"body":{"components/RhythmComponent.html":{}}}],["cursor",{"_index":391,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["c|ht(c",{"_index":194,"title":{},"body":{"components/AppComponent.html":{}}}],["d",{"_index":1586,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4",{"_index":185,"title":{},"body":{"components/AppComponent.html":{}}}],["dark",{"_index":510,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["dashboard",{"_index":347,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/DashboardComponent.html":{}}}],["dashboard'},{'name",{"_index":264,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["dashboard.component.html",{"_index":418,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard.component.sass",{"_index":417,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard/dashboard.component",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["dashboardcomponent",{"_index":263,"title":{"components/DashboardComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["date",{"_index":982,"title":{},"body":{"components/RhythmComponent.html":{}}}],["date.now",{"_index":1022,"title":{},"body":{"components/RhythmComponent.html":{}}}],["de",{"_index":420,"title":{},"body":{"components/DashboardComponent.html":{}}}],["debug",{"_index":1852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":298,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["default",{"_index":168,"title":{},"body":{"components/AppComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":607,"title":{},"body":{"components/MetronomeComponent.html":{},"components/SignatureComponent.html":{}}}],["defined",{"_index":26,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["delete",{"_index":1378,"title":{},"body":{"classes/Track.html":{}}}],["deletenotesbetweentimecodes",{"_index":1350,"title":{},"body":{"classes/Track.html":{}}}],["deletenotesbetweentimecodes(from",{"_index":1376,"title":{},"body":{"classes/Track.html":{}}}],["denominator",{"_index":1785,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dependencies",{"_index":297,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depuis",{"_index":431,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["details",{"_index":1289,"title":{},"body":{"classes/Tempo.html":{}}}],["dev",{"_index":1804,"title":{},"body":{"index.html":{}}}],["development",{"_index":1799,"title":{},"body":{"index.html":{}}}],["different",{"_index":81,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/enumerations.html":{}}}],["direction",{"_index":443,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{}}}],["directive",{"_index":256,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["directives",{"_index":292,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":1813,"title":{},"body":{"index.html":{}}}],["directly",{"_index":1332,"title":{},"body":{"components/TempoComponent.html":{}}}],["directory",{"_index":1818,"title":{},"body":{"index.html":{}}}],["dirpath",{"_index":75,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["display",{"_index":248,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["displayed",{"_index":1235,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["dist",{"_index":1817,"title":{},"body":{"index.html":{}}}],["distortion_guitar",{"_index":1651,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["div",{"_index":388,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MeasureComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["div:nth",{"_index":1081,"title":{},"body":{"components/RhythmComponent.html":{}}}],["documentation",{"_index":1512,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":996,"title":{},"body":{"components/RhythmComponent.html":{},"miscellaneous/functions.html":{}}}],["dom",{"_index":153,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["dotted",{"_index":1587,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["drawbar_organ",{"_index":1637,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["drop",{"_index":1223,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["du",{"_index":1758,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["due",{"_index":1582,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dulcimer",{"_index":1636,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["duplet",{"_index":1759,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["duration",{"_index":805,"title":{},"body":{"classes/Note.html":{},"components/RhythmComponent.html":{},"miscellaneous/functions.html":{}}}],["dynamic",{"_index":1546,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{}}}],["défaut",{"_index":1481,"title":{},"body":{"components/TrackComponent.html":{}}}],["e2e",{"_index":1827,"title":{},"body":{"index.html":{}}}],["each",{"_index":766,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"classes/Signature.html":{}}}],["ease",{"_index":733,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["eight",{"_index":1593,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_bass_finger",{"_index":1654,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_bass_pick",{"_index":1655,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_grand_piano",{"_index":1623,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_guitar_clean",{"_index":1648,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_guitar_jazz",{"_index":1647,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_guitar_muted",{"_index":1649,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_piano_1",{"_index":1625,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["electric_piano_2",{"_index":1626,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["element",{"_index":255,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["elementref",{"_index":1447,"title":{},"body":{"components/TrackComponent.html":{}}}],["emit",{"_index":368,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["empty",{"_index":780,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["encapsulation",{"_index":244,"title":{},"body":{"components/AppComponent.html":{}}}],["end",{"_index":1092,"title":{},"body":{"components/RhythmComponent.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"index.html":{}}}],["ended",{"_index":941,"title":{},"body":{"components/RhythmComponent.html":{}}}],["endoftrack",{"_index":1418,"title":{},"body":{"components/TrackComponent.html":{}}}],["endoftrack(event",{"_index":1429,"title":{},"body":{"components/TrackComponent.html":{}}}],["endtap",{"_index":915,"title":{},"body":{"components/RhythmComponent.html":{}}}],["endtap(evt",{"_index":937,"title":{},"body":{"components/RhythmComponent.html":{}}}],["endtapvar",{"_index":902,"title":{},"body":{"components/RhythmComponent.html":{}}}],["english",{"_index":1781,"title":{},"body":{"miscellaneous/functions.html":{}}}],["english_horn",{"_index":1690,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enum",{"_index":1564,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1557,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":69,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["enums/basic",{"_index":670,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["enums/binary",{"_index":827,"title":{},"body":{"classes/Note.html":{}}}],["enums/ternary",{"_index":828,"title":{},"body":{"classes/Note.html":{}}}],["environment",{"_index":54,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/SoundPlayerComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.pathsfromapp.rythmsimg",{"_index":77,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["environments/environment",{"_index":55,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/SoundPlayerComponent.html":{}}}],["err:any",{"_index":1262,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["evenly",{"_index":442,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["event",{"_index":925,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["eventemitter",{"_index":365,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["events",{"_index":357,"title":{},"body":{"components/CreateTrackComponent.html":{},"dependencies.html":{}}}],["evt",{"_index":928,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["ex",{"_index":1599,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["example",{"_index":99,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{}}}],["exceeds",{"_index":1276,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["execute",{"_index":1824,"title":{},"body":{"index.html":{}}}],["export",{"_index":56,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["exportmenucomponent",{"_index":265,"title":{"components/ExportMenuComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["exports",{"_index":301,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ExportMenuComponent.html":{},"overview.html":{}}}],["extend",{"_index":1505,"title":{},"body":{"components/TrackComponent.html":{}}}],["extension",{"_index":78,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/functions.html":{}}}],["extention",{"_index":95,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["exterior",{"_index":1487,"title":{},"body":{"components/TrackComponent.html":{}}}],["fact",{"_index":1583,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["false",{"_index":652,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"miscellaneous/variables.html":{}}}],["fastforward",{"_index":879,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["fiddle",{"_index":1731,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{}}}],["files",{"_index":1809,"title":{},"body":{"index.html":{}}}],["filter",{"_index":1222,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["find",{"_index":948,"title":{},"body":{"components/RhythmComponent.html":{}}}],["finished",{"_index":1136,"title":{},"body":{"classes/Signature.html":{}}}],["finishedplayingtrack",{"_index":1259,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["first",{"_index":503,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["fixed",{"_index":516,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["flag",{"_index":1820,"title":{},"body":{"index.html":{}}}],["flex",{"_index":249,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["float",{"_index":1272,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["flute",{"_index":1694,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["followed",{"_index":1596,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["following",{"_index":832,"title":{},"body":{"classes/Note.html":{},"miscellaneous/enumerations.html":{}}}],["fond",{"_index":427,"title":{},"body":{"components/DashboardComponent.html":{}}}],["font",{"_index":393,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["font_size",{"_index":379,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["for(const",{"_index":787,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["for(let",{"_index":106,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["form",{"_index":92,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["format",{"_index":977,"title":{},"body":{"components/RhythmComponent.html":{}}}],["formsmodule",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["french_horn",{"_index":1681,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fretless_bass",{"_index":1656,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["full",{"_index":350,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["function",{"_index":964,"title":{},"body":{"components/RhythmComponent.html":{},"coverage.html":{}}}],["functions",{"_index":1777,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1829,"title":{},"body":{"index.html":{}}}],["fx_1_rain",{"_index":1717,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fx_2_soundtrack",{"_index":1718,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fx_3_crystal",{"_index":1719,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fx_4_atmosphere",{"_index":1720,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fx_5_brightness",{"_index":1721,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fx_6_goblins",{"_index":1722,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fx_7_echoes",{"_index":1723,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fx_8_scifi",{"_index":1724,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["general",{"_index":995,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["generals",{"_index":1080,"title":{},"body":{"components/RhythmComponent.html":{}}}],["generate",{"_index":1812,"title":{},"body":{"index.html":{}}}],["generated",{"_index":1796,"title":{},"body":{"index.html":{}}}],["getaddonnumber",{"_index":135,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["getaddonusehook",{"_index":143,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["getbasicnotelist",{"_index":1171,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["getbottom",{"_index":1107,"title":{},"body":{"classes/Signature.html":{}}}],["getbottomimgpath",{"_index":1108,"title":{},"body":{"classes/Signature.html":{}}}],["getbottomname",{"_index":1109,"title":{},"body":{"classes/Signature.html":{}}}],["getbottomnumber",{"_index":1110,"title":{},"body":{"classes/Signature.html":{}}}],["getbpm",{"_index":1280,"title":{},"body":{"classes/Tempo.html":{}}}],["getduration",{"_index":808,"title":{},"body":{"classes/Note.html":{}}}],["getid",{"_index":1351,"title":{},"body":{"classes/Track.html":{},"components/TrackComponent.html":{}}}],["getimgpath",{"_index":1172,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getimgpath(note",{"_index":1181,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"miscellaneous/functions.html":{}}}],["getimgpathat",{"_index":855,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["getimgpathat(i",{"_index":867,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["getimgspaths",{"_index":856,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["getimgspathslength",{"_index":110,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["getinstrument",{"_index":1352,"title":{},"body":{"classes/Track.html":{}}}],["getinstrumentlist",{"_index":613,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["getjson",{"_index":1528,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getjson(note",{"_index":1780,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getmeasures",{"_index":1353,"title":{},"body":{"classes/Track.html":{}}}],["getmetronomemovementlengthinsec",{"_index":614,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["getname",{"_index":1173,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getname(note",{"_index":1184,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"miscellaneous/functions.html":{}}}],["getnote",{"_index":1281,"title":{},"body":{"classes/Tempo.html":{}}}],["getnoteatindex",{"_index":1354,"title":{},"body":{"classes/Track.html":{}}}],["getnoteatindex(i",{"_index":1386,"title":{},"body":{"classes/Track.html":{}}}],["getnoteattimecode",{"_index":1355,"title":{},"body":{"classes/Track.html":{}}}],["getnoteattimecode(timecode",{"_index":1388,"title":{},"body":{"classes/Track.html":{}}}],["getnoteimgpath",{"_index":1282,"title":{},"body":{"classes/Tempo.html":{}}}],["getnotename",{"_index":1283,"title":{},"body":{"classes/Tempo.html":{}}}],["getnotenumber",{"_index":1284,"title":{},"body":{"classes/Tempo.html":{}}}],["getnotes",{"_index":531,"title":{},"body":{"classes/Measure.html":{},"classes/Track.html":{}}}],["getnumber",{"_index":19,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getnumber(note",{"_index":1784,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getpath",{"_index":1518,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getpath(soundname",{"_index":1788,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getplan",{"_index":1356,"title":{},"body":{"classes/Track.html":{}}}],["getrepresentation",{"_index":1530,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getrepresentation(note",{"_index":1793,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getsoundnamebypath",{"_index":1520,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getsoundnamebypath(soundpath",{"_index":1789,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gettimecode",{"_index":809,"title":{},"body":{"classes/Note.html":{}}}],["getting",{"_index":1794,"title":{"index.html":{}},"body":{}}],["gettop",{"_index":1111,"title":{},"body":{"classes/Signature.html":{}}}],["gettrackindex",{"_index":916,"title":{},"body":{"components/RhythmComponent.html":{}}}],["gettrackindex(id",{"_index":943,"title":{},"body":{"components/RhythmComponent.html":{}}}],["gettrackindex(track.getid",{"_index":950,"title":{},"body":{"components/RhythmComponent.html":{}}}],["getusehook",{"_index":20,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["getwidth",{"_index":577,"title":{},"body":{"components/MeasureComponent.html":{}}}],["given",{"_index":952,"title":{},"body":{"components/RhythmComponent.html":{}}}],["glockenspiel",{"_index":1630,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["go",{"_index":1055,"title":{},"body":{"components/RhythmComponent.html":{},"index.html":{}}}],["gradient($property",{"_index":1486,"title":{},"body":{"components/TrackComponent.html":{}}}],["gradient(background",{"_index":1501,"title":{},"body":{"components/TrackComponent.html":{}}}],["gradient(border",{"_index":1494,"title":{},"body":{"components/TrackComponent.html":{}}}],["gradient(to",{"_index":1089,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["gradient(vars.$light_gray",{"_index":1508,"title":{},"body":{"components/TrackComponent.html":{}}}],["graph",{"_index":1836,"title":{},"body":{"modules.html":{}}}],["gray",{"_index":1510,"title":{},"body":{"components/TrackComponent.html":{}}}],["grow",{"_index":605,"title":{},"body":{"components/MeasureComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["guitar_fret_noise",{"_index":1741,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["guitar_harmonics",{"_index":1652,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["gunshot",{"_index":1748,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["g|\\/(k|l|u)|50|54",{"_index":201,"title":{},"body":{"components/AppComponent.html":{}}}],["g|qa",{"_index":212,"title":{},"body":{"components/AppComponent.html":{}}}],["h",{"_index":600,"title":{},"body":{"components/MeasureComponent.html":{}}}],["h2",{"_index":436,"title":{},"body":{"components/DashboardComponent.html":{}}}],["h3",{"_index":437,"title":{},"body":{"components/DashboardComponent.html":{}}}],["half",{"_index":1572,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["half_note",{"_index":1571,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["harmonica",{"_index":1643,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["harpsichord",{"_index":1627,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["height",{"_index":406,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{}}}],["height_note",{"_index":1575,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["held",{"_index":973,"title":{},"body":{"components/RhythmComponent.html":{}}}],["helicopter",{"_index":1746,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["help",{"_index":1830,"title":{},"body":{"index.html":{}}}],["hi(pt|ta)|hp",{"_index":192,"title":{},"body":{"components/AppComponent.html":{}}}],["hidden",{"_index":1073,"title":{},"body":{"components/RhythmComponent.html":{}}}],["holds",{"_index":898,"title":{},"body":{"components/RhythmComponent.html":{}}}],["home",{"_index":415,"title":{},"body":{"components/DashboardComponent.html":{}}}],["honkytonk_piano",{"_index":1624,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hook",{"_index":37,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["hoot",{"_index":43,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["host",{"_index":247,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["html",{"_index":254,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["http://localhost:4200",{"_index":1806,"title":{},"body":{"index.html":{}}}],["i.test(navigator.useragent.substr(0,4",{"_index":235,"title":{},"body":{"components/AppComponent.html":{}}}],["ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt",{"_index":197,"title":{},"body":{"components/AppComponent.html":{}}}],["icon_width",{"_index":483,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["id",{"_index":947,"title":{},"body":{"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["identifier",{"_index":1513,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":536,"title":{},"body":{"classes/Measure.html":{},"classes/Track.html":{}}}],["if(!this.iscompatible(top",{"_index":1146,"title":{},"body":{"classes/Signature.html":{}}}],["if(!this.ismodifyingbottomsignature",{"_index":1202,"title":{},"body":{"components/SignatureComponent.html":{}}}],["if(!this.ismodifyingbpm",{"_index":1341,"title":{},"body":{"components/TempoComponent.html":{}}}],["if(!this.ismodifyinginstrument",{"_index":683,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["if(!this.ismodifyingnote",{"_index":1342,"title":{},"body":{"components/TempoComponent.html":{}}}],["if(!this.ismodifyingtopsignature",{"_index":1204,"title":{},"body":{"components/SignatureComponent.html":{}}}],["if(!this.isrunning",{"_index":688,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["if(!this.recording",{"_index":1011,"title":{},"body":{"components/RhythmComponent.html":{}}}],["if(!this.sound.paused",{"_index":1270,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["if(addon",{"_index":131,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["if(bool",{"_index":1007,"title":{},"body":{"components/RhythmComponent.html":{}}}],["if(bpm",{"_index":1303,"title":{},"body":{"classes/Tempo.html":{}}}],["if(changes.hasownproperty(propname",{"_index":789,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["if(changes[\"isplaying\"].currentvalue",{"_index":791,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["if(changes[\"isplaying\"].previousvalue",{"_index":1266,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["if(id",{"_index":1047,"title":{},"body":{"components/RhythmComponent.html":{}}}],["if(index",{"_index":118,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["if(measure.curmaxpos.hasownproperty(trackid.tostring(10",{"_index":554,"title":{},"body":{"classes/Measure.html":{}}}],["if(plan",{"_index":1407,"title":{},"body":{"classes/Track.html":{}}}],["if(propname",{"_index":790,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["if(result",{"_index":1026,"title":{},"body":{"components/RhythmComponent.html":{}}}],["if(this.addon",{"_index":136,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["if(this.isbinary",{"_index":842,"title":{},"body":{"classes/Note.html":{}}}],["if(this.iscompatible(this.top",{"_index":1152,"title":{},"body":{"classes/Signature.html":{}}}],["if(this.iscompatible(top",{"_index":1150,"title":{},"body":{"classes/Signature.html":{}}}],["if(this.ismodifyingnote",{"_index":1339,"title":{},"body":{"components/TempoComponent.html":{}}}],["if(this.isrunning",{"_index":674,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["if(this.isselected",{"_index":1475,"title":{},"body":{"components/TrackComponent.html":{}}}],["if(this.mode",{"_index":796,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["if(this.selectedtrackid",{"_index":1009,"title":{},"body":{"components/RhythmComponent.html":{}}}],["if(this.sound",{"_index":1268,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["if(this.track.getplan",{"_index":1463,"title":{},"body":{"components/TrackComponent.html":{}}}],["if(this.waitingrecord",{"_index":1025,"title":{},"body":{"components/RhythmComponent.html":{}}}],["if(top",{"_index":1153,"title":{},"body":{"classes/Signature.html":{}}}],["if(volume",{"_index":1273,"title":{},"body":{"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["ignore",{"_index":73,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["image",{"_index":111,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["images",{"_index":91,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["img",{"_index":83,"title":{},"body":{"classes/AddOn.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["img+span",{"_index":1345,"title":{},"body":{"components/TempoComponent.html":{}}}],["img:hover",{"_index":1221,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["img_size",{"_index":381,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["imgname",{"_index":113,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["imgsnames",{"_index":89,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["imgspaths",{"_index":85,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["implements",{"_index":359,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["import",{"_index":53,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["imports",{"_index":311,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["include",{"_index":719,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["included",{"_index":1256,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["incorrect",{"_index":1402,"title":{},"body":{"classes/Track.html":{}}}],["increment",{"_index":534,"title":{},"body":{"classes/Measure.html":{},"classes/Track.html":{}}}],["incremented",{"_index":1364,"title":{},"body":{"classes/Track.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index:number",{"_index":124,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["indicator",{"_index":546,"title":{},"body":{"classes/Measure.html":{}}}],["infinite",{"_index":734,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["inline",{"_index":389,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/TrackComponent.html":{}}}],["input",{"_index":474,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["input(\"isplaying",{"_index":784,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["input(\"signature",{"_index":783,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["input(\"tempo",{"_index":782,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["inputs",{"_index":467,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["input|input",{"_index":786,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["insert",{"_index":116,"title":{},"body":{"classes/AddOn.html":{},"components/MeasureComponent.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{}}}],["inside",{"_index":568,"title":{},"body":{"components/MeasureComponent.html":{},"components/NoteComponent.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["instant",{"_index":984,"title":{},"body":{"components/RhythmComponent.html":{}}}],["instr_input_height",{"_index":1484,"title":{},"body":{"components/TrackComponent.html":{}}}],["instrument",{"_index":650,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["instrument's",{"_index":623,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["instrument_width",{"_index":1482,"title":{},"body":{"components/TrackComponent.html":{}}}],["instruments",{"_index":622,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["integration",{"_index":836,"title":{},"body":{"classes/Note.html":{}}}],["interface",{"_index":899,"title":{},"body":{"components/RhythmComponent.html":{}}}],["interior",{"_index":1488,"title":{},"body":{"components/TrackComponent.html":{}}}],["interval",{"_index":1380,"title":{},"body":{"classes/Track.html":{}}}],["intrument",{"_index":1560,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["intrumentinput",{"_index":1456,"title":{},"body":{"components/TrackComponent.html":{}}}],["isbinary",{"_index":806,"title":{},"body":{"classes/Note.html":{}}}],["iscompatible",{"_index":1112,"title":{},"body":{"classes/Signature.html":{}}}],["iscompatible(top",{"_index":1134,"title":{},"body":{"classes/Signature.html":{}}}],["ismobile",{"_index":166,"title":{},"body":{"components/AppComponent.html":{}}}],["ismodifyingbottomsignature",{"_index":1167,"title":{},"body":{"components/SignatureComponent.html":{}}}],["ismodifyingbpm",{"_index":1313,"title":{},"body":{"components/TempoComponent.html":{}}}],["ismodifyinginstrument",{"_index":610,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["ismodifyingnote",{"_index":1314,"title":{},"body":{"components/TempoComponent.html":{}}}],["ismodifyingtopsignature",{"_index":1168,"title":{},"body":{"components/SignatureComponent.html":{}}}],["isplaying",{"_index":744,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["isplayingoutput",{"_index":1452,"title":{},"body":{"components/TrackComponent.html":{}}}],["isplayingtracks",{"_index":903,"title":{},"body":{"components/RhythmComponent.html":{}}}],["isrunning",{"_index":611,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["isselected",{"_index":1046,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["issolo",{"_index":1453,"title":{},"body":{"components/TrackComponent.html":{}}}],["it's",{"_index":759,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"components/TempoComponent.html":{},"miscellaneous/functions.html":{}}}],["items",{"_index":493,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["i|ip)|hs",{"_index":193,"title":{},"body":{"components/AppComponent.html":{}}}],["json",{"_index":1058,"title":{},"body":{"components/RhythmComponent.html":{},"miscellaneous/functions.html":{}}}],["justify",{"_index":385,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["kalimba",{"_index":1729,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["karma",{"_index":1826,"title":{},"body":{"index.html":{}}}],["keyframes",{"_index":715,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["kind",{"_index":1162,"title":{},"body":{"components/SignatureComponent.html":{}}}],["klon|kpt",{"_index":198,"title":{},"body":{"components/AppComponent.html":{}}}],["know",{"_index":758,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["knowing",{"_index":946,"title":{},"body":{"components/RhythmComponent.html":{}}}],["koto",{"_index":1728,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["kwc",{"_index":199,"title":{},"body":{"components/AppComponent.html":{}}}],["kyo(c|k)|le(no|xi)|lg",{"_index":200,"title":{},"body":{"components/AppComponent.html":{}}}],["last",{"_index":505,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/RhythmComponent.html":{}}}],["launched",{"_index":239,"title":{},"body":{"components/AppComponent.html":{}}}],["lead_1_square",{"_index":1701,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lead_2_sawtooth",{"_index":1702,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lead_3_calliope",{"_index":1703,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lead_4_chiff",{"_index":1704,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lead_5_charang",{"_index":1705,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lead_6_voice",{"_index":1706,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lead_7_fifths",{"_index":1707,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lead_8_bass_and_lead",{"_index":1708,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["left",{"_index":401,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["legend",{"_index":253,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"overview.html":{}}}],["librairy",{"_index":835,"title":{},"body":{"classes/Note.html":{},"components/TrackComponent.html":{}}}],["line",{"_index":602,"title":{},"body":{"components/MeasureComponent.html":{},"classes/Note.html":{},"components/RhythmComponent.html":{}}}],["linear",{"_index":726,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["link",{"_index":59,"title":{},"body":{"classes/AddOn.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["linked",{"_index":129,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/enumerations.html":{}}}],["list",{"_index":112,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"components/MetronomeComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["list>span",{"_index":737,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["literal",{"_index":1841,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lsit",{"_index":1385,"title":{},"body":{"classes/Track.html":{}}}],["m(ob|in)i|palm",{"_index":171,"title":{},"body":{"components/AppComponent.html":{}}}],["m)|sk",{"_index":221,"title":{},"body":{"components/AppComponent.html":{}}}],["m3|m5)|tx",{"_index":229,"title":{},"body":{"components/AppComponent.html":{}}}],["maemo|midp|mmp|netfront|opera",{"_index":170,"title":{},"body":{"components/AppComponent.html":{}}}],["main",{"_index":157,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["mainmenucomponent",{"_index":267,"title":{"components/MainMenuComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["margin",{"_index":383,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["marimba",{"_index":1633,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["matching",{"_index":146,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor",{"_index":1021,"title":{},"body":{"components/RhythmComponent.html":{}}}],["max",{"_index":252,"title":{},"body":{"components/AppComponent.html":{},"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["measure",{"_index":527,"title":{"classes/Measure.html":{}},"body":{"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Track.html":{},"coverage.html":{}}}],["measure'},{'name",{"_index":269,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["measure(0",{"_index":580,"title":{},"body":{"components/MeasureComponent.html":{}}}],["measure.component.html",{"_index":576,"title":{},"body":{"components/MeasureComponent.html":{}}}],["measure.component.sass",{"_index":575,"title":{},"body":{"components/MeasureComponent.html":{}}}],["measure.curmaxpos[trackid",{"_index":556,"title":{},"body":{"classes/Measure.html":{}}}],["measure/measure.component",{"_index":333,"title":{},"body":{"modules/AppModule.html":{}}}],["measurecomponent",{"_index":268,"title":{"components/MeasureComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["measureduration",{"_index":904,"title":{},"body":{"components/RhythmComponent.html":{}}}],["measures",{"_index":567,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["media",{"_index":514,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["melodic_tom",{"_index":1738,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["menu",{"_index":458,"title":{},"body":{"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{}}}],["menu'},{'name",{"_index":266,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["menu.component",{"_index":321,"title":{},"body":{"modules/AppModule.html":{}}}],["menu.component.html",{"_index":463,"title":{},"body":{"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/SaveMenuComponent.html":{}}}],["menu.component.sass",{"_index":462,"title":{},"body":{"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/SaveMenuComponent.html":{}}}],["menu.component.ts",{"_index":457,"title":{},"body":{"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/SaveMenuComponent.html":{},"coverage.html":{}}}],["menu.component.ts:19",{"_index":469,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["menu.component.ts:35",{"_index":472,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["menu/export",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"components/ExportMenuComponent.html":{},"coverage.html":{}}}],["menu/main",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"components/MainMenuComponent.html":{},"coverage.html":{}}}],["menu/save",{"_index":328,"title":{},"body":{"modules/AppModule.html":{},"components/SaveMenuComponent.html":{},"coverage.html":{}}}],["mesure",{"_index":1064,"title":{},"body":{"components/RhythmComponent.html":{}}}],["mesures",{"_index":1057,"title":{},"body":{"components/RhythmComponent.html":{}}}],["metadata",{"_index":158,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["methods",{"_index":18,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["metronome",{"_index":273,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["metronome#sound|metronome's",{"_index":671,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{}}}],["metronome's",{"_index":663,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{}}}],["metronome'},{'name",{"_index":271,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["metronome(this.tempo.getbpm",{"_index":673,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{}}}],["metronome.component.html",{"_index":609,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronome.component.sass",{"_index":608,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronome.run>img",{"_index":729,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronome.sound",{"_index":659,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"miscellaneous/functions.html":{}}}],["metronome.sound.toc",{"_index":660,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{}}}],["metronome/metronome.component",{"_index":332,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["metronome>img",{"_index":710,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronome_height",{"_index":699,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronome_width",{"_index":701,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronomecomponent",{"_index":270,"title":{"components/MetronomeComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["metronomecomponent#ismodifyinginstrument",{"_index":687,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronomecomponent#tempo|tempo",{"_index":678,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["metronomesoundcomponent",{"_index":272,"title":{"components/MetronomeSoundComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["metronomesoundcomponent#mode|mode",{"_index":794,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["middle",{"_index":507,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["min",{"_index":452,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/TrackComponent.html":{}}}],["minute",{"_index":636,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Tempo.html":{}}}],["miscellaneous",{"_index":1556,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mixin",{"_index":714,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["mode",{"_index":746,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"miscellaneous/variables.html":{}}}],["modifiablebottom",{"_index":1169,"title":{},"body":{"components/SignatureComponent.html":{}}}],["modifiablebpm",{"_index":1315,"title":{},"body":{"components/TempoComponent.html":{}}}],["modifiableinstrument",{"_index":1415,"title":{},"body":{"components/TrackComponent.html":{}}}],["modifiabletop",{"_index":1170,"title":{},"body":{"components/SignatureComponent.html":{}}}],["modification",{"_index":1036,"title":{},"body":{"components/RhythmComponent.html":{},"components/TempoComponent.html":{}}}],["modified",{"_index":651,"title":{},"body":{"components/MetronomeComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["modify",{"_index":1310,"title":{},"body":{"components/TempoComponent.html":{}}}],["modifyinstrument",{"_index":1416,"title":{},"body":{"components/TrackComponent.html":{}}}],["modigying",{"_index":1329,"title":{},"body":{"components/TempoComponent.html":{}}}],["modiified",{"_index":1059,"title":{},"body":{"components/RhythmComponent.html":{}}}],["module",{"_index":294,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":296,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":664,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Tempo.html":{},"index.html":{}}}],["moving",{"_index":573,"title":{},"body":{"components/MeasureComponent.html":{}}}],["mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd",{"_index":190,"title":{},"body":{"components/AppComponent.html":{}}}],["mo|to(pl|sh)|ts(70|m",{"_index":228,"title":{},"body":{"components/AppComponent.html":{}}}],["ms",{"_index":1017,"title":{},"body":{"components/RhythmComponent.html":{}}}],["music_box",{"_index":1631,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["musical",{"_index":428,"title":{},"body":{"components/DashboardComponent.html":{},"components/TrackComponent.html":{}}}],["musique",{"_index":478,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["mute",{"_index":1371,"title":{},"body":{"classes/Track.html":{},"components/TrackComponent.html":{}}}],["muted_trumpet",{"_index":1680,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mwbp|mywa|n10[0",{"_index":206,"title":{},"body":{"components/AppComponent.html":{}}}],["m|p|t)|hei",{"_index":191,"title":{},"body":{"components/AppComponent.html":{}}}],["m|r",{"_index":178,"title":{},"body":{"components/AppComponent.html":{}}}],["métronome",{"_index":479,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["n",{"_index":599,"title":{},"body":{"components/MeasureComponent.html":{},"miscellaneous/enumerations.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["names",{"_index":90,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/functions.html":{}}}],["nav",{"_index":490,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["navigate",{"_index":1805,"title":{},"body":{"index.html":{}}}],["nbofsolotracks",{"_index":905,"title":{},"body":{"components/RhythmComponent.html":{}}}],["nbtick",{"_index":798,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["nc|nw)|wmlb|wonu|x700|yas",{"_index":233,"title":{},"body":{"components/AppComponent.html":{}}}],["need",{"_index":1003,"title":{},"body":{"components/RhythmComponent.html":{}}}],["needed",{"_index":45,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["needs",{"_index":138,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["never",{"_index":1234,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["new",{"_index":86,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":547,"title":{},"body":{"classes/Measure.html":{},"components/MeasureComponent.html":{}}}],["nextid",{"_index":1348,"title":{},"body":{"classes/Track.html":{}}}],["ng",{"_index":1802,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":315,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["ngonchanges",{"_index":751,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["ngonchanges(changes",{"_index":589,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["ngoninit",{"_index":374,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["none",{"_index":492,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["normal",{"_index":1370,"title":{},"body":{"classes/Track.html":{}}}],["not(.active",{"_index":518,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["not(.active)+nav",{"_index":517,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["notation",{"_index":1580,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["note",{"_index":93,"title":{"classes/Note.html":{}},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"components/MetronomeComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["note#duration",{"_index":840,"title":{},"body":{"classes/Note.html":{}}}],["note#timecode",{"_index":839,"title":{},"body":{"classes/Note.html":{}}}],["note's",{"_index":11,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["note'},{'name",{"_index":276,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["note(0,0",{"_index":849,"title":{},"body":{"components/NoteComponent.html":{}}}],["note(timecode",{"_index":1032,"title":{},"body":{"components/RhythmComponent.html":{}}}],["note.component.html",{"_index":848,"title":{},"body":{"components/NoteComponent.html":{}}}],["note.component.sass",{"_index":847,"title":{},"body":{"components/NoteComponent.html":{}}}],["note.svg",{"_index":1570,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["note.ts",{"_index":1527,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["note/note.component",{"_index":334,"title":{},"body":{"modules/AppModule.html":{}}}],["notecomponent",{"_index":275,"title":{"components/NoteComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["noterepresentation",{"_index":72,"title":{"classes/NoteRepresentation.html":{}},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/TrackComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["noterepresentation([\"4n",{"_index":101,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["noterepresentation([\"8n",{"_index":1458,"title":{},"body":{"components/TrackComponent.html":{}}}],["notes",{"_index":67,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"miscellaneous/enumerations.html":{}}}],["notesimg",{"_index":1849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notesstr",{"_index":561,"title":{},"body":{"classes/Measure.html":{}}}],["notesstr.slice(0",{"_index":564,"title":{},"body":{"classes/Measure.html":{}}}],["notify",{"_index":1320,"title":{},"body":{"components/TempoComponent.html":{}}}],["nouveau",{"_index":422,"title":{},"body":{"components/DashboardComponent.html":{}}}],["null",{"_index":88,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":16,"title":{},"body":{"classes/AddOn.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["numberofwholenote",{"_index":590,"title":{},"body":{"components/MeasureComponent.html":{}}}],["number|null",{"_index":114,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Tempo.html":{}}}],["n|u)|c55\\/|capi|ccwa|cdm",{"_index":181,"title":{},"body":{"components/AppComponent.html":{}}}],["object",{"_index":1118,"title":{},"body":{"classes/Signature.html":{},"classes/Tempo.html":{},"miscellaneous/variables.html":{}}}],["oboe",{"_index":1689,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ocarina",{"_index":1700,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["onchanges",{"_index":574,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["ondex",{"_index":951,"title":{},"body":{"components/RhythmComponent.html":{}}}],["one",{"_index":569,"title":{},"body":{"components/MeasureComponent.html":{}}}],["oninit",{"_index":360,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13",{"_index":209,"title":{},"body":{"components/AppComponent.html":{}}}],["oo|p",{"_index":217,"title":{},"body":{"components/AppComponent.html":{}}}],["opacity",{"_index":522,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/AddOn.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["orchestra_hit",{"_index":1676,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["orchestral_harp",{"_index":1667,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["order",{"_index":84,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["origin",{"_index":713,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows",{"_index":172,"title":{},"body":{"components/AppComponent.html":{}}}],["out",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"components/MetronomeComponent.html":{},"index.html":{},"overview.html":{}}}],["output",{"_index":373,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["outputs",{"_index":364,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/TempoComponent.html":{}}}],["ouvrir",{"_index":429,"title":{},"body":{"components/DashboardComponent.html":{}}}],["overdriven_guitar",{"_index":1650,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["overflow",{"_index":1070,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["overview",{"_index":1831,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["o|v)|zz)|mt(50|p1|v",{"_index":205,"title":{},"body":{"components/AppComponent.html":{}}}],["p",{"_index":397,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["package",{"_index":1541,"title":{"dependencies.html":{}},"body":{}}],["pad_1_new_age",{"_index":1709,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pad_2_warm",{"_index":1710,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pad_3_polysynth",{"_index":1711,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pad_4_choir",{"_index":1712,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pad_5_bowed",{"_index":1713,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pad_6_metallic",{"_index":1714,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pad_7_halo",{"_index":1715,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pad_8_sweep",{"_index":1716,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["padding",{"_index":400,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["page",{"_index":416,"title":{},"body":{"components/DashboardComponent.html":{},"index.html":{}}}],["palce",{"_index":127,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["palying",{"_index":956,"title":{},"body":{"components/RhythmComponent.html":{}}}],["pan_flute",{"_index":1696,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["param",{"_index":58,"title":{},"body":{"classes/AddOn.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["parameter",{"_index":953,"title":{},"body":{"components/RhythmComponent.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"classes/AddOn.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":370,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/TempoComponent.html":{}}}],["parent's",{"_index":761,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["part",{"_index":1472,"title":{},"body":{"components/TrackComponent.html":{}}}],["parts",{"_index":82,"title":{},"body":{"classes/AddOn.html":{},"components/ExportMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/SaveMenuComponent.html":{}}}],["pass",{"_index":745,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["path",{"_index":345,"title":{},"body":{"modules/AppRoutingModule.html":{},"classes/NoteRepresentation.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"miscellaneous/functions.html":{}}}],["pathmatch",{"_index":349,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["paths",{"_index":80,"title":{},"body":{"classes/AddOn.html":{},"components/MetronomeComponent.html":{},"classes/NoteRepresentation.html":{}}}],["pathsfromapp",{"_index":1845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pause",{"_index":878,"title":{},"body":{"components/PlaybarComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["per",{"_index":635,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Tempo.html":{}}}],["percussive_organ",{"_index":1638,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["phone",{"_index":240,"title":{},"body":{"components/AppComponent.html":{}}}],["piccolo",{"_index":1693,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["piste",{"_index":378,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["pizzicato_strings",{"_index":1666,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["place",{"_index":115,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["plan",{"_index":966,"title":{},"body":{"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["plantostring",{"_index":1357,"title":{},"body":{"classes/Track.html":{}}}],["play",{"_index":657,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["playbar",{"_index":881,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["playbar'},{'name",{"_index":278,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["playbar.component.html",{"_index":883,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["playbar.component.sass",{"_index":882,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["playbar/playbar.component",{"_index":330,"title":{},"body":{"modules/AppModule.html":{}}}],["playbarcomponent",{"_index":277,"title":{"components/PlaybarComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["playbarcomponent#isplaying",{"_index":888,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["played",{"_index":640,"title":{},"body":{"components/MetronomeComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["player",{"_index":1233,"title":{},"body":{"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["player'},{'name",{"_index":287,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["player.component",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"components/TrackComponent.html":{}}}],["player.component.html",{"_index":1238,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.sass",{"_index":1237,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.ts",{"_index":1231,"title":{},"body":{"components/SoundPlayerComponent.html":{},"coverage.html":{}}}],["player.component.ts:108",{"_index":1254,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.ts:18",{"_index":1258,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.ts:28",{"_index":1243,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.ts:33",{"_index":1242,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.ts:77",{"_index":1252,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.ts:87",{"_index":1247,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player.component.ts:97",{"_index":1244,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["player/sound",{"_index":337,"title":{},"body":{"modules/AppModule.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{}}}],["playfromtime",{"_index":1239,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["playfromtime(starttime",{"_index":1246,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["playing",{"_index":757,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["playmetronome",{"_index":753,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["plays",{"_index":1236,"title":{},"body":{"components/SoundPlayerComponent.html":{},"classes/Track.html":{}}}],["playsound",{"_index":1240,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["playtracks",{"_index":887,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["point",{"_index":1248,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["pointer",{"_index":392,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["polyrythm",{"_index":834,"title":{},"body":{"classes/Note.html":{}}}],["polyrythmie",{"_index":477,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["polyrythmique",{"_index":241,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["polyrytmie",{"_index":424,"title":{},"body":{"components/DashboardComponent.html":{}}}],["position",{"_index":398,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MetronomeComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["possess",{"_index":97,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["possible",{"_index":621,"title":{},"body":{"components/MetronomeComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["prefix",{"_index":717,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["primal",{"_index":1566,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["private",{"_index":15,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"classes/Signature.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"classes/Track.html":{}}}],["prod",{"_index":1819,"title":{},"body":{"index.html":{}}}],["production",{"_index":1821,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":1164,"title":{},"body":{"components/SignatureComponent.html":{},"index.html":{}}}],["projet",{"_index":423,"title":{},"body":{"components/DashboardComponent.html":{}}}],["promise",{"_index":773,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["promise(function(resolve",{"_index":1018,"title":{},"body":{"components/RhythmComponent.html":{}}}],["properties",{"_index":14,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"classes/Measure.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["property",{"_index":1489,"title":{},"body":{"components/TrackComponent.html":{}}}],["property($name",{"_index":718,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["property(background",{"_index":1104,"title":{},"body":{"components/RhythmComponent.html":{}}}],["property(transform",{"_index":721,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["propname",{"_index":788,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["protractor",{"_index":1828,"title":{},"body":{"index.html":{}}}],["providers",{"_index":300,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["put",{"_index":1044,"title":{},"body":{"components/RhythmComponent.html":{}}}],["qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h",{"_index":216,"title":{},"body":{"components/AppComponent.html":{}}}],["quarter",{"_index":1574,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["quarter_note",{"_index":1573,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["quarternoterep",{"_index":100,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["quarternotetripletrep",{"_index":102,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["r",{"_index":1584,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["radius",{"_index":449,"title":{},"body":{"components/DashboardComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["ratio",{"_index":637,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["receive",{"_index":356,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["record",{"_index":1093,"title":{},"body":{"components/RhythmComponent.html":{}}}],["recorded",{"_index":936,"title":{},"body":{"components/RhythmComponent.html":{}}}],["recorder",{"_index":1695,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["recording",{"_index":906,"title":{},"body":{"components/RhythmComponent.html":{}}}],["recording>article",{"_index":1498,"title":{},"body":{"components/TrackComponent.html":{}}}],["redirectto",{"_index":348,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["reed_organ",{"_index":1641,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["reference",{"_index":1833,"title":{},"body":{"index.html":{}}}],["references",{"_index":65,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["relative",{"_index":399,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/TrackComponent.html":{}}}],["released",{"_index":942,"title":{},"body":{"components/RhythmComponent.html":{}}}],["reload",{"_index":1808,"title":{},"body":{"index.html":{}}}],["remove",{"_index":122,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["removefromimgspaths",{"_index":857,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["removefromimgspaths(imgname",{"_index":123,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["removefromimgspathsat",{"_index":858,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["removefromimgspathsat(index",{"_index":128,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["repeat",{"_index":409,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/TrackComponent.html":{}}}],["repertory",{"_index":1779,"title":{},"body":{"miscellaneous/functions.html":{}}}],["replace",{"_index":833,"title":{},"body":{"classes/Note.html":{}}}],["represent",{"_index":1232,"title":{},"body":{"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{}}}],["representaion",{"_index":44,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["representation",{"_index":12,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["representation.ts",{"_index":7,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["representation.ts:108",{"_index":864,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:116",{"_index":870,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:125",{"_index":868,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:13",{"_index":33,"title":{},"body":{"classes/AddOn.html":{}}}],["representation.ts:135",{"_index":871,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:144",{"_index":862,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:156",{"_index":872,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:167",{"_index":873,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:17",{"_index":27,"title":{},"body":{"classes/AddOn.html":{}}}],["representation.ts:175",{"_index":874,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:187",{"_index":865,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:198",{"_index":866,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:34",{"_index":38,"title":{},"body":{"classes/AddOn.html":{}}}],["representation.ts:42",{"_index":47,"title":{},"body":{"classes/AddOn.html":{}}}],["representation.ts:50",{"_index":40,"title":{},"body":{"classes/AddOn.html":{}}}],["representation.ts:57",{"_index":51,"title":{},"body":{"classes/AddOn.html":{}}}],["representation.ts:80",{"_index":861,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["representation.ts:84",{"_index":860,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["represention",{"_index":52,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["represents",{"_index":529,"title":{},"body":{"classes/Measure.html":{},"classes/Signature.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["reput",{"_index":1050,"title":{},"body":{"components/RhythmComponent.html":{}}}],["reset",{"_index":308,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["resolve",{"_index":1020,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rest",{"_index":1585,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["result",{"_index":145,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":147,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrievenotetype",{"_index":810,"title":{},"body":{"classes/Note.html":{}}}],["return",{"_index":64,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["returns",{"_index":39,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["reverse_cymbal",{"_index":1740,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["rgba(255",{"_index":1226,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["rhythm",{"_index":346,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["rhythm'},{'name",{"_index":280,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["rhythm.component.html",{"_index":901,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rhythm.component.sass",{"_index":900,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rhythm/rhythm.component",{"_index":322,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["rhythmcomponent",{"_index":279,"title":{"components/RhythmComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["rhythmcomponent#selectedtrackid",{"_index":1043,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rhythmcomponent#signature",{"_index":1039,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rhythmcomponent#tempo",{"_index":1033,"title":{},"body":{"components/RhythmComponent.html":{}}}],["right",{"_index":488,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["rock_organ",{"_index":1639,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["root",{"_index":161,"title":{},"body":{"components/AppComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["root'},{'name",{"_index":259,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["rotate",{"_index":722,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["rotate(0deg",{"_index":725,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["rotate(45deg",{"_index":727,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["rotatey(180deg",{"_index":896,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["rotating",{"_index":731,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["routermodule",{"_index":342,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":351,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":341,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"overview.html":{},"routes.html":{}}}],["routing.module",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":340,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["run",{"_index":1801,"title":{},"body":{"index.html":{}}}],["running",{"_index":656,"title":{},"body":{"components/MetronomeComponent.html":{},"index.html":{}}}],["runningmetronome",{"_index":612,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["runningmetronome.getsoundname",{"_index":696,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["rxjs",{"_index":1550,"title":{},"body":{"dependencies.html":{}}}],["rythm",{"_index":460,"title":{},"body":{"components/ExportMenuComponent.html":{}}}],["rythmcomponent#signature",{"_index":980,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rythmcomponent#tempo",{"_index":981,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rythmsimg",{"_index":1847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rythmstr",{"_index":1051,"title":{},"body":{"components/RhythmComponent.html":{}}}],["rythmstr.slice(0",{"_index":1063,"title":{},"body":{"components/RhythmComponent.html":{}}}],["s",{"_index":179,"title":{},"body":{"components/AppComponent.html":{}}}],["sass/vars",{"_index":246,"title":{},"body":{"components/AppComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["save",{"_index":282,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["savemenucomponent",{"_index":281,"title":{"components/SaveMenuComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["scaffolding",{"_index":1811,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":1074,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["scrollbar",{"_index":1078,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["sdk\\/|se(c",{"_index":218,"title":{},"body":{"components/AppComponent.html":{}}}],["seashore",{"_index":1743,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sec",{"_index":631,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["seconds",{"_index":987,"title":{},"body":{"components/RhythmComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["section",{"_index":434,"title":{},"body":{"components/DashboardComponent.html":{},"components/RhythmComponent.html":{}}}],["section>div",{"_index":438,"title":{},"body":{"components/DashboardComponent.html":{}}}],["see",{"_index":662,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Tempo.html":{}}}],["select",{"_index":741,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["selected",{"_index":927,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["selected>article",{"_index":1493,"title":{},"body":{"components/TrackComponent.html":{}}}],["selectedtrack",{"_index":1454,"title":{},"body":{"components/TrackComponent.html":{}}}],["selectedtrackid",{"_index":907,"title":{},"body":{"components/RhythmComponent.html":{}}}],["selectedtrackindex",{"_index":908,"title":{},"body":{"components/RhythmComponent.html":{}}}],["selectinstrument",{"_index":735,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["selectnote",{"_index":1220,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["selector",{"_index":159,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["selecttrack",{"_index":1419,"title":{},"body":{"components/TrackComponent.html":{}}}],["send",{"_index":372,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/RhythmComponent.html":{}}}],["serve",{"_index":1803,"title":{},"body":{"index.html":{}}}],["server",{"_index":1800,"title":{},"body":{"index.html":{}}}],["set",{"_index":48,"title":{},"body":{"classes/AddOn.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["setactive",{"_index":466,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["setactive(active",{"_index":471,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["setaddon",{"_index":859,"title":{},"body":{"classes/NoteRepresentation.html":{}}}],["setaddon(addon",{"_index":130,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["setbottom",{"_index":1113,"title":{},"body":{"classes/Signature.html":{}}}],["setbottom(bottom",{"_index":1137,"title":{},"body":{"classes/Signature.html":{}}}],["setbpm",{"_index":615,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["setbpm(bpm",{"_index":632,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["setduration",{"_index":811,"title":{},"body":{"classes/Note.html":{}}}],["setduration(duration",{"_index":822,"title":{},"body":{"classes/Note.html":{}}}],["setinstrument",{"_index":616,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Track.html":{}}}],["setinstrument(instrument",{"_index":1393,"title":{},"body":{"classes/Track.html":{}}}],["setinstrument(soundname",{"_index":638,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["setisplayingtracks",{"_index":917,"title":{},"body":{"components/RhythmComponent.html":{}}}],["setisplayingtracks(bool",{"_index":954,"title":{},"body":{"components/RhythmComponent.html":{}}}],["setnote",{"_index":1285,"title":{},"body":{"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["setnote(note",{"_index":1296,"title":{},"body":{"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["setnotes",{"_index":1358,"title":{},"body":{"classes/Track.html":{}}}],["setnotes(notes",{"_index":1395,"title":{},"body":{"classes/Track.html":{}}}],["setnotetobottom",{"_index":1174,"title":{},"body":{"components/SignatureComponent.html":{}}}],["setnotetobottom(note",{"_index":1186,"title":{},"body":{"components/SignatureComponent.html":{}}}],["setnumber",{"_index":21,"title":{},"body":{"classes/AddOn.html":{}}}],["setnumber(number",{"_index":46,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["setplan",{"_index":1359,"title":{},"body":{"classes/Track.html":{}}}],["setplan(plan",{"_index":1397,"title":{},"body":{"classes/Track.html":{}}}],["setselectedtrackid",{"_index":918,"title":{},"body":{"components/RhythmComponent.html":{}}}],["setselectedtrackid(id",{"_index":957,"title":{},"body":{"components/RhythmComponent.html":{}}}],["setsignature",{"_index":919,"title":{},"body":{"components/RhythmComponent.html":{}}}],["setsignature(signature",{"_index":959,"title":{},"body":{"components/RhythmComponent.html":{}}}],["setsolomuted",{"_index":1420,"title":{},"body":{"components/TrackComponent.html":{}}}],["setsolomuted(bool",{"_index":1435,"title":{},"body":{"components/TrackComponent.html":{}}}],["settempo",{"_index":617,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["settempo(tempo",{"_index":643,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["settimecode",{"_index":812,"title":{},"body":{"classes/Note.html":{}}}],["settimecode(timecode",{"_index":824,"title":{},"body":{"classes/Note.html":{}}}],["settimeout(function",{"_index":1019,"title":{},"body":{"components/RhythmComponent.html":{}}}],["settop",{"_index":1114,"title":{},"body":{"classes/Signature.html":{}}}],["settop(top",{"_index":1139,"title":{},"body":{"classes/Signature.html":{}}}],["settopandbottom",{"_index":1115,"title":{},"body":{"classes/Signature.html":{}}}],["settopandbottom(top",{"_index":1141,"title":{},"body":{"classes/Signature.html":{}}}],["setusehook",{"_index":22,"title":{},"body":{"classes/AddOn.html":{}}}],["setusehook(usehook",{"_index":50,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["setvolume",{"_index":1241,"title":{},"body":{"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["setvolume(volume",{"_index":1253,"title":{},"body":{"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["shadow(0",{"_index":1224,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["shakuhachi",{"_index":1698,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["shamisen",{"_index":1727,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["shanai",{"_index":1732,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["shar|sie",{"_index":220,"title":{},"body":{"components/AppComponent.html":{}}}],["show",{"_index":355,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["shown",{"_index":36,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["shrink",{"_index":1084,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["sig",{"_index":1219,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signal",{"_index":369,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["signature",{"_index":578,"title":{"classes/Signature.html":{}},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{}}}],["signature's",{"_index":1129,"title":{},"body":{"classes/Signature.html":{}}}],["signature'},{'name",{"_index":284,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["signature(4",{"_index":1195,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signature(signature.gettop",{"_index":1041,"title":{},"body":{"components/RhythmComponent.html":{}}}],["signature.component.html",{"_index":1166,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signature.component.sass",{"_index":1165,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signature.getbottom",{"_index":1042,"title":{},"body":{"components/RhythmComponent.html":{}}}],["signature.getbottomnumber",{"_index":1218,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signature.gettop",{"_index":1217,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signature/signature.component",{"_index":327,"title":{},"body":{"modules/AppModule.html":{}}}],["signaturecomponent",{"_index":283,"title":{"components/SignatureComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["signaturecomponent#bottom|bottom",{"_index":1145,"title":{},"body":{"classes/Signature.html":{}}}],["signaturecomponent#bottom|bottom}'s",{"_index":1151,"title":{},"body":{"classes/Signature.html":{}}}],["signaturecomponent#modifiablebottom",{"_index":1200,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signaturecomponent#modifiabletop",{"_index":1199,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signaturecomponent#signature",{"_index":1214,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signaturecomponent#top|top",{"_index":1144,"title":{},"body":{"classes/Signature.html":{}}}],["signaturecomponent#top|top}'s",{"_index":1149,"title":{},"body":{"classes/Signature.html":{}}}],["signatureout",{"_index":1201,"title":{},"body":{"components/SignatureComponent.html":{}}}],["signature|signature",{"_index":1198,"title":{},"body":{"components/SignatureComponent.html":{}}}],["similar",{"_index":1163,"title":{},"body":{"components/SignatureComponent.html":{}}}],["simple",{"_index":425,"title":{},"body":{"components/DashboardComponent.html":{}}}],["simplechanges",{"_index":585,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["single",{"_index":1413,"title":{},"body":{"components/TrackComponent.html":{}}}],["sitar",{"_index":1725,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sixteen",{"_index":1568,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sixteen_note",{"_index":1576,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sixteenth",{"_index":1595,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["size",{"_index":394,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["sizing",{"_index":454,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/TrackComponent.html":{}}}],["slap_bass_1",{"_index":1657,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["slap_bass_2",{"_index":1658,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["slice",{"_index":1496,"title":{},"body":{"components/TrackComponent.html":{}}}],["slope",{"_index":480,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["smooth",{"_index":1076,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["solid",{"_index":500,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["solo",{"_index":967,"title":{},"body":{"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["soloed",{"_index":968,"title":{},"body":{"components/RhythmComponent.html":{}}}],["soloedtrack",{"_index":920,"title":{},"body":{"components/RhythmComponent.html":{}}}],["soloedtrack(bool",{"_index":962,"title":{},"body":{"components/RhythmComponent.html":{}}}],["solomuted",{"_index":1422,"title":{},"body":{"components/TrackComponent.html":{}}}],["something",{"_index":1786,"title":{},"body":{"miscellaneous/functions.html":{}}}],["soprano_sax",{"_index":1685,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sound",{"_index":286,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["sound's",{"_index":1792,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sound'},{'name",{"_index":274,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["sound.component",{"_index":336,"title":{},"body":{"modules/AppModule.html":{}}}],["sound.component.html",{"_index":750,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.sass",{"_index":749,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts",{"_index":740,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"coverage.html":{}}}],["sound.component.ts:111",{"_index":775,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:26",{"_index":779,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:31",{"_index":781,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:36",{"_index":763,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:40",{"_index":762,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:44",{"_index":756,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:49",{"_index":778,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:69",{"_index":764,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:88",{"_index":776,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.component.ts:96",{"_index":768,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["sound.getpath(soundname",{"_index":695,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["sound.values",{"_index":691,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["sound/metronome",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"components/MetronomeSoundComponent.html":{},"coverage.html":{}}}],["soundname",{"_index":642,"title":{},"body":{"components/MetronomeComponent.html":{},"components/SoundPlayerComponent.html":{},"miscellaneous/functions.html":{}}}],["soundpath",{"_index":1790,"title":{},"body":{"miscellaneous/functions.html":{}}}],["soundplayer",{"_index":1448,"title":{},"body":{"components/TrackComponent.html":{}}}],["soundplayer(\"exampleout.mid.wav",{"_index":1451,"title":{},"body":{"components/TrackComponent.html":{}}}],["soundplayercomponent",{"_index":285,"title":{"components/SoundPlayerComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["sounds",{"_index":1749,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"index.html":{}}}],["space",{"_index":441,"title":{},"body":{"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{}}}],["span",{"_index":513,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TrackComponent.html":{}}}],["span:first",{"_index":1096,"title":{},"body":{"components/RhythmComponent.html":{},"components/SignatureComponent.html":{}}}],["span:last",{"_index":1097,"title":{},"body":{"components/RhythmComponent.html":{}}}],["span>span",{"_index":1346,"title":{},"body":{"components/TempoComponent.html":{}}}],["specific",{"_index":1438,"title":{},"body":{"components/TrackComponent.html":{}}}],["specify",{"_index":1597,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../basic",{"_index":1558,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../binary",{"_index":1559,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../environment.prod.ts",{"_index":1843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../instrument.ts",{"_index":1561,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../metronome.ts",{"_index":1562,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/.../note",{"_index":1840,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../ternary",{"_index":1563,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/app",{"_index":339,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":155,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:17",{"_index":242,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:22",{"_index":236,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/classes/measure.ts",{"_index":528,"title":{},"body":{"classes/Measure.html":{},"coverage.html":{}}}],["src/app/classes/measure.ts:18",{"_index":533,"title":{},"body":{"classes/Measure.html":{}}}],["src/app/classes/measure.ts:24",{"_index":540,"title":{},"body":{"classes/Measure.html":{}}}],["src/app/classes/measure.ts:29",{"_index":539,"title":{},"body":{"classes/Measure.html":{}}}],["src/app/classes/measure.ts:57",{"_index":541,"title":{},"body":{"classes/Measure.html":{}}}],["src/app/classes/measure.ts:65",{"_index":542,"title":{},"body":{"classes/Measure.html":{}}}],["src/app/classes/metronome.ts",{"_index":1517,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/app/classes/note",{"_index":6,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/classes/note.ts",{"_index":803,"title":{},"body":{"classes/Note.html":{},"coverage.html":{}}}],["src/app/classes/note.ts:11",{"_index":816,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:16",{"_index":813,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:21",{"_index":817,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:26",{"_index":814,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:43",{"_index":820,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:51",{"_index":825,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:59",{"_index":819,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:67",{"_index":823,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:75",{"_index":821,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/note.ts:87",{"_index":826,"title":{},"body":{"classes/Note.html":{}}}],["src/app/classes/signature.ts",{"_index":1106,"title":{},"body":{"classes/Signature.html":{},"coverage.html":{}}}],["src/app/classes/signature.ts:10",{"_index":1123,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:101",{"_index":1131,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:110",{"_index":1130,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:119",{"_index":1127,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:15",{"_index":1117,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:37",{"_index":1132,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:45",{"_index":1140,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:56",{"_index":1125,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:65",{"_index":1138,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:76",{"_index":1142,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/signature.ts:88",{"_index":1135,"title":{},"body":{"classes/Signature.html":{}}}],["src/app/classes/tempo.ts",{"_index":1279,"title":{},"body":{"classes/Tempo.html":{},"coverage.html":{}}}],["src/app/classes/tempo.ts:10",{"_index":1288,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:14",{"_index":1287,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:32",{"_index":1291,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:40",{"_index":1297,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:49",{"_index":1290,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:57",{"_index":1295,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:70",{"_index":1294,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:78",{"_index":1292,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/tempo.ts:86",{"_index":1293,"title":{},"body":{"classes/Tempo.html":{}}}],["src/app/classes/track.ts",{"_index":1347,"title":{},"body":{"classes/Track.html":{},"coverage.html":{}}}],["src/app/classes/track.ts:106",{"_index":1392,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:11",{"_index":1368,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:120",{"_index":1384,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:128",{"_index":1390,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:137",{"_index":1387,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:146",{"_index":1389,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:159",{"_index":1396,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:16",{"_index":1365,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:167",{"_index":1373,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:174",{"_index":1374,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:183",{"_index":1377,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:196",{"_index":1399,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:20",{"_index":1366,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:27",{"_index":1369,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:32",{"_index":1367,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:37",{"_index":1361,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:64",{"_index":1382,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:72",{"_index":1383,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:80",{"_index":1394,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:88",{"_index":1391,"title":{},"body":{"classes/Track.html":{}}}],["src/app/classes/track.ts:96",{"_index":1398,"title":{},"body":{"classes/Track.html":{}}}],["src/app/create",{"_index":352,"title":{},"body":{"components/CreateTrackComponent.html":{},"coverage.html":{}}}],["src/app/dashboard/dashboard.component.ts",{"_index":414,"title":{},"body":{"components/DashboardComponent.html":{},"coverage.html":{}}}],["src/app/enums/basic",{"_index":1526,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/app/enums/binary",{"_index":1529,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/app/enums/instrument.ts",{"_index":1620,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/enums/ternary",{"_index":1757,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/export",{"_index":456,"title":{},"body":{"components/ExportMenuComponent.html":{},"coverage.html":{}}}],["src/app/main",{"_index":465,"title":{},"body":{"components/MainMenuComponent.html":{},"coverage.html":{}}}],["src/app/measure/measure.component.ts",{"_index":566,"title":{},"body":{"components/MeasureComponent.html":{},"coverage.html":{}}}],["src/app/measure/measure.component.ts:22",{"_index":582,"title":{},"body":{"components/MeasureComponent.html":{}}}],["src/app/measure/measure.component.ts:27",{"_index":583,"title":{},"body":{"components/MeasureComponent.html":{}}}],["src/app/measure/measure.component.ts:32",{"_index":581,"title":{},"body":{"components/MeasureComponent.html":{}}}],["src/app/measure/measure.component.ts:52",{"_index":584,"title":{},"body":{"components/MeasureComponent.html":{}}}],["src/app/metronome",{"_index":739,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"coverage.html":{}}}],["src/app/metronome/metronome.component.ts",{"_index":606,"title":{},"body":{"components/MetronomeComponent.html":{},"coverage.html":{}}}],["src/app/metronome/metronome.component.ts:106",{"_index":649,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:119",{"_index":620,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:127",{"_index":639,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:19",{"_index":667,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:24",{"_index":661,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:28",{"_index":655,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:33",{"_index":658,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:38",{"_index":653,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:57",{"_index":633,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:69",{"_index":644,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:81",{"_index":624,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:88",{"_index":645,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/metronome/metronome.component.ts:98",{"_index":647,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["src/app/note/note.component.ts",{"_index":846,"title":{},"body":{"components/NoteComponent.html":{},"coverage.html":{}}}],["src/app/note/note.component.ts:19",{"_index":850,"title":{},"body":{"components/NoteComponent.html":{}}}],["src/app/playbar/playbar.component.ts",{"_index":875,"title":{},"body":{"components/PlaybarComponent.html":{},"coverage.html":{}}}],["src/app/playbar/playbar.component.ts:23",{"_index":885,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["src/app/playbar/playbar.component.ts:44",{"_index":886,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts",{"_index":897,"title":{},"body":{"components/RhythmComponent.html":{},"coverage.html":{}}}],["src/app/rhythm/rhythm.component.ts:101",{"_index":930,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:111",{"_index":974,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:138",{"_index":926,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:145",{"_index":979,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:153",{"_index":934,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:169",{"_index":971,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:177",{"_index":938,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:191",{"_index":961,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:201",{"_index":960,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:210",{"_index":958,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:23",{"_index":1001,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:235",{"_index":944,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:249",{"_index":963,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:275",{"_index":955,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:28",{"_index":994,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:284",{"_index":975,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:33",{"_index":1000,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:38",{"_index":991,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:43",{"_index":993,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:48",{"_index":1002,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:53",{"_index":990,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:58",{"_index":988,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:63",{"_index":997,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:68",{"_index":999,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:73",{"_index":983,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:78",{"_index":985,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/rhythm/rhythm.component.ts:83",{"_index":986,"title":{},"body":{"components/RhythmComponent.html":{}}}],["src/app/save",{"_index":1105,"title":{},"body":{"components/SaveMenuComponent.html":{},"coverage.html":{}}}],["src/app/signature/signature.component.ts",{"_index":1161,"title":{},"body":{"components/SignatureComponent.html":{},"coverage.html":{}}}],["src/app/signature/signature.component.ts:106",{"_index":1185,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:114",{"_index":1187,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:21",{"_index":1196,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:26",{"_index":1194,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:31",{"_index":1193,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:36",{"_index":1191,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:41",{"_index":1190,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:61",{"_index":1189,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:75",{"_index":1188,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:89",{"_index":1177,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/signature/signature.component.ts:98",{"_index":1182,"title":{},"body":{"components/SignatureComponent.html":{}}}],["src/app/sound",{"_index":1230,"title":{},"body":{"components/SoundPlayerComponent.html":{},"coverage.html":{}}}],["src/app/tempo/tempo.component.ts",{"_index":1308,"title":{},"body":{"components/TempoComponent.html":{},"coverage.html":{}}}],["src/app/tempo/tempo.component.ts:102",{"_index":1321,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:112",{"_index":1322,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:121",{"_index":1323,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:19",{"_index":1333,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:24",{"_index":1331,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:29",{"_index":1330,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:33",{"_index":1328,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:38",{"_index":1319,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:58",{"_index":1325,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:71",{"_index":1324,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:79",{"_index":1327,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/tempo/tempo.component.ts:87",{"_index":1326,"title":{},"body":{"components/TempoComponent.html":{}}}],["src/app/track/track.component.ts",{"_index":1412,"title":{},"body":{"components/TrackComponent.html":{},"coverage.html":{}}}],["src/app/track/track.component.ts:112",{"_index":1428,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:130",{"_index":1441,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:138",{"_index":1436,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:145",{"_index":1433,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:153",{"_index":1437,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:165",{"_index":1440,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:184",{"_index":1434,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:196",{"_index":1432,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:204",{"_index":1430,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:27",{"_index":1427,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:32",{"_index":1443,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:37",{"_index":1444,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:44",{"_index":1423,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:55",{"_index":1445,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:60",{"_index":1425,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:70",{"_index":1442,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:82",{"_index":1424,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/app/track/track.component.ts:87",{"_index":1426,"title":{},"body":{"components/TrackComponent.html":{}}}],["src/environments/environment.prod.ts",{"_index":1536,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1538,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":524,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{}}}],["started",{"_index":1795,"title":{"index.html":{}},"body":{}}],["starting",{"_index":1782,"title":{},"body":{"miscellaneous/functions.html":{}}}],["startrecord",{"_index":909,"title":{},"body":{"components/RhythmComponent.html":{}}}],["starts",{"_index":646,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/SoundPlayerComponent.html":{}}}],["starttap",{"_index":921,"title":{},"body":{"components/RhythmComponent.html":{}}}],["starttap(evt",{"_index":970,"title":{},"body":{"components/RhythmComponent.html":{}}}],["starttapvar",{"_index":910,"title":{},"body":{"components/RhythmComponent.html":{}}}],["starttime",{"_index":1249,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["state",{"_index":939,"title":{},"body":{"components/RhythmComponent.html":{}}}],["stated",{"_index":989,"title":{},"body":{"components/RhythmComponent.html":{}}}],["statements",{"_index":1514,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":74,"title":{},"body":{"classes/AddOn.html":{},"classes/Measure.html":{},"classes/NoteRepresentation.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["steel_drums",{"_index":1735,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sticky",{"_index":487,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["stop",{"_index":618,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["stopmetronome",{"_index":754,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["stops",{"_index":648,"title":{},"body":{"components/MetronomeComponent.html":{},"components/TrackComponent.html":{}}}],["store",{"_index":804,"title":{},"body":{"classes/Note.html":{}}}],["stored",{"_index":1816,"title":{},"body":{"index.html":{}}}],["stores",{"_index":1565,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stretch",{"_index":1497,"title":{},"body":{"components/TrackComponent.html":{}}}],["string",{"_index":76,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"classes/Measure.html":{},"components/MetronomeComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/functions.html":{}}}],["string_ensemble_1",{"_index":1669,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["string_ensemble_2",{"_index":1670,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stringified",{"_index":544,"title":{},"body":{"classes/Measure.html":{},"classes/Note.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["style",{"_index":499,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["styles",{"_index":152,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["styles/menu",{"_index":464,"title":{},"body":{"components/ExportMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/SaveMenuComponent.html":{}}}],["styleurls",{"_index":162,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["such",{"_index":572,"title":{},"body":{"components/MeasureComponent.html":{},"components/PlaybarComponent.html":{}}}],["support",{"_index":1834,"title":{},"body":{"modules.html":{}}}],["sur",{"_index":426,"title":{},"body":{"components/DashboardComponent.html":{}}}],["svg",{"_index":79,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"modules.html":{}}}],["sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl",{"_index":224,"title":{},"body":{"components/AppComponent.html":{}}}],["synth_bass_1",{"_index":1659,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synth_bass_2",{"_index":1660,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synth_brass_1",{"_index":1683,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synth_brass_2",{"_index":1684,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synth_choir",{"_index":1675,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synth_drum",{"_index":1739,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synth_strings_1",{"_index":1671,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["synth_strings_2",{"_index":1672,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["s|devi|dica|dmob|do(c|p)o|ds(12",{"_index":184,"title":{},"body":{"components/AppComponent.html":{}}}],["t",{"_index":227,"title":{},"body":{"components/AppComponent.html":{}}}],["tab",{"_index":470,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["table",{"_index":1540,"title":{},"body":{"coverage.html":{}}}],["tableau",{"_index":419,"title":{},"body":{"components/DashboardComponent.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1539,"title":{},"body":{"coverage.html":{}}}],["taiko_drum",{"_index":1737,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["take",{"_index":548,"title":{},"body":{"classes/Measure.html":{}}}],["takes",{"_index":628,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["tango_accordion",{"_index":1644,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tap",{"_index":940,"title":{},"body":{"components/RhythmComponent.html":{}}}],["tap_button_size",{"_index":1065,"title":{},"body":{"components/RhythmComponent.html":{}}}],["tdg",{"_index":225,"title":{},"body":{"components/AppComponent.html":{}}}],["tel(i|m)|tim",{"_index":226,"title":{},"body":{"components/AppComponent.html":{}}}],["telephone_ring",{"_index":1745,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["template",{"_index":151,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["templateurl",{"_index":164,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["tempo",{"_index":579,"title":{"classes/Tempo.html":{}},"body":{"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{}}}],["tempo#bpm|bpm",{"_index":1300,"title":{},"body":{"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["tempo#note|note",{"_index":1210,"title":{},"body":{"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["tempo's",{"_index":1180,"title":{},"body":{"components/SignatureComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{}}}],["tempo'},{'name",{"_index":289,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["tempo(basicnote.quarter_note",{"_index":665,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["tempo(tempo.getnote",{"_index":1037,"title":{},"body":{"components/RhythmComponent.html":{}}}],["tempo):void",{"_index":1034,"title":{},"body":{"components/RhythmComponent.html":{}}}],["tempo.component.html",{"_index":1312,"title":{},"body":{"components/TempoComponent.html":{}}}],["tempo.component.sass",{"_index":1311,"title":{},"body":{"components/TempoComponent.html":{}}}],["tempo.getbpm",{"_index":1038,"title":{},"body":{"components/RhythmComponent.html":{},"components/TempoComponent.html":{}}}],["tempo/tempo.component",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["tempocomponent",{"_index":288,"title":{"components/TempoComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["tempocomponent|tempocomponent",{"_index":1197,"title":{},"body":{"components/SignatureComponent.html":{}}}],["tempooutput",{"_index":1318,"title":{},"body":{"components/TempoComponent.html":{}}}],["tempo|tempo",{"_index":1334,"title":{},"body":{"components/TempoComponent.html":{}}}],["tempo|tempo}'s",{"_index":1209,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["tenor_sax",{"_index":1687,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ternary",{"_index":818,"title":{},"body":{"classes/Note.html":{},"miscellaneous/enumerations.html":{}}}],["ternarynote",{"_index":71,"title":{},"body":{"classes/AddOn.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/enumerations.html":{}}}],["ternarynote._4n",{"_index":844,"title":{},"body":{"classes/Note.html":{}}}],["test",{"_index":1457,"title":{},"body":{"components/TrackComponent.html":{},"index.html":{}}}],["tests",{"_index":1823,"title":{},"body":{"index.html":{}}}],["text",{"_index":395,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["tha",{"_index":1791,"title":{},"body":{"miscellaneous/functions.html":{}}}],["that's",{"_index":992,"title":{},"body":{"components/RhythmComponent.html":{}}}],["themselves",{"_index":1598,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["this.active",{"_index":475,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["this.addon",{"_index":132,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.addon.getnumber",{"_index":137,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.addon.getusehook",{"_index":144,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.bottom",{"_index":1148,"title":{},"body":{"classes/Signature.html":{}}}],["this.bpm",{"_index":1302,"title":{},"body":{"classes/Tempo.html":{}}}],["this.convertimgnametopath(imgname",{"_index":121,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.create.emit(true",{"_index":375,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["this.duration",{"_index":831,"title":{},"body":{"classes/Note.html":{}}}],["this.endtapvar",{"_index":1028,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.endtapvar.gettime",{"_index":1030,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.finishedplayingtrack.emit(false",{"_index":1263,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.gettrackindex(id",{"_index":1049,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.id",{"_index":1404,"title":{},"body":{"classes/Track.html":{}}}],["this.imgspaths.indexof(imgname",{"_index":125,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.imgspaths.length",{"_index":108,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.imgspaths.push(this.convertimgnametopath(imgname",{"_index":119,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.imgspaths.splice(index",{"_index":120,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.imgspaths[i",{"_index":109,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.instrument",{"_index":698,"title":{},"body":{"components/MetronomeComponent.html":{},"classes/Track.html":{}}}],["this.intrumentinput.nativeelement.focus",{"_index":1471,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.ismodifyingbottomsignature",{"_index":1207,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.ismodifyingbpm",{"_index":1343,"title":{},"body":{"components/TempoComponent.html":{}}}],["this.ismodifyinginstrument",{"_index":689,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.ismodifyingnote",{"_index":1340,"title":{},"body":{"components/TempoComponent.html":{}}}],["this.ismodifyingtopsignature",{"_index":1203,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.isplaying",{"_index":801,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["this.isplayingoutput.emit(false",{"_index":1479,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.isrunning",{"_index":684,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.isselected",{"_index":1474,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.issolo.emit(false",{"_index":1465,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.issolo.emit(true",{"_index":1467,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.measureduration",{"_index":1015,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.measures",{"_index":1406,"title":{},"body":{"classes/Track.html":{}}}],["this.metronome",{"_index":785,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["this.metronome.start",{"_index":797,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["this.metronome.startfor(nbtick",{"_index":800,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["this.metronome.stop",{"_index":802,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["this.mode",{"_index":795,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["this.modifiablebpm",{"_index":1335,"title":{},"body":{"components/TempoComponent.html":{}}}],["this.modifiableinstrument",{"_index":1459,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.mute",{"_index":1464,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.note",{"_index":1301,"title":{},"body":{"classes/Tempo.html":{}}}],["this.notes",{"_index":558,"title":{},"body":{"classes/Measure.html":{},"classes/Track.html":{}}}],["this.number",{"_index":62,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.pause",{"_index":1267,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.plan",{"_index":1408,"title":{},"body":{"classes/Track.html":{}}}],["this.playmetronome",{"_index":792,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["this.playsound",{"_index":1265,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.playtracks.emit(this.isplaying",{"_index":889,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["this.position",{"_index":557,"title":{},"body":{"classes/Measure.html":{}}}],["this.recording",{"_index":1010,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.retrievenotetype",{"_index":838,"title":{},"body":{"classes/Note.html":{}}}],["this.runningmetronome",{"_index":672,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.runningmetronome.setbpm(bpm",{"_index":677,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.runningmetronome.setbpm(this.tempo.getbpm",{"_index":680,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.runningmetronome.setsound(this.sound",{"_index":690,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.runningmetronome.start",{"_index":685,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.runningmetronome.stop",{"_index":686,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.selectedtrack.emit(null",{"_index":1477,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.selectedtrack.emit(this.track.getid",{"_index":1476,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.selectedtrackid",{"_index":1045,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.selectedtrackindex",{"_index":1048,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.signature",{"_index":1040,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.signature.getbottom",{"_index":1192,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.signature.getbottomnumber",{"_index":592,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["this.signature.gettop",{"_index":591,"title":{},"body":{"components/MeasureComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{}}}],["this.signature.setbottom(note",{"_index":1216,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.signature.setbottom(this.modifiablebottom",{"_index":1208,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.signature.settop(this.modifiabletop",{"_index":1205,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.signature.tostring",{"_index":1056,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.signatureout.emit(this.signature",{"_index":1206,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.solomuted",{"_index":1469,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.sound",{"_index":694,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/SoundPlayerComponent.html":{}}}],["this.sound.currenttime",{"_index":1269,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.sound.load",{"_index":1278,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.sound.onended",{"_index":1261,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.sound.pause",{"_index":1271,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.sound.play",{"_index":1264,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.sound.volume",{"_index":1277,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["this.startrecord",{"_index":1014,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.startrecord.gettime",{"_index":1023,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.starttapvar",{"_index":1027,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.starttapvar.gettime",{"_index":1029,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.stop",{"_index":675,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.stopmetronome",{"_index":793,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["this.tempo",{"_index":679,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["this.tempo.getbpm",{"_index":681,"title":{},"body":{"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["this.tempo.getbpm().tostring",{"_index":1336,"title":{},"body":{"components/TempoComponent.html":{}}}],["this.tempo.getnotenumber",{"_index":799,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["this.tempo.setbpm(bpm",{"_index":676,"title":{},"body":{"components/MetronomeComponent.html":{},"components/TempoComponent.html":{}}}],["this.tempo.setbpm(parseint(this.modifiablebpm",{"_index":1344,"title":{},"body":{"components/TempoComponent.html":{}}}],["this.tempo.setnote(note",{"_index":1338,"title":{},"body":{"components/TempoComponent.html":{}}}],["this.tempo.tostring",{"_index":1052,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.tempooutput.emit(this.tempo",{"_index":1337,"title":{},"body":{"components/TempoComponent.html":{}}}],["this.timecode",{"_index":830,"title":{},"body":{"classes/Note.html":{}}}],["this.togglemodifybottomsignature",{"_index":1215,"title":{},"body":{"components/SignatureComponent.html":{}}}],["this.togglemodifyinstrument",{"_index":693,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.top",{"_index":1147,"title":{},"body":{"classes/Signature.html":{}}}],["this.tostring",{"_index":565,"title":{},"body":{"classes/Measure.html":{}}}],["this.track.getid",{"_index":1478,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.track.getinstrument",{"_index":1460,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.track.setplan((this.track.getplan",{"_index":1461,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.tracks",{"_index":1061,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.tracks.push(new",{"_index":1008,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.tracks[this.selectedtrackindex].addnote(new",{"_index":1031,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.type",{"_index":837,"title":{},"body":{"classes/Note.html":{}}}],["this.updatemeasureduration",{"_index":1006,"title":{},"body":{"components/RhythmComponent.html":{}}}],["this.usehook",{"_index":63,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["this.value",{"_index":697,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["this.volume",{"_index":1466,"title":{},"body":{"components/TrackComponent.html":{}}}],["this.waitingrecord",{"_index":1012,"title":{},"body":{"components/RhythmComponent.html":{}}}],["tick",{"_index":629,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{}}}],["time",{"_index":627,"title":{},"body":{"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SoundPlayerComponent.html":{},"miscellaneous/functions.html":{}}}],["timecode",{"_index":807,"title":{},"body":{"classes/Note.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["timecode\\\":\"+this.timecode+\",\\\"duration\\\":\"+this.duration",{"_index":845,"title":{},"body":{"classes/Note.html":{}}}],["timecodes",{"_index":1381,"title":{},"body":{"classes/Track.html":{}}}],["timer",{"_index":1103,"title":{},"body":{"components/RhythmComponent.html":{}}}],["times",{"_index":1124,"title":{},"body":{"classes/Signature.html":{}}}],["timpani",{"_index":1668,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tinkle_bell",{"_index":1733,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["title",{"_index":167,"title":{},"body":{"components/AppComponent.html":{}}}],["toc",{"_index":1750,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["todo",{"_index":461,"title":{},"body":{"components/ExportMenuComponent.html":{},"components/MeasureComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/TrackComponent.html":{}}}],["together",{"_index":1414,"title":{},"body":{"components/TrackComponent.html":{}}}],["toggle",{"_index":777,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["toggleisplaying",{"_index":884,"title":{},"body":{"components/PlaybarComponent.html":{}}}],["togglemode",{"_index":755,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["togglemodifybottomsignature",{"_index":1175,"title":{},"body":{"components/SignatureComponent.html":{}}}],["togglemodifybpm",{"_index":1316,"title":{},"body":{"components/TempoComponent.html":{}}}],["togglemodifyinstrument",{"_index":619,"title":{},"body":{"components/MetronomeComponent.html":{},"components/TrackComponent.html":{}}}],["togglemodifynote",{"_index":1317,"title":{},"body":{"components/TempoComponent.html":{}}}],["togglemodifytopsignature",{"_index":1176,"title":{},"body":{"components/SignatureComponent.html":{}}}],["togglerecording",{"_index":922,"title":{},"body":{"components/RhythmComponent.html":{}}}],["togglesolomuted",{"_index":1421,"title":{},"body":{"components/TrackComponent.html":{}}}],["top",{"_index":10,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/TrackComponent.html":{}}}],["top's",{"_index":1133,"title":{},"body":{"classes/Signature.html":{}}}],["tostring",{"_index":532,"title":{},"body":{"classes/Measure.html":{},"classes/Note.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["tr",{"_index":1588,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["track",{"_index":291,"title":{"classes/Track.html":{}},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{}}}],["track#id",{"_index":1409,"title":{},"body":{"classes/Track.html":{}}}],["track#instrument",{"_index":1410,"title":{},"body":{"classes/Track.html":{}}}],["track#instrument|instrument",{"_index":1400,"title":{},"body":{"classes/Track.html":{}}}],["track#notes|notes",{"_index":1403,"title":{},"body":{"classes/Track.html":{}}}],["track#plan",{"_index":1411,"title":{},"body":{"classes/Track.html":{},"components/TrackComponent.html":{}}}],["track#plan|plan",{"_index":1401,"title":{},"body":{"classes/Track.html":{}}}],["track's",{"_index":965,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["track'},{'name",{"_index":262,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["track.component",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["track.component.html",{"_index":362,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/TrackComponent.html":{}}}],["track.component.sass",{"_index":361,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/TrackComponent.html":{}}}],["track.component.ts",{"_index":353,"title":{},"body":{"components/CreateTrackComponent.html":{},"coverage.html":{}}}],["track.component.ts:15",{"_index":366,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["track.component.ts:31",{"_index":371,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["track.getinstrument",{"_index":1480,"title":{},"body":{"components/TrackComponent.html":{}}}],["track.nextid",{"_index":1405,"title":{},"body":{"classes/Track.html":{}}}],["track/create",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"coverage.html":{}}}],["track/track.component",{"_index":323,"title":{},"body":{"modules/AppModule.html":{}}}],["trackcomponent",{"_index":290,"title":{"components/TrackComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"coverage.html":{},"overview.html":{}}}],["trackcomponent#isselected",{"_index":1473,"title":{},"body":{"components/TrackComponent.html":{}}}],["trackcomponent#modifiableinstrument",{"_index":1450,"title":{},"body":{"components/TrackComponent.html":{}}}],["trackcomponent#solomuted",{"_index":1468,"title":{},"body":{"components/TrackComponent.html":{}}}],["trackcomponent#volume",{"_index":1470,"title":{},"body":{"components/TrackComponent.html":{}}}],["trackid",{"_index":537,"title":{},"body":{"classes/Measure.html":{}}}],["tracks",{"_index":535,"title":{},"body":{"classes/Measure.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{}}}],["transform",{"_index":411,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/PlaybarComponent.html":{},"components/TrackComponent.html":{}}}],["translatex",{"_index":413,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{}}}],["translatey",{"_index":412,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/TrackComponent.html":{}}}],["translatey(100",{"_index":502,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["transparent",{"_index":498,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["tree",{"_index":154,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["tremolo_strings",{"_index":1665,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["triggered",{"_index":1431,"title":{},"body":{"components/TrackComponent.html":{}}}],["triplet",{"_index":1589,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["trombone",{"_index":1678,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["true",{"_index":104,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TrackComponent.html":{},"miscellaneous/variables.html":{}}}],["trumpet",{"_index":1677,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tslib",{"_index":1552,"title":{},"body":{"dependencies.html":{}}}],["tuba",{"_index":1679,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["tubular_bells",{"_index":1635,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["twice",{"_index":630,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["two",{"_index":770,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{},"miscellaneous/enumerations.html":{}}}],["type",{"_index":31,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1838,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types/events",{"_index":1547,"title":{},"body":{"dependencies.html":{}}}],["un",{"_index":430,"title":{},"body":{"components/DashboardComponent.html":{}}}],["undetermined",{"_index":769,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["une",{"_index":377,"title":{},"body":{"components/CreateTrackComponent.html":{},"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["unit",{"_index":1822,"title":{},"body":{"index.html":{}}}],["unsoloed",{"_index":969,"title":{},"body":{"components/RhythmComponent.html":{}}}],["unspecified",{"_index":1250,"title":{},"body":{"components/SoundPlayerComponent.html":{}}}],["update",{"_index":767,"title":{},"body":{"components/MetronomeSoundComponent.html":{},"components/RhythmComponent.html":{}}}],["updated",{"_index":760,"title":{},"body":{"components/MetronomeSoundComponent.html":{}}}],["updatemeasureduration",{"_index":923,"title":{},"body":{"components/RhythmComponent.html":{}}}],["url(\"../../assets/images/metronome/metronome",{"_index":707,"title":{},"body":{"components/MetronomeComponent.html":{}}}],["url(\"../../assets/images/plus.svg",{"_index":408,"title":{},"body":{"components/CreateTrackComponent.html":{}}}],["use",{"_index":139,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{},"index.html":{}}}],["used",{"_index":68,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"classes/NoteRepresentation.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"classes/Track.html":{}}}],["usehook",{"_index":17,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["user",{"_index":1178,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{}}}],["using",{"_index":42,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{},"miscellaneous/functions.html":{}}}],["u|g560|gene|gf",{"_index":188,"title":{},"body":{"components/AppComponent.html":{}}}],["v",{"_index":223,"title":{},"body":{"components/AppComponent.html":{}}}],["v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c",{"_index":231,"title":{},"body":{"components/AppComponent.html":{}}}],["value",{"_index":141,"title":{},"body":{"classes/AddOn.html":{},"components/AppComponent.html":{},"components/MainMenuComponent.html":{},"classes/Measure.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value1",{"_index":1100,"title":{},"body":{"components/RhythmComponent.html":{}}}],["value2",{"_index":1101,"title":{},"body":{"components/RhythmComponent.html":{}}}],["values",{"_index":1143,"title":{},"body":{"classes/Signature.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["var",{"_index":257,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/NoteComponent.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["variable",{"_index":1537,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1842,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars.$dark_gray",{"_index":508,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["vars.$deep_dark_gray",{"_index":511,"title":{},"body":{"components/MainMenuComponent.html":{},"components/TrackComponent.html":{}}}],["vars.$disabled_opacity",{"_index":523,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["vars.$gray",{"_index":495,"title":{},"body":{"components/MainMenuComponent.html":{},"components/RhythmComponent.html":{}}}],["vars.$light",{"_index":1509,"title":{},"body":{"components/TrackComponent.html":{}}}],["vars.$light_gray",{"_index":447,"title":{},"body":{"components/DashboardComponent.html":{},"components/MeasureComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["vars.$middle_dark_gray",{"_index":1503,"title":{},"body":{"components/TrackComponent.html":{}}}],["vars.$orange",{"_index":1086,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["vars.$phone_max_width",{"_index":515,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["vars.$red",{"_index":1088,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["vars.$transparent_middle_dark_gray",{"_index":1502,"title":{},"body":{"components/TrackComponent.html":{}}}],["vars.$transparent_orange",{"_index":1495,"title":{},"body":{"components/TrackComponent.html":{}}}],["vars.$transparent_red",{"_index":1499,"title":{},"body":{"components/TrackComponent.html":{}}}],["version",{"_index":545,"title":{},"body":{"classes/Measure.html":{},"classes/Note.html":{},"components/RhythmComponent.html":{},"classes/Track.html":{},"index.html":{}}}],["via",{"_index":1825,"title":{},"body":{"index.html":{}}}],["vibraphone",{"_index":1632,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["viewchild",{"_index":1446,"title":{},"body":{"components/TrackComponent.html":{}}}],["viewchild('instruinput",{"_index":1455,"title":{},"body":{"components/TrackComponent.html":{}}}],["viewencapsulation.none",{"_index":245,"title":{},"body":{"components/AppComponent.html":{}}}],["viola",{"_index":1662,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["violin",{"_index":1661,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["visual",{"_index":66,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["visually",{"_index":1578,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["voice_oohs",{"_index":1674,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["void",{"_index":49,"title":{},"body":{"classes/AddOn.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/ExportMenuComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"classes/Note.html":{},"components/NoteComponent.html":{},"classes/NoteRepresentation.html":{},"components/PlaybarComponent.html":{},"components/RhythmComponent.html":{},"components/SaveMenuComponent.html":{},"classes/Signature.html":{},"components/SignatureComponent.html":{},"components/SoundPlayerComponent.html":{},"classes/Tempo.html":{},"components/TempoComponent.html":{},"classes/Track.html":{},"components/TrackComponent.html":{}}}],["volume",{"_index":1255,"title":{},"body":{"components/SoundPlayerComponent.html":{},"components/TrackComponent.html":{}}}],["votre",{"_index":432,"title":{},"body":{"components/DashboardComponent.html":{}}}],["w",{"_index":596,"title":{},"body":{"components/MeasureComponent.html":{}}}],["w])|libw|lynx|m1",{"_index":202,"title":{},"body":{"components/AppComponent.html":{}}}],["wait",{"_index":1004,"title":{},"body":{"components/RhythmComponent.html":{}}}],["waitingrecord",{"_index":911,"title":{},"body":{"components/RhythmComponent.html":{}}}],["want",{"_index":1183,"title":{},"body":{"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"miscellaneous/functions.html":{}}}],["way",{"_index":1035,"title":{},"body":{"components/RhythmComponent.html":{}}}],["wa|abac|ac(er|oo|s",{"_index":176,"title":{},"body":{"components/AppComponent.html":{}}}],["webc|whit|wi(g",{"_index":232,"title":{},"body":{"components/AppComponent.html":{}}}],["webkit",{"_index":486,"title":{},"body":{"components/MainMenuComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/SignatureComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["weight",{"_index":1098,"title":{},"body":{"components/RhythmComponent.html":{}}}],["wether",{"_index":35,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["whether",{"_index":237,"title":{},"body":{"components/AppComponent.html":{},"components/MetronomeComponent.html":{},"components/MetronomeSoundComponent.html":{},"components/TempoComponent.html":{}}}],["whistle",{"_index":1699,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["whole",{"_index":1567,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["whole_note",{"_index":1569,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["whose",{"_index":1362,"title":{},"body":{"classes/Track.html":{}}}],["width",{"_index":250,"title":{},"body":{"components/AppComponent.html":{},"components/CreateTrackComponent.html":{},"components/DashboardComponent.html":{},"components/MainMenuComponent.html":{},"components/MeasureComponent.html":{},"components/MetronomeComponent.html":{},"components/RhythmComponent.html":{},"components/TempoComponent.html":{},"components/TrackComponent.html":{}}}],["without",{"_index":94,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["woodblock",{"_index":1736,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["works",{"_index":852,"title":{},"body":{"components/NoteComponent.html":{}}}],["wrapper",{"_index":1506,"title":{},"body":{"components/TrackComponent.html":{}}}],["write",{"_index":34,"title":{},"body":{"classes/AddOn.html":{},"classes/NoteRepresentation.html":{}}}],["wuold",{"_index":1054,"title":{},"body":{"components/RhythmComponent.html":{}}}],["w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m",{"_index":203,"title":{},"body":{"components/AppComponent.html":{}}}],["x",{"_index":1072,"title":{},"body":{"components/RhythmComponent.html":{},"components/TrackComponent.html":{}}}],["xylophone",{"_index":1634,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["y",{"_index":1071,"title":{},"body":{"components/RhythmComponent.html":{}}}],["your|zeto|zte",{"_index":234,"title":{},"body":{"components/AppComponent.html":{}}}],["z",{"_index":496,"title":{},"body":{"components/MainMenuComponent.html":{}}}],["zone.js",{"_index":1554,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":307,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddOn.html":{"url":"classes/AddOn.html","title":"class - AddOn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddOn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/note-representation.ts\n        \n\n            \n                Description\n            \n            \n                The add on on top of a note's representation\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                number\n                            \n                            \n                                    Private\n                                useHook\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNumber\n                            \n                            \n                                getUseHook\n                            \n                            \n                                setNumber\n                            \n                            \n                                setUseHook\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(number: number, useHook: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/note-representation.ts:17\n                            \n                        \n\n                \n                    \n                            The constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        number\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        useHook\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            number\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note-representation.ts:13\n                            \n                        \n\n                \n                    \n                        The number to write\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            useHook\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note-representation.ts:17\n                            \n                        \n\n                \n                    \n                        Wether or not the number should be shown with an hook\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNumber\n                        \n                        \n                    \n                \n            \n            \n                \ngetNumber()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:34\n                \n            \n\n\n            \n                \n                    Get the number\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUseHook\n                        \n                        \n                    \n                \n            \n            \n                \ngetUseHook()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:50\n                \n            \n\n\n            \n                \n                    Check if using hoot for this representaion is needed\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setNumber\n                        \n                        \n                    \n                \n            \n            \n                \nsetNumber(number: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:42\n                \n            \n\n\n            \n                \n                    Set the number\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    number\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setUseHook\n                        \n                        \n                    \n                \n            \n            \n                \nsetUseHook(useHook: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:57\n                \n            \n\n\n            \n                \n                    Set if using a hook for this represention is needed\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    useHook\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { environment } from \"./../../environments/environment\";\n\nexport type AddOnJson = {number: number, useHook: boolean};\n\n\n/**\n * The add on on top of a note's representation\n */\nclass AddOn {\n  /**\n   * The number to write\n   */\n  private number: number;\n  /**\n   * Wether or not the number should be shown with an hook\n   */\n  private useHook: boolean;\n\n\n  /**\n   * The constructor\n   * @param {number} number @link AddOn#number\n   * @param {boolean} useHook @link AddOn#useHook\n   */\n  constructor(number: number, useHook: boolean) {\n    this.number = number;\n    this.useHook = useHook;\n  }\n\n  /**\n   * Get the number\n   * @return {@link AddOn#number}\n   */\n  getNumber(): number {\n    return this.number;\n  }\n\n  /**\n   * Set the number\n   * @param {number} {@link AddOn#number}\n   */\n  setNumber(number: number): void {\n    this.number = number;\n  }\n\n  /**\n   * Check if using hoot for this representaion is needed\n   * @return {boolean} {@link AddOn#useHook}\n   */\n  getUseHook(): boolean {\n    return this.useHook;\n  }\n  /**\n   * Set if using a hook for this represention is needed\n   * @param {boolean} {@link AddOn#useHook}\n   */\n  setUseHook(useHook: boolean): void {\n    this.useHook = useHook;\n  }\n}\n\n/**\n * This class references the visual representation of any notes.\n *\n * Used in the enums BinaryNote and TernaryNote.\n */\nexport class NoteRepresentation {\n  /**\n   * @ignore\n  */\n  private static dirPath: string = \"../\" + environment.pathsFromApp.rythmsImg;\n  /**\n   * @ignore\n  */\n  private static extension: string = \".svg\";\n\n  /**\n   * The paths to the different parts of the note's Img, in order\n   */\n  private imgsPaths: string[] = new Array();\n  /**\n   * {@link AddOn}\n   */\n  private addOn: AddOn | null = null;\n\n\n  /**\n   * The constructor\n   * @param {string[]} imgsNames The names of the images, in order, used to form the note without the extention.\n   * @param {AddOnJson|null} addOn Used to add a number on top of the note. If used, must possess the attributes {number} number and {boolean} useHook\n   *\n   * @example\n   * let quarterNoteRep: NoteRepresentation = new NoteRepresentation([\"4N\"], null);\n   * let quarterNoteTripletRep: NoteRepresentation = new NoteRepresentation([\"4N\"], {\"number\": 3, \"useHook\": true});\n   */\n  constructor(imgsNames: string[], addOn: AddOnJson | null = null) {\n    for(let i = 0 ; i = this.imgsPaths.length) {\n    //}\n    return this.imgsPaths[i];\n  }\n\n  /**\n  * Get the number of different paths to images\n  * @returns {number} The number of paths\n  */\n  getImgsPathsLength(): number {\n    return this.imgsPaths.length;\n  }\n\n  /**\n  * Add an image to the list of paths using its name\n  * @param {String} imgName The name of the image\n  * @param {number|null} index The place in the list where we insert\n  */\n  addToImgsPaths(imgName: string, index: number | null): void {\n    if(index == null || index == this.imgsPaths.length) {\n      this.imgsPaths.push(this.convertImgNameToPath(imgName));\n    } else {\n      this.imgsPaths.splice(index, 0, this.convertImgNameToPath(imgName));\n    }\n  }\n\n  /**\n  * Remove an image from the list of paths using its name\n  * @param {String} imgName The name of the image\n  */\n  removeFromImgsPaths(imgName: string): void {\n    let index:number = this.imgsPaths.indexOf(imgName);\n    if(index != -1) {\n      this.imgsPaths.splice(index, 1);\n    }\n  }\n\n  /**\n  * Remove an image from the list of paths using its palce in the list\n  * @param {number} index The place of the image to remove\n  */\n  removeFromImgsPathsAt(index: number): void {\n    this.imgsPaths.splice(index, 1);\n  }\n\n  /**\n  * Set the addon linked to this representation\n  * @param {AddOnJson|null} addon the addon to set\n  */\n  setAddOn(addOn: AddOnJson | null) {\n    if(addOn != null) {\n      this.addOn = new AddOn(addOn.number, addOn.useHook);\n    } else {\n      this.addOn = null;\n    }\n  }\n\n  /**\n  * Get the number of the addon linked to this representation\n  * @returns {number|null} The number of the addon\n  */\n  getAddOnNumber(): number | null {\n    if(this.addOn != null) {\n      return this.addOn.getNumber();\n    }\n    return null;\n  }\n\n  /**\n  * Get if the addon linked to this representation needs to use a hook\n  * @returns {boolean|null} The value of the condition\n  */\n  getAddOnUseHook(): boolean | null {\n    if(this.addOn != null) {\n      return this.addOn.getUseHook();\n    }\n    return null;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        The application component, or main component\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isMobile\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isMobile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\n      || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:22\n                            \n                        \n\n                \n                    \n                        Whether or not if the application is being launched from a phone. NOT USED\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Polyrythmique'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:17\n                            \n                        \n\n                \n                    \n                        The title of the application\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n\n/**\n * The application component, or main component\n */\n@Component({\n  selector: \"app-root\",\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.sass']//,\n  //encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n  /**\n   * The title of the application\n   */\n  title: string = 'Polyrythmique';\n\n  /**\n   * Whether or not if the application is being launched from a phone. NOT USED\n   */\n  isMobile: boolean = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\n      || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4));\n}\n\n    \n\n    \n        \n  \n\n\n\n\n    \n\n    \n                \n                    ./app.component.sass\n                \n                @use \"~sass/vars\"\n\n:host\n  display: flex\n  width: 100%\n  max-width: 100%\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_declarations\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCreateTrackComponent\n\nCreateTrackComponent\n\nAppModule -->\n\nCreateTrackComponent->AppModule\n\n\n\n\n\nDashboardComponent\n\nDashboardComponent\n\nAppModule -->\n\nDashboardComponent->AppModule\n\n\n\n\n\nExportMenuComponent\n\nExportMenuComponent\n\nAppModule -->\n\nExportMenuComponent->AppModule\n\n\n\n\n\nMainMenuComponent\n\nMainMenuComponent\n\nAppModule -->\n\nMainMenuComponent->AppModule\n\n\n\n\n\nMeasureComponent\n\nMeasureComponent\n\nAppModule -->\n\nMeasureComponent->AppModule\n\n\n\n\n\nMetronomeComponent\n\nMetronomeComponent\n\nAppModule -->\n\nMetronomeComponent->AppModule\n\n\n\n\n\nMetronomeSoundComponent\n\nMetronomeSoundComponent\n\nAppModule -->\n\nMetronomeSoundComponent->AppModule\n\n\n\n\n\nNoteComponent\n\nNoteComponent\n\nAppModule -->\n\nNoteComponent->AppModule\n\n\n\n\n\nPlaybarComponent\n\nPlaybarComponent\n\nAppModule -->\n\nPlaybarComponent->AppModule\n\n\n\n\n\nRhythmComponent\n\nRhythmComponent\n\nAppModule -->\n\nRhythmComponent->AppModule\n\n\n\n\n\nSaveMenuComponent\n\nSaveMenuComponent\n\nAppModule -->\n\nSaveMenuComponent->AppModule\n\n\n\n\n\nSignatureComponent\n\nSignatureComponent\n\nAppModule -->\n\nSignatureComponent->AppModule\n\n\n\n\n\nSoundPlayerComponent\n\nSoundPlayerComponent\n\nAppModule -->\n\nSoundPlayerComponent->AppModule\n\n\n\n\n\nTempoComponent\n\nTempoComponent\n\nAppModule -->\n\nTempoComponent->AppModule\n\n\n\n\n\nTrackComponent\n\nTrackComponent\n\nAppModule -->\n\nTrackComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            CreateTrackComponent\n                        \n                        \n                            DashboardComponent\n                        \n                        \n                            ExportMenuComponent\n                        \n                        \n                            MainMenuComponent\n                        \n                        \n                            MeasureComponent\n                        \n                        \n                            MetronomeComponent\n                        \n                        \n                            MetronomeSoundComponent\n                        \n                        \n                            NoteComponent\n                        \n                        \n                            PlaybarComponent\n                        \n                        \n                            RhythmComponent\n                        \n                        \n                            SaveMenuComponent\n                        \n                        \n                            SignatureComponent\n                        \n                        \n                            SoundPlayerComponent\n                        \n                        \n                            TempoComponent\n                        \n                        \n                            TrackComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MainMenuComponent } from './main-menu/main-menu.component';\nimport { RhythmComponent } from './rhythm/rhythm.component';\nimport { TrackComponent } from './track/track.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { CreateTrackComponent } from './create-track/create-track.component';\nimport { SignatureComponent } from './signature/signature.component';\nimport { SaveMenuComponent } from './save-menu/save-menu.component';\nimport { ExportMenuComponent } from './export-menu/export-menu.component';\nimport { PlaybarComponent } from './playbar/playbar.component';\nimport { TempoComponent } from './tempo/tempo.component';\nimport { MetronomeComponent } from './metronome/metronome.component';\nimport { MeasureComponent } from './measure/measure.component';\nimport { NoteComponent } from './note/note.component';\nimport { MetronomeSoundComponent } from './metronome-sound/metronome-sound.component';\nimport { SoundPlayerComponent } from './sound-player/sound-player.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainMenuComponent,\n    RhythmComponent,\n    TrackComponent,\n    DashboardComponent,\n    CreateTrackComponent,\n    SignatureComponent,\n    SaveMenuComponent,\n    ExportMenuComponent,\n    PlaybarComponent,\n    TempoComponent,\n    MetronomeComponent,\n    MeasureComponent,\n    NoteComponent,\n    MetronomeSoundComponent,\n    SoundPlayerComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DashboardComponent } from \"./dashboard/dashboard.component\";\nimport { RhythmComponent } from \"./rhythm/rhythm.component\";\nimport { MetronomeComponent } from \"./metronome/metronome.component\";\n\nconst routes: Routes = [{path: \"rhythm\", component: RhythmComponent},\n                        {path: \"rhythm-sound\", component: RhythmComponent},\n                        {path: \"metronome\", component: MetronomeComponent},\n                        {path: \"dashboard\", component: DashboardComponent},\n                        {path: \"\", redirectTo: \"/dashboard\", pathMatch: \"full\"},\n                        {path: \"**\", component: RhythmComponent}];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CreateTrackComponent.html":{"url":"components/CreateTrackComponent.html","title":"component - CreateTrackComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CreateTrackComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/create-track/create-track.component.ts\n\n\n    \n        Description\n    \n    \n        This compoenent is used to show and receive events for creating a new track\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-create-track\n            \n\n            \n                styleUrls\n                ./create-track.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./create-track.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTrack\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        create\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/create-track/create-track.component.ts:15\n                            \n                        \n                \n                    \n                        The attribute used to emit the signal to create a track to its parent element\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTrack\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTrack()\n                \n            \n\n\n            \n                \n                    Defined in src/app/create-track/create-track.component.ts:31\n                \n            \n\n\n            \n                \n                    Send to its parent element create = true\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, EventEmitter, Output } from '@angular/core';\n/**\n * This compoenent is used to show and receive events for creating a new track\n */\n@Component({\n  selector: 'app-create-track',\n  templateUrl: './create-track.component.html',\n  styleUrls: ['./create-track.component.sass']\n})\n\nexport class CreateTrackComponent implements OnInit {\n  /**\n   * The attribute used to emit the signal to create a track to its parent element\n   */\n  @Output() create: EventEmitter = new EventEmitter();\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * Send to its parent element create = true\n   */\n  createTrack(): void {\n    this.create.emit(true);\n  }\n\n}\n\n    \n\n    \n        \n  Ajouter une piste\n\n\n    \n\n    \n                \n                    ./create-track.component.sass\n                \n                $FONT_SIZE:   1.6em\n$IMG_SIZE:    1.3em\n$MARGIN:      1rem\n\n:host\n  display: flex\n  justify-content: center\n\n\ndiv\n  display: inline-block\n  cursor: pointer\n  font-size: $FONT_SIZE\n  text-align: center\n\np\n  margin: 0\n  position: relative\n  padding: $MARGIN 0\n  padding-left: $MARGIN + 1.6 * 1.3\n\n  &::before\n    content: \"\"\n    position: absolute\n    display: inline-block\n    height: $IMG_SIZE\n    width: $IMG_SIZE\n    background-size: $IMG_SIZE $IMG_SIZE\n    background-image: url(\"../../assets/images/plus.svg\")\n    background-repeat: no-repeat\n    top: 50%\n    transform: translateY(-50%) translateX(-$MARGIN - 1.6 * 1.3)\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Ajouter une piste'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CreateTrackComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DashboardComponent.html":{"url":"components/DashboardComponent.html","title":"component - DashboardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DashboardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/dashboard.component.ts\n\n\n    \n        Description\n    \n    \n        The home page\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-dashboard\n            \n\n            \n                styleUrls\n                ./dashboard.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./dashboard.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n/**\n * The home page\n */\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.sass']\n})\n\nexport class DashboardComponent implements OnInit {\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n}\n\n    \n\n    \n        Tableau de bord\n\n\n  Nouveau projet\n\n  \n    \n      Polyrytmie simple\n      \n    \n\n    \n      Polyrytmie sur fond musical\n      \n    \n  \n\n\n\n  Ouvrir un projet\n  \n    \n      Depuis votre appareil\n      \n    \n  \n\n\n    \n\n    \n                \n                    ./dashboard.component.sass\n                \n                @use \"~sass/vars\"\n\nsection\n  width: 100%\n  padding: 3.5rem 0\n\nh2, h3\n  text-align: center\n\nh3\n  margin: 0\n\nsection>div\n  width: 60vw\n  margin: auto\n  display: flex\n  justify-content: space-evenly\n\n  &>a, &>div\n    display: flex\n    flex-direction: column\n    justify-content: space-between\n    background-color: vars.$LIGHT_GRAY\n    border-radius: 1.5rem\n    width : 12rem\n    min-height : 12rem\n    padding: 1rem\n    box-sizing: border-box\n\n  &>div\n    cursor: pointer\n\nimg\n  display: block\n  height: 5rem\n  width: 5rem\n  margin: auto\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Tableau de bord  Nouveau projet            Polyrytmie simple                    Polyrytmie sur fond musical              Ouvrir un projet            Depuis votre appareil            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DashboardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ExportMenuComponent.html":{"url":"components/ExportMenuComponent.html","title":"component - ExportMenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ExportMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/export-menu/export-menu.component.ts\n\n\n    \n        Description\n    \n    \n        The menu that allows to exports a rythm \nTODO\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-export-menu\n            \n\n            \n                styleUrls\n                ./export-menu.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./export-menu.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n/**\n * The menu that allows to exports a rythm \n * TODO\n */\n@Component({\n  selector: 'app-export-menu',\n  templateUrl: './export-menu.component.html',\n  styleUrls: ['./export-menu.component.sass']\n})\n\nexport class ExportMenuComponent implements OnInit {\n  /**\n   * @ignore\n   */\n  constructor() { }\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n}\n\n    \n\n    \n        \n  \n  \n    \n    \n    \n  \n\n\n    \n\n    \n                \n                    ./export-menu.component.sass\n                \n                @use \"../styles/menu-parts\"\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ExportMenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MainMenuComponent.html":{"url":"components/MainMenuComponent.html","title":"component - MainMenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MainMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/main-menu/main-menu.component.ts\n\n\n    \n        Description\n    \n    \n        The main menu of the application.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-main-menu\n            \n\n            \n                styleUrls\n                ./main-menu.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./main-menu.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setActive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                        \n                            \n                                    Defined in src/app/main-menu/main-menu.component.ts:19\n                            \n                        \n                \n                    \n                        The number of the active tab\n               1 -> rhythm\n               2 -> rhythm-sound\n               3 -> metronome\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setActive\n                        \n                        \n                    \n                \n            \n            \n                \nsetActive(active: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/main-menu/main-menu.component.ts:35\n                \n            \n\n\n            \n                \n                    Change the active tab\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    active\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The number of the tab to set as active\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, Input } from '@angular/core';\n\n/**\n * The main menu of the application.\n */\n@Component({\n  selector: 'app-main-menu',\n  templateUrl: './main-menu.component.html',\n  styleUrls: ['./main-menu.component.sass']\n})\n\nexport class MainMenuComponent implements OnInit {\n  /**\n   * The number of the active tab\n   *               1 -> rhythm\n   *               2 -> rhythm-sound\n   *               3 -> metronome\n   */\n  @Input() active: number = 1;\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * Change the active tab\n   * @param {number} active The number of the tab to set as active\n   */\n  setActive(active: number): void {\n    this.active = active;\n  }\n}\n\n    \n\n    \n        \n  MENU\n  \n    \n      \n      Créer une polyrythmie\n    \n\n    \n      \n      Créer une polyrythmie depuis une musique\n    \n    \n      \n      Métronome\n    \n  \n\n\n    \n\n    \n                \n                    ./main-menu.component.sass\n                \n                @use \"~sass/vars\"\n\n$WIDTH: 3.5rem\n$SLOPE: ($WIDTH * 49.1) / 120.6\n$ICON_WIDTH: $WIDTH * 0.85\n\naside\n  position: -webkit-sticky\n  position: sticky\n  top: 0\n  right: 0\n  height: 100vh\n  width: $WIDTH\n\nnav\n  height: 100%\n  width: 100%\n  display: flex\n  flex-direction: column\n\nbutton\n  display: none\n\na\n  position: relative\n  display: flex\n  align-items: center\n  justify-content: center\n  padding: 0\n  height: calc(100% / 3)\n  width: 100%\n  background-color: vars.$GRAY\n  z-index: 10\n\n  &::before, &::after\n    content: \"\"\n    position: absolute\n    border-color: transparent transparent transparent vars.$GRAY\n    border-style: solid\n    height: 0\n    width: 0\n  &::before\n    top: 0\n    border-width: $SLOPE 0 0 $WIDTH\n    transform: translateY(-100%)\n  &::after\n    bottom: 0\n    border-width: 0 0 $SLOPE $WIDTH\n    transform: translateY(100%)\n\n  &:first-child::before\n    border: none\n  &:last-child::after\n    border: none\n\n\n.middle\n  background-color: vars.$DARK_GRAY\n  z-index: 9\n\n  &::before, &::after\n    border-color: transparent transparent transparent vars.$DARK_GRAY\n.dark\n  background-color: vars.$DEEP_DARK_GRAY\n  z-index: 8\n\n  &::before, &::after\n    border-color: transparent transparent transparent vars.$DEEP_DARK_GRAY\n\n\nspan\n  display: none\nimg\n  width: $ICON_WIDTH\n\n\n@media (max-width: vars.$PHONE_MAX_WIDTH)\n  aside\n    position: fixed\n    left: 0\n    background-color: vars.$GRAY\n\n  button\n    display: inline-block\n    &:not(.active)+nav\n      display: none\n    //&:not(.active)\n\n  nav\n    width: 40%\n    min-width: 275px\n    justify-content: space-evenly\n    z-index: 2\n\n    &::after\n      content: \"\"\n      width: 500%\n      height: 100vh\n      position: absolute\n      top: 0\n      left: 100%\n      z-index: 1\n      background-color: vars.$DARK_GRAY\n      opacity: 1 - vars.$DISABLED_OPACITY\n\n    a\n      background-color: transparent\n      height: auto\n      justify-content: flex-start\n      padding-left: 1rem\n      box-sizing: border-box\n\n      &::before, &::after\n        border: none\n\n      span\n        display: inline-block\n        padding: 0 0.5rem\n      img\n        width: $ICON_WIDTH * 0.75\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  MENU                  Créer une polyrythmie                    Créer une polyrythmie depuis une musique                    Métronome      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MainMenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Measure.html":{"url":"classes/Measure.html","title":"class - Measure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Measure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/measure.ts\n        \n\n            \n                Description\n            \n            \n                This class represents a measure\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                curMaxPos\n                            \n                            \n                                    Private\n                                notes\n                            \n                            \n                                    Private\n                                position\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getNotes\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            curMaxPos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/measure.ts:18\n                            \n                        \n\n                \n                    \n                        The auto-increment value for the tracks' ids\n{\ntrackId: curId,\n}\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            notes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Note[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/measure.ts:29\n                            \n                        \n\n                \n                    \n                        The notes in the measure\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/measure.ts:24\n                            \n                        \n\n                \n                    \n                        Position of the measure in the track\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNotes\n                        \n                        \n                    \n                \n            \n            \n                \ngetNotes()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/measure.ts:57\n                \n            \n\n\n            \n                \n                    Get the list of notes in the measure\n\n\n                    \n                    \n                    \n                        Returns :         Note[]\n\n                    \n                    \n                        A list of list of the notes in the measure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/measure.ts:65\n                \n            \n\n\n            \n                \n                    Return the current measure in string form\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        a stringified version of this measure\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Note } from \"./note\";\n\n/**\n* This class represents a measure\n*/\nexport class Measure {\n  /**\n   * The auto-increment value for the tracks' ids\n   * {\n    trackId: curId,\n\n    }\n   */\n\n   /**\n   *  Static indicator : position the next measure will take in the track\n   */\n  private static curMaxPos: number[] = new Array();\n\n\n  /**\n  * Position of the measure in the track\n  */\n  private position: number;\n\n  /**\n  * The notes in the measure\n  */\n  private notes: Note[];\n\n  /**\n  * @ignore\n  */\n  constructor(trackId: number, notes: Note[] = new Array()) {\n    /*console.log(\"ENter\");\n    console.log(trackId);\n    console.log(trackId.toString(10));\n    console.log(Measure.curMaxPos);*/\n    if(Measure.curMaxPos.hasOwnProperty(trackId.toString(10))) {\n      //console.log(\"if\");\n      ++(Measure.curMaxPos[trackId]);\n    } else {\n      //console.log(\"if\");\n      Measure.curMaxPos[trackId] = 1;\n    }\n    this.position = Measure.curMaxPos[trackId];\n    this.notes = notes;\n    //console.log(Measure.curMaxPos);\n    //console.log(this.position);\n    //console.log(this.toString());\n  }\n\n  /**\n  * Get the list of notes in the measure\n  * @returns {Note[]} A list of list of the notes in the measure\n  */\n  getNotes(): Note[] {\n    return this.notes;\n  }\n\n  /**\n   * Return the current measure in string form\n   * @returns {String} a stringified version of this measure\n   */\n  toString(): string {\n    let notesStr: string = \"\";\n    for(let aNote of this.notes) {\n      notesStr = notesStr + aNote.toString() + \",\";\n    }\n    notesStr = notesStr.slice(0, -1);\n    return \"{\\\"position\\\": \" + this.toString() +\n              \", \\\"notes\\\": [\" + notesStr +\n            \"]}\";\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MeasureComponent.html":{"url":"components/MeasureComponent.html","title":"component - MeasureComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MeasureComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/measure/measure.component.ts\n\n\n    \n        Description\n    \n    \n        TODO\nThe measures to insert inside the TrackComponent (this last one should have changes afterward, such as moving attributes)\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-measure\n            \n\n            \n                styleUrls\n                ./measure.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./measure.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getWidth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                measure\n                            \n                            \n                                signature\n                            \n                            \n                                tempo\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        measure\n                    \n                \n                \n                    \n                        Type :         Measure\n\n                    \n                \n                \n                    \n                        Default value : new Measure(0)\n                    \n                \n                        \n                            \n                                    Defined in src/app/measure/measure.component.ts:32\n                            \n                        \n                \n                    \n                        The measure\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        signature\n                    \n                \n                \n                    \n                        Type :         Signature\n\n                    \n                \n                \n                    \n                        Default value : new Signature()\n                    \n                \n                        \n                            \n                                    Defined in src/app/measure/measure.component.ts:22\n                            \n                        \n                \n                    \n                        The signature of the measure Signature\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        tempo\n                    \n                \n                \n                    \n                        Type :         Tempo\n\n                    \n                \n                \n                    \n                        Default value : new Tempo()\n                    \n                \n                        \n                            \n                                    Defined in src/app/measure/measure.component.ts:27\n                            \n                        \n                \n                    \n                        The tempo on the measure Measure\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getWidth\n                        \n                        \n                    \n                \n            \n            \n                \ngetWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/app/measure/measure.component.ts:52\n                \n            \n\n\n            \n                \n                    Get the width of the measure  TODO\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The width of the measure\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, SimpleChanges, OnChanges, Input } from '@angular/core';\n\nimport { Signature } from \"../classes/signature\";\nimport { Tempo } from \"../classes/tempo\";\nimport { Measure } from \"../classes/measure\";\n\n\n/**\n * TODO\n * The measures to insert inside the TrackComponent (this last one should have changes afterward, such as moving attributes)\n */\n@Component({\n  selector: 'app-measure',\n  templateUrl: './measure.component.html',\n  styleUrls: ['./measure.component.sass']\n})\nexport class MeasureComponent implements OnInit, OnChanges {\n\n  /**\n  * The signature of the measure {@link Signature}\n  */\n  @Input() signature: Signature = new Signature();\n\n  /**\n  * The tempo on the measure {@link Measure}\n  */\n  @Input() tempo: Tempo = new Tempo();\n\n  /**\n  * The measure\n  */\n  @Input() measure: Measure = new Measure(0);\n  /**\n   * @ignore\n   */\n  constructor() { }\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n  * @ignore\n  */\n  ngOnChanges(changes: SimpleChanges): void {}\n\n  /**\n  * Get the width of the measure  TODO\n  * @returns {number} The width of the measure\n  */\n  getWidth(): number {\n    let numberOfWholeNote: number = this.signature.getTop() * this.signature.getBottomNumber();\n    //console.log(numberOfWholeNote);\n\n    // TO DO : get the\n    return numberOfWholeNote * 153;\n    //1N w = 113.2 * 4\n    //N h = 77\n  }\n}\n\n    \n\n    \n        \n  \n\n\n    \n\n    \n                \n                    ./measure.component.sass\n                \n                @use \"~sass/vars\"\n\n:host\n  display: flex\n  min-height: 100%\n  // NEXT LINE TO CHANGE :\n  //min-width: 2rem\n\n  border-right: 0.2rem solid vars.$LIGHT_GRAY\n\ndiv\n  flex-grow: 1\n  display: flex\n  height: 100%\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MeasureComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MetronomeComponent.html":{"url":"components/MetronomeComponent.html","title":"component - MetronomeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MetronomeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/metronome/metronome.component.ts\n\n\n    \n        Description\n    \n    \n        Used to define the Metronome\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-metronome\n            \n\n            \n                styleUrls\n                ./metronome.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./metronome.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isModifyingInstrument\n                            \n                            \n                                isRunning\n                            \n                            \n                                runningMetronome\n                            \n                            \n                                sound\n                            \n                            \n                                tempo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getInstrumentList\n                            \n                            \n                                getMetronomeMovementLengthInSec\n                            \n                            \n                                setBPM\n                            \n                            \n                                setInstrument\n                            \n                            \n                                setTempo\n                            \n                            \n                                start\n                            \n                            \n                                stop\n                            \n                            \n                                toggleModifyInstrument\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInstrumentList\n                        \n                        \n                    \n                \n            \n            \n                \ngetInstrumentList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:119\n                \n            \n\n\n            \n                \n                    Get the list of possible instruments\n\n\n                    \n                    \n                    \n                        Returns :     String[]\n\n                    \n                    \n                        The list of possible instrument's paths\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMetronomeMovementLengthInSec\n                        \n                        \n                    \n                \n            \n            \n                \ngetMetronomeMovementLengthInSec()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:81\n                \n            \n\n\n            \n                \n                    Get the BPM at which the metronome beats\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The time it takes for the metronome to tick twice (in sec)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setBPM\n                        \n                        \n                    \n                \n            \n            \n                \nsetBPM(bpm: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:57\n                \n            \n\n\n            \n                \n                    Set the BPM at which the metronome beats\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bpm\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The beat per minute ratio the metronome will beat at\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInstrument\n                        \n                        \n                    \n                \n            \n            \n                \nsetInstrument(soundName: String)\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:127\n                \n            \n\n\n            \n                \n                    Set the sound played by the metronome based on its name\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    soundName\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the sound to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTempo\n                        \n                        \n                    \n                \n            \n            \n                \nsetTempo(tempo: Tempo)\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:69\n                \n            \n\n\n            \n                \n                    Set the tempo of the metronome\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tempo\n                                    \n                                                Tempo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new tempo of the metronome\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:88\n                \n            \n\n\n            \n                \n                    Starts the metronome\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:98\n                \n            \n\n\n            \n                \n                    Stops the metronome\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleModifyInstrument\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleModifyInstrument()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome/metronome.component.ts:106\n                \n            \n\n\n            \n                \n                    Change is the instrument is being modified or not MetronomeComponent\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isModifyingInstrument\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome/metronome.component.ts:38\n                            \n                        \n\n                \n                    \n                        If the instrument is being changed or not\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isRunning\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome/metronome.component.ts:28\n                            \n                        \n\n                \n                    \n                        Whether or not the metronome is running (is being play)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            runningMetronome\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Metronome\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome/metronome.component.ts:33\n                            \n                        \n\n                \n                    \n                        The metronome\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Metronome.Sound\n\n                        \n                    \n                    \n                        \n                            Default value : Metronome.Sound.TOC\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome/metronome.component.ts:24\n                            \n                        \n\n                \n                    \n                        The sound of the metronome. See the metronome's sound attribute for more\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tempo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tempo\n\n                        \n                    \n                    \n                        \n                            Default value : new Tempo(BasicNote.QUARTER_NOTE, 60)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome/metronome.component.ts:19\n                            \n                        \n\n                \n                    \n                        The BPM (Beat Per Minute) of the metronome\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Tempo } from '../classes/tempo';\nimport { Metronome, Sound } from '../classes/metronome';\nimport { BasicNote } from '../enums/basic-note';\n\n/**\n * Used to define the Metronome\n */\n@Component({\n  selector: 'app-metronome',\n  templateUrl: './metronome.component.html',\n  styleUrls: ['./metronome.component.sass']\n})\n\nexport class MetronomeComponent implements OnInit {\n  /**\n   * The BPM (Beat Per Minute) of the metronome\n   */\n  tempo: Tempo = new Tempo(BasicNote.QUARTER_NOTE, 60);\n\n  /**\n   * The sound of the metronome. See the {@link Metronome#sound|metronome's sound attribute} for more\n   */\n  sound: Metronome.Sound = Metronome.Sound.TOC;\n  /**\n   * Whether or not the metronome is running (is being play)\n   */\n  isRunning: boolean = false;\n\n  /**\n   * The metronome\n   */\n  runningMetronome: Metronome;\n\n  /**\n  * If the instrument is being changed or not\n  */\n  isModifyingInstrument: boolean = false;\n\n  /**\n  * @ignore\n  */\n  constructor() {\n    this.runningMetronome = new Metronome(this.tempo.getBPM());\n  }\n\n  /**\n  * @ignore\n  */\n  ngOnInit(): void {\n  }\n\n  /**\n  * Set the BPM at which the metronome beats\n  *@param {number} bpm The beat per minute ratio the metronome will beat at\n  */\n  setBPM(bpm: number): void {\n    if(this.isRunning) {\n      this.stop();\n    }\n    this.tempo.setBPM(bpm);\n    this.runningMetronome.setBPM(bpm);\n  }\n\n  /**\n    * Set the {@link MetronomeCOmponent#tempo|tempo} of the metronome\n    *@param {Tempo} tempo The new tempo of the metronome\n    */\n  setTempo(tempo: Tempo): void {\n    if(this.isRunning) {\n      this.stop();\n    }\n    this.tempo = tempo;\n    this.runningMetronome.setBPM(this.tempo.getBPM());\n  }\n\n  /**\n  * Get the BPM at which the metronome beats\n  * @returns {number} The time it takes for the metronome to tick twice (in sec)\n  */\n  getMetronomeMovementLengthInSec(): number {\n    return 1 / (this.tempo.getBPM() / 120);\n  }\n\n  /**\n  * Starts the metronome\n  */\n  start(): void{\n    if(!this.isModifyingInstrument){\n      this.isRunning = true;\n      this.runningMetronome.start();\n    }\n  }\n\n  /**\n  * Stops the metronome\n  */\n  stop(): void{\n    this.isRunning = false;\n    this.runningMetronome.stop();\n  }\n\n  /**\n  * Change is the instrument is being modified or not {@link MetronomeComponent#isModifyingInstrument}\n  */\n  toggleModifyInstrument(): void{\n    if(!this.isRunning){\n      this.isModifyingInstrument = !this.isModifyingInstrument;\n      if(!this.isModifyingInstrument){\n        this.runningMetronome.setSound(this.sound);\n      }\n    }\n  }\n\n  /**\n  * Get the list of possible instruments\n  * @returns {String[]} The list of possible instrument's paths\n  */\n  getInstrumentList(): String[]{\n    return Sound.values();\n  }\n\n  /**\n  * Set the sound played by the metronome based on its name\n  * @param {String} soundName The name of the sound to set\n  */\n  setInstrument(soundName: String){\n    console.log(\"CLICKED\");\n    this.toggleModifyInstrument();\n    this.sound = Sound.getPath(soundName);\n    this.runningMetronome.setSound(this.sound);\n  }\n\n}\n\n    \n\n    \n        \n  \n  \n\n\n\n  \n\n  \n    \n    \n  \n\n  {{ runningMetronome.getSoundName() }}\n\n    this.value\n    \n   -->\n\n  \n    {{this.instrument}} \n  \n\n\n\n\n    \n\n    \n                \n                    ./metronome.component.sass\n                \n                @use \"../styles/menu-parts\"\n\n$METRONOME_HEIGHT: 30rem\n$METRONOME_WIDTH: ($METRONOME_HEIGHT * 90) / 112.5\n\n:host\n  display: flex\n  flex-direction: column\n  height: 100%\n\n.controls\n  display: flex\n  justify-content: space-evenly\n  align-items: center\n  font-size: 1.5em\n  margin-bottom: 5rem\n\n  &>span\n    font-size: 1.2em\n\n  button, img\n    width: 5rem\n    height: 5rem\n\n\n.metronome\n    background-image: url(\"../../assets/images/metronome/metronome-base.svg\")\n    background-size: contain\n    background-repeat: no-repeat\n    background-position: center\n    margin: auto\n    width: $METRONOME_WIDTH\n    height: $METRONOME_HEIGHT\n    position: relative\n\n.metronome>img\n  position: absolute\n  left: 50%\n  height: ($METRONOME_HEIGHT * 0.8373333)\n  width: ($METRONOME_WIDTH * 0.1688888)\n  transform-origin: 50% 100%\n  transform: translateX(-50%)\n\n\n@mixin keyframes-animation($name)\n  @-webkit-keyframes #{$name}\n    @content\n\n  @keyframes #{$name}\n    @content\n\n@mixin prefix-property($name, $value)\n  -webkit-#{$name}: $value\n          #{$name}: $value\n\n@include keyframes-animation(rotating)\n  0%\n    @include prefix-property(transform, translateX(-50%) rotate(-45deg))\n  25%\n    @include prefix-property(transform, translateX(-50%) rotate(0deg) linear)\n  50%\n    @include prefix-property(transform, translateX(-50%) rotate(45deg))\n  75%\n    @include prefix-property(transform, translateX(-50%) rotate(0deg) linear)\n  100%\n    @include prefix-property(transform, translateX(-50%) rotate(-45deg))\n\n/*.metronome.run>img\n  -webkit-animation: rotating 2s ease-in-out infinite*/\n\n.selectInstrument\n  display: block\n  font-size: 0.8em\n\n.list>span\n  padding: 0.25rem\n  margin: 0.5rem 0\n\n  &::before\n    content: \">  \"\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{ runningMetronome.getSoundName() }}    this.value       -->      {{this.instrument}}   '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MetronomeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MetronomeSoundComponent.html":{"url":"components/MetronomeSoundComponent.html","title":"component - MetronomeSoundComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MetronomeSoundComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/metronome-sound/metronome-sound.component.ts\n\n\n    \n        Description\n    \n    \n        This component is a button that allows to select the type of sound of the metronome,\n   which starts when its parent component's attribute binded to the isPlaying attribute\n   pass to true and stop when this attribute pass to false if the mode correspond to 0 : sound all along\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-metronome-sound\n            \n\n            \n                styleUrls\n                ./metronome-sound.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./metronome-sound.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                metronome\n                            \n                            \n                                mode\n                            \n                            \n                                sound\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                            \n                                    Async\n                                playMetronome\n                            \n                            \n                                stopMetronome\n                            \n                            \n                                toggleMode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isPlaying\n                            \n                            \n                                signature\n                            \n                            \n                                tempo\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isPlaying\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/metronome-sound/metronome-sound.component.ts:44\n                            \n                        \n                \n                    \n                        Whether or not the sound is playing. Used to know when to start the sound. Get from it's parent component and updated with the parent's binded attribute\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        signature\n                    \n                \n                \n                    \n                        Type :         Signature\n\n                    \n                \n                \n                    \n                        Default value : new Signature()\n                    \n                \n                        \n                            \n                                    Defined in src/app/metronome-sound/metronome-sound.component.ts:40\n                            \n                        \n                \n                    \n                        The signature used for the sound. Get from it's parent component and updated with the parent's binded attribute\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        tempo\n                    \n                \n                \n                    \n                        Type :         Tempo\n\n                    \n                \n                \n                    \n                        Default value : new Tempo()\n                    \n                \n                        \n                            \n                                    Defined in src/app/metronome-sound/metronome-sound.component.ts:36\n                            \n                        \n                \n                    \n                        The tempo used for the sound. Get from it's parent component and updated with the parent's binded attribute\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome-sound/metronome-sound.component.ts:69\n                \n            \n\n\n            \n                \n                    Called each time the parent's component update the Input attributes of the component.\nUpdate the metronome and start it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The changes get from the parent\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            playMetronome\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    playMetronome()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome-sound/metronome-sound.component.ts:96\n                \n            \n\n\n            \n                \n                    Play the metronome for an undetermined time, two measure or not at all according to the mode of the componenet\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise to await for\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stopMetronome\n                        \n                        \n                    \n                \n            \n            \n                \nstopMetronome()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome-sound/metronome-sound.component.ts:111\n                \n            \n\n\n            \n                \n                    Stop the metronome\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleMode\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleMode()\n                \n            \n\n\n            \n                \n                    Defined in src/app/metronome-sound/metronome-sound.component.ts:88\n                \n            \n\n\n            \n                \n                    Toggle the mode from 0 -> 1 -> 2 -> 0 ...\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            metronome\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Metronome\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome-sound/metronome-sound.component.ts:49\n                            \n                        \n\n                \n                    \n                        The metronome binded to the component\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome-sound/metronome-sound.component.ts:26\n                            \n                        \n\n                \n                    \n                        The sound mode of the component.\n0: sound all along\n1: sound on the two first empty  measures\n2: no sound\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Metronome.Sound\n\n                        \n                    \n                    \n                        \n                            Default value : Metronome.Sound.TOC\n                        \n                    \n                        \n                            \n                                    Defined in src/app/metronome-sound/metronome-sound.component.ts:31\n                            \n                        \n\n                \n                    \n                        The sound of the metronome. See the metronome's sound attribute for more\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, SimpleChanges, OnChanges, Input } from '@angular/core';\n\nimport { Tempo } from \"../classes/tempo\";\nimport { Signature } from \"../classes/signature\";\nimport { Metronome } from \"../classes/metronome\";\n\n/**\n * This component is a button that allows to select the type of sound of the metronome,\n *   which starts when its parent component's attribute binded to the isPlaying attribute\n *   pass to true and stop when this attribute pass to false if the mode correspond to 0 : sound all along\n */\n@Component({\n  selector: 'app-metronome-sound',\n  templateUrl: './metronome-sound.component.html',\n  styleUrls: ['./metronome-sound.component.sass']\n})\n\nexport class MetronomeSoundComponent implements OnInit, OnChanges {\n  /**\n   * The sound mode of the component.\n   *\n   * 0: sound all along\n   * 1: sound on the two first empty  measures\n   * 2: no sound\n   */\n  mode: number = 0;\n\n  /**\n   * The sound of the metronome. See the {@link Metronome#sound|metronome's sound attribute} for more\n   */\n  sound: Metronome.Sound = Metronome.Sound.TOC;\n\n  /**\n   * The tempo used for the sound. Get from it's parent component and updated with the parent's binded attribute\n   */\n  @Input(\"tempo\") tempo: Tempo = new Tempo();\n  /**\n   * The signature used for the sound. Get from it's parent component and updated with the parent's binded attribute\n   */\n  @Input(\"signature\") signature: Signature = new Signature();\n  /**\n   * Whether or not the sound is playing. Used to know when to start the sound. Get from it's parent component and updated with the parent's binded attribute\n   */\n  @Input(\"isPlaying\") isPlaying: boolean = false;\n\n  /**\n   * The metronome binded to the component\n   */\n  metronome: Metronome;\n\n  /**\n   * @ignore()\n   */\n  constructor() {\n    this.metronome = new Metronome(this.tempo.getBPM(), this.sound);\n  }\n  /**\n   * @ignore()\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * Called each time the parent's component update the {@link Input|Input} attributes of the component.\n   * Update the metronome and start it\n   *\n   * @param {SimpleChanges} changes The changes get from the parent\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    for(const propName in changes) {\n      if(changes.hasOwnProperty(propName)) {\n        if(propName === \"tempo\") {\n          this.metronome = new Metronome(this.tempo.getBPM(), this.sound);\n        } else if(propName === \"isPlaying\") {\n          if(changes[\"isPlaying\"].currentValue) {\n            this.playMetronome();\n          } else {\n            this.stopMetronome();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Toggle the {@link MetronomeSoundComponent#mode|mode} from 0 -> 1 -> 2 -> 0 ...\n   */\n  toggleMode(): void {\n    this.mode = (this.mode + 1) % 3;\n  }\n\n  /**\n   * Play the metronome for an undetermined time, two measure or not at all according to the {@link MetronomeSoundComponent#mode|mode} of the componenet\n   * @returns {Promise} A promise to await for\n   */\n  async playMetronome(): Promise {\n    if(this.mode == 0) {\n      this.metronome.start();\n    } else if(this.mode == 1) {\n        // The number of tick in two measures\n      let nbTick = (this.signature.getTop() * (this.tempo.getNoteNumber() / this.signature.getBottomNumber())) * 2;\n      await this.metronome.startFor(nbTick);\n      this.isPlaying = false;\n    }\n    return true;\n  }\n\n  /**\n   * Stop the metronome\n   */\n  stopMetronome(): void {\n    this.metronome.stop();\n  }\n\n}\n\n    \n\n    \n        \n  \n  \n  \n\n\n    \n\n    \n                \n                    ./metronome-sound.component.sass\n                \n                @use \"../styles/menu-parts\"\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MetronomeSoundComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Note.html":{"url":"classes/Note.html","title":"class - Note","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Note\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/note.ts\n        \n\n            \n                Description\n            \n            \n                This class is used to store notes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                duration\n                            \n                            \n                                    Private\n                                isBinary\n                            \n                            \n                                    Private\n                                timecode\n                            \n                            \n                                    Private\n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDuration\n                            \n                            \n                                getTimecode\n                            \n                            \n                                retrieveNoteType\n                            \n                            \n                                setDuration\n                            \n                            \n                                setTimecode\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            duration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note.ts:16\n                            \n                        \n\n                \n                    \n                        The duration of the note\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isBinary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note.ts:26\n                            \n                        \n\n                \n                    \n                        If the note is binary\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timecode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note.ts:11\n                            \n                        \n\n                \n                    \n                        The time in the track where the note starts\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BinaryNote | TernaryNote\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note.ts:21\n                            \n                        \n\n                \n                    \n                        The type of the note : binary or ternary\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDuration\n                        \n                        \n                    \n                \n            \n            \n                \ngetDuration()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note.ts:59\n                \n            \n\n\n            \n                \n                    Get the duration of this note\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTimecode\n                        \n                        \n                    \n                \n            \n            \n                \ngetTimecode()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note.ts:43\n                \n            \n\n\n            \n                \n                    Get the timecode of this note\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            retrieveNoteType\n                        \n                        \n                    \n                \n            \n            \n                \nretrieveNoteType()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note.ts:75\n                \n            \n\n\n            \n                \n                    Get the type of the note\n\n\n                    \n                    \n                    \n                        Returns :         BinaryNote | TernaryNote\n\n                    \n                    \n                        the type of the note\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDuration\n                        \n                        \n                    \n                \n            \n            \n                \nsetDuration(duration: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note.ts:67\n                \n            \n\n\n            \n                \n                    Set the duration of this note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTimecode\n                        \n                        \n                    \n                \n            \n            \n                \nsetTimecode(timecode: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note.ts:51\n                \n            \n\n\n            \n                \n                    Set the timecode of this note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    timecode\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note.ts:87\n                \n            \n\n\n            \n                \n                    Returns the note in string form\n\n\n                    \n                    \n                    \n                        Returns :         String\n\n                    \n                    \n                        A stringified version of this note\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BinaryNote } from \"../enums/binary-note\";\nimport { TernaryNote } from \"../enums/ternary-note\";\n\n/**\n * This class is used to store notes\n */\nexport class Note {\n  /**\n  * The time in the track where the note starts\n  */\n  private timecode: number;\n\n  /**\n  * The duration of the note\n  */\n  private duration: number;\n\n  /**\n  * The type of the note : binary or ternary\n  */\n  private type: BinaryNote | TernaryNote;\n\n  /**\n  * If the note is binary\n  */\n  private isBinary: boolean = true;\n\n  /**\n  * @ignore\n  */\n  constructor(timecode: number, duration: number) {\n    this.timecode = timecode;\n    this.duration = duration;\n\n    // TODO: FOLLOWING LINE TO REPLACE WITH POLYRYTHM LIBRAIRY INTEGRATION\n    this.type = this.retrieveNoteType()\n  }\n\n  /**\n  * Get the timecode of this note\n  * @returns {@link note#timecode}\n  */\n  getTimecode(): number {\n    return this.timecode;\n  }\n\n  /**\n  * Set the timecode of this note\n  * @param {number} {@link note#timecode}\n  */\n  setTimecode(timecode: number): void {\n    this.timecode = timecode;\n  }\n\n  /**\n  * Get the duration of this note\n  * @returns {@link note#duration}\n  */\n  getDuration(): number {\n    return this.duration;\n  }\n\n  /**\n  * Set the duration of this note\n  * @param {number} {@link note#duration}\n  */\n  setDuration(duration: number): void {\n    this.duration = duration;\n  }\n\n  /**\n  * Get the type of the note\n  * @returns {Binary|Ternary} the type of the note\n  */\n  retrieveNoteType(): BinaryNote | TernaryNote {\n    if(this.isBinary) {\n      return BinaryNote._4N;\n    } else {\n      return TernaryNote._4N;\n    }\n  }\n\n  /**\n  * Returns the note in string form\n  * @returns {String} A stringified version of this note\n  */\n  toString(): String {\n    return \"{\\\"timecode\\\":\"+this.timecode+\",\\\"duration\\\":\"+this.duration+\"}\";\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NoteComponent.html":{"url":"components/NoteComponent.html","title":"component - NoteComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NoteComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/note/note.component.ts\n\n\n    \n        Description\n    \n    \n        TODO\nThe notes to insert inside the MeasureComponent which is also to do\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-note\n            \n\n            \n                styleUrls\n                ./note.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./note.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                note\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        note\n                    \n                \n                \n                    \n                        Type :         Note\n\n                    \n                \n                \n                    \n                        Default value : new Note(0,0)\n                    \n                \n                        \n                            \n                                    Defined in src/app/note/note.component.ts:19\n                            \n                        \n                \n                    \n                        The note\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, OnInit, Input } from '@angular/core';\n\nimport { Note } from \"../classes/note\";\n\n/**\n * TODO\n * The notes to insert inside the MeasureComponent which is also to do\n */\n@Component({\n  selector: 'app-note',\n  templateUrl: './note.component.html',\n  styleUrls: ['./note.component.sass']\n})\nexport class NoteComponent implements OnInit {\n\n  /**\n  * The note\n  */\n  @Input() note: Note = new Note(0,0);\n  /**\n   * @ignore\n   */\n  constructor() { }\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n}\n\n    \n\n    \n        note works!\n\n    \n\n    \n                \n                    ./note.component.sass\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'note works!'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NoteComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoteRepresentation.html":{"url":"classes/NoteRepresentation.html","title":"class - NoteRepresentation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoteRepresentation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/note-representation.ts\n        \n\n            \n                Description\n            \n            \n                This class references the visual representation of any notes.\nUsed in the enums BinaryNote and TernaryNote.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addOn\n                            \n                            \n                                    Private\n                                imgsPaths\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addToImgsPaths\n                            \n                            \n                                    Private\n                                convertImgNameToPath\n                            \n                            \n                                getAddOnNumber\n                            \n                            \n                                getAddOnUseHook\n                            \n                            \n                                getImgPathAt\n                            \n                            \n                                getImgsPaths\n                            \n                            \n                                getImgsPathsLength\n                            \n                            \n                                removeFromImgsPaths\n                            \n                            \n                                removeFromImgsPathsAt\n                            \n                            \n                                setAddOn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(imgsNames: string[], addOn: AddOnJson | null)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/note-representation.ts:84\n                            \n                        \n\n                \n                    \n                            The constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        imgsNames\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The names of the images, in order, used to form the note without the extention.\n\n                                                        \n                                                \n                                                \n                                                        addOn\n                                                  \n                                                        \n                                                                        AddOnJson | null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Used to add a number on top of the note. If used, must possess the attributes {number} number and {boolean} useHook\n\n                                                        \n                                                \n                                        \n                                    \n                                    Example :\n                                        \n                                            let quarterNoteRep: NoteRepresentation = new NoteRepresentation([\"4N\"], null);\nlet quarterNoteTripletRep: NoteRepresentation = new NoteRepresentation([\"4N\"], {\"number\": 3, \"useHook\": true});\n\n                                        \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            addOn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AddOn | null\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note-representation.ts:84\n                            \n                        \n\n                \n                    \n                        AddOn\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            imgsPaths\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/note-representation.ts:80\n                            \n                        \n\n                \n                    \n                        The paths to the different parts of the note's Img, in order\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addToImgsPaths\n                        \n                        \n                    \n                \n            \n            \n                \naddToImgsPaths(imgName: string, index: number | null)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:144\n                \n            \n\n\n            \n                \n                    Add an image to the list of paths using its name\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    imgName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the image\n\n                                    \n                                \n                                \n                                    index\n                                    \n                                            number | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The place in the list where we insert\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            convertImgNameToPath\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convertImgNameToPath(imgName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:108\n                \n            \n\n\n            \n                \n                    Get the path of the image using its name\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    imgName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the image\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The path to the image\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAddOnNumber\n                        \n                        \n                    \n                \n            \n            \n                \ngetAddOnNumber()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:187\n                \n            \n\n\n            \n                \n                    Get the number of the addon linked to this representation\n\n\n                    \n                    \n                    \n                        Returns :     number | null\n\n                    \n                    \n                        The number of the addon\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAddOnUseHook\n                        \n                        \n                    \n                \n            \n            \n                \ngetAddOnUseHook()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:198\n                \n            \n\n\n            \n                \n                    Get if the addon linked to this representation needs to use a hook\n\n\n                    \n                    \n                    \n                        Returns :     boolean | null\n\n                    \n                    \n                        The value of the condition\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getImgPathAt\n                        \n                        \n                    \n                \n            \n            \n                \ngetImgPathAt(i: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:125\n                \n            \n\n\n            \n                \n                    Get the name of the image at a certain position in the list\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The number of the image in the list\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The name of the image\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getImgsPaths\n                        \n                        \n                    \n                \n            \n            \n                \ngetImgsPaths()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:116\n                \n            \n\n\n            \n                \n                    Get the paths to all the images\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        A list of all the paths\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getImgsPathsLength\n                        \n                        \n                    \n                \n            \n            \n                \ngetImgsPathsLength()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:135\n                \n            \n\n\n            \n                \n                    Get the number of different paths to images\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The number of paths\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeFromImgsPaths\n                        \n                        \n                    \n                \n            \n            \n                \nremoveFromImgsPaths(imgName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:156\n                \n            \n\n\n            \n                \n                    Remove an image from the list of paths using its name\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    imgName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the image\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeFromImgsPathsAt\n                        \n                        \n                    \n                \n            \n            \n                \nremoveFromImgsPathsAt(index: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:167\n                \n            \n\n\n            \n                \n                    Remove an image from the list of paths using its palce in the list\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The place of the image to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setAddOn\n                        \n                        \n                    \n                \n            \n            \n                \nsetAddOn(addOn: AddOnJson | null)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/note-representation.ts:175\n                \n            \n\n\n            \n                \n                    Set the addon linked to this representation\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    addOn\n                                    \n                                                AddOnJson | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { environment } from \"./../../environments/environment\";\n\nexport type AddOnJson = {number: number, useHook: boolean};\n\n\n/**\n * The add on on top of a note's representation\n */\nclass AddOn {\n  /**\n   * The number to write\n   */\n  private number: number;\n  /**\n   * Wether or not the number should be shown with an hook\n   */\n  private useHook: boolean;\n\n\n  /**\n   * The constructor\n   * @param {number} number @link AddOn#number\n   * @param {boolean} useHook @link AddOn#useHook\n   */\n  constructor(number: number, useHook: boolean) {\n    this.number = number;\n    this.useHook = useHook;\n  }\n\n  /**\n   * Get the number\n   * @return {@link AddOn#number}\n   */\n  getNumber(): number {\n    return this.number;\n  }\n\n  /**\n   * Set the number\n   * @param {number} {@link AddOn#number}\n   */\n  setNumber(number: number): void {\n    this.number = number;\n  }\n\n  /**\n   * Check if using hoot for this representaion is needed\n   * @return {boolean} {@link AddOn#useHook}\n   */\n  getUseHook(): boolean {\n    return this.useHook;\n  }\n  /**\n   * Set if using a hook for this represention is needed\n   * @param {boolean} {@link AddOn#useHook}\n   */\n  setUseHook(useHook: boolean): void {\n    this.useHook = useHook;\n  }\n}\n\n/**\n * This class references the visual representation of any notes.\n *\n * Used in the enums BinaryNote and TernaryNote.\n */\nexport class NoteRepresentation {\n  /**\n   * @ignore\n  */\n  private static dirPath: string = \"../\" + environment.pathsFromApp.rythmsImg;\n  /**\n   * @ignore\n  */\n  private static extension: string = \".svg\";\n\n  /**\n   * The paths to the different parts of the note's Img, in order\n   */\n  private imgsPaths: string[] = new Array();\n  /**\n   * {@link AddOn}\n   */\n  private addOn: AddOn | null = null;\n\n\n  /**\n   * The constructor\n   * @param {string[]} imgsNames The names of the images, in order, used to form the note without the extention.\n   * @param {AddOnJson|null} addOn Used to add a number on top of the note. If used, must possess the attributes {number} number and {boolean} useHook\n   *\n   * @example\n   * let quarterNoteRep: NoteRepresentation = new NoteRepresentation([\"4N\"], null);\n   * let quarterNoteTripletRep: NoteRepresentation = new NoteRepresentation([\"4N\"], {\"number\": 3, \"useHook\": true});\n   */\n  constructor(imgsNames: string[], addOn: AddOnJson | null = null) {\n    for(let i = 0 ; i = this.imgsPaths.length) {\n    //}\n    return this.imgsPaths[i];\n  }\n\n  /**\n  * Get the number of different paths to images\n  * @returns {number} The number of paths\n  */\n  getImgsPathsLength(): number {\n    return this.imgsPaths.length;\n  }\n\n  /**\n  * Add an image to the list of paths using its name\n  * @param {String} imgName The name of the image\n  * @param {number|null} index The place in the list where we insert\n  */\n  addToImgsPaths(imgName: string, index: number | null): void {\n    if(index == null || index == this.imgsPaths.length) {\n      this.imgsPaths.push(this.convertImgNameToPath(imgName));\n    } else {\n      this.imgsPaths.splice(index, 0, this.convertImgNameToPath(imgName));\n    }\n  }\n\n  /**\n  * Remove an image from the list of paths using its name\n  * @param {String} imgName The name of the image\n  */\n  removeFromImgsPaths(imgName: string): void {\n    let index:number = this.imgsPaths.indexOf(imgName);\n    if(index != -1) {\n      this.imgsPaths.splice(index, 1);\n    }\n  }\n\n  /**\n  * Remove an image from the list of paths using its palce in the list\n  * @param {number} index The place of the image to remove\n  */\n  removeFromImgsPathsAt(index: number): void {\n    this.imgsPaths.splice(index, 1);\n  }\n\n  /**\n  * Set the addon linked to this representation\n  * @param {AddOnJson|null} addon the addon to set\n  */\n  setAddOn(addOn: AddOnJson | null) {\n    if(addOn != null) {\n      this.addOn = new AddOn(addOn.number, addOn.useHook);\n    } else {\n      this.addOn = null;\n    }\n  }\n\n  /**\n  * Get the number of the addon linked to this representation\n  * @returns {number|null} The number of the addon\n  */\n  getAddOnNumber(): number | null {\n    if(this.addOn != null) {\n      return this.addOn.getNumber();\n    }\n    return null;\n  }\n\n  /**\n  * Get if the addon linked to this representation needs to use a hook\n  * @returns {boolean|null} The value of the condition\n  */\n  getAddOnUseHook(): boolean | null {\n    if(this.addOn != null) {\n      return this.addOn.getUseHook();\n    }\n    return null;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PlaybarComponent.html":{"url":"components/PlaybarComponent.html","title":"component - PlaybarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  PlaybarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/playbar/playbar.component.ts\n\n\n    \n        Description\n    \n    \n        TODO \nThe play bar with buttons such as play, pause, fastforward and backward\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-playbar\n            \n\n            \n                styleUrls\n                ./playbar.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./playbar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toggleIsPlaying\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isPlaying\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isPlaying\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/playbar/playbar.component.ts:23\n                            \n                        \n                \n                    \n                        If the track should be playing\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleIsPlaying\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleIsPlaying()\n                \n            \n\n\n            \n                \n                    Defined in src/app/playbar/playbar.component.ts:44\n                \n            \n\n\n            \n                \n                    Toggle if the tracks are playing or not PlaybarComponent\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, EventEmitter, Output, Input, OnChanges, SimpleChanges} from '@angular/core';\n\n\n/**\n * TODO \n * The play bar with buttons such as play, pause, fastforward and backward\n */\n@Component({\n  selector: 'app-playbar',\n  templateUrl: './playbar.component.html',\n  styleUrls: ['./playbar.component.sass']\n})\nexport class PlaybarComponent implements OnInit, OnChanges {\n\n  /**\n  * @ignore\n  */\n  @Output() private playTracks: EventEmitter = new EventEmitter();\n\n  /**\n  * If the track should be playing\n  */\n  @Input() isPlaying: boolean = false;\n\n  /**\n  * @ignore\n  */\n  ngOnChanges(changes: SimpleChanges){\n  }\n  /**\n   * @ignore\n   */\n  constructor() {\n  }\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n  * Toggle if the tracks are playing or not {@link PlaybarComponent#isPlaying}\n  */\n  toggleIsPlaying(): void {\n    this.isPlaying = !this.isPlaying;\n    this.playTracks.emit(this.isPlaying);\n  }\n}\n\n    \n\n    \n        \n\n\n\n\n    \n\n    \n                \n                    ./playbar.component.sass\n                \n                @use \"../styles/menu-parts\"\n\n:host\n  display: flex\n  justify-content: space-between\n\n  &>button:first-child\n    margin-right: 0.75rem\n  &>button:nth-child(2)\n    margin-right: 0.5rem\n\n  &>button:nth-child(1)>img\n    transform: rotateY(180deg)\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PlaybarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RhythmComponent.html":{"url":"components/RhythmComponent.html","title":"component - RhythmComponent","body":"\n                   \n\n\n\n\n\n  Components\n  RhythmComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/rhythm/rhythm.component.ts\n\n\n    \n        Description\n    \n    \n        The component that holds all the interface for the first tab\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-rhythm\n            \n\n            \n                styleUrls\n                ./rhythm.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./rhythm.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                endTapVar\n                            \n                            \n                                isPlayingTracks\n                            \n                            \n                                measureDuration\n                            \n                            \n                                nbOfSoloTracks\n                            \n                            \n                                recording\n                            \n                            \n                                selectedTrackId\n                            \n                            \n                                selectedTrackIndex\n                            \n                            \n                                signature\n                            \n                            \n                                startRecord\n                            \n                            \n                                startTapVar\n                            \n                            \n                                tempo\n                            \n                            \n                                tracks\n                            \n                            \n                                waitingRecord\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNote\n                            \n                            \n                                addTrack\n                            \n                            \n                                atMeasure\n                            \n                            \n                                endTap\n                            \n                            \n                                getTrackIndex\n                            \n                            \n                                setIsPlayingTracks\n                            \n                            \n                                setSelectedTrackId\n                            \n                            \n                                setSignature\n                            \n                            \n                                setTempo\n                            \n                            \n                                soloedTrack\n                            \n                            \n                                startTap\n                            \n                            \n                                    Async\n                                toggleRecording\n                            \n                            \n                                toString\n                            \n                            \n                                updateMeasureDuration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addNote\n                        \n                        \n                    \n                \n            \n            \n                \naddNote(evt: Event)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:138\n                \n            \n\n\n            \n                \n                    Add a note to the selected track \nTODO\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    evt\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addTrack\n                        \n                        \n                    \n                \n            \n            \n                \naddTrack(bool: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:101\n                \n            \n\n\n            \n                \n                    Add a new track to the list of tracks\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bool\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Should the track actually be added\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            atMeasure\n                        \n                        \n                    \n                \n            \n            \n                \natMeasure()\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:153\n                \n            \n\n\n            \n                \n                    Get the number of the measure that currently being recorded (based on the start of the recording)\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        the number of the measure\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            endTap\n                        \n                        \n                    \n                \n            \n            \n                \nendTap(evt: Event)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:177\n                \n            \n\n\n            \n                \n                    State that a TAP has ended\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    evt\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the TAP button is released\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTrackIndex\n                        \n                        \n                    \n                \n            \n            \n                \ngetTrackIndex(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:235\n                \n            \n\n\n            \n                \n                    Get the index of a track inside the componenet's tracks array attribute knowing it's id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the track to find in the compoenent's tracks array\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            let index: number = getTrackIndex(track.getId());\n                        \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The ondex of the track which id was given in parameter inside the component's tracks array attribute\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setIsPlayingTracks\n                        \n                        \n                    \n                \n            \n            \n                \nsetIsPlayingTracks(bool: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:275\n                \n            \n\n\n            \n                \n                    Set if the tracks are playing\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bool\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        if the tracks are palying or not\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSelectedTrackId\n                        \n                        \n                    \n                \n            \n            \n                \nsetSelectedTrackId(id: number | null)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:210\n                \n            \n\n\n            \n                \n                    Set the RhythmComponent\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            number | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the selected track (null if none)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSignature\n                        \n                        \n                    \n                \n            \n            \n                \nsetSignature(signature: Signature)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:201\n                \n            \n\n\n            \n                \n                    Set the RhythmComponent\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                                Signature\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The signature to set with\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTempo\n                        \n                        \n                    \n                \n            \n            \n                \nsetTempo(tempo: Tempo)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:191\n                \n            \n\n\n            \n                \n                    Set the RhythmComponent\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tempo\n                                    \n                                                Tempo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The tempo to set with\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            soloedTrack\n                        \n                        \n                    \n                \n            \n            \n                \nsoloedTrack(bool: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:249\n                \n            \n\n\n            \n                \n                    Function called every time a child componenet track's sound plan change to solo or from solo\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bool\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        true if a track have been soloed, false if it had been unsoloed\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startTap\n                        \n                        \n                    \n                \n            \n            \n                \nstartTap(evt: Event)\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:169\n                \n            \n\n\n            \n                \n                    State that a TAP has begun\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    evt\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the TAP button is held\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            toggleRecording\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toggleRecording()\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:111\n                \n            \n\n\n            \n                \n                    Toggle if the inputs are being recorded\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise to await for\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:284\n                \n            \n\n\n            \n                \n                    Return the current rhythm in string form \n(Should be the correct format for conversion)\n\n\n                    \n                    \n                    \n                        Returns :         String\n\n                    \n                    \n                        A stringified version of the rhythm\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateMeasureDuration\n                        \n                        \n                    \n                \n            \n            \n                \nupdateMeasureDuration()\n                \n            \n\n\n            \n                \n                    Defined in src/app/rhythm/rhythm.component.ts:145\n                \n            \n\n\n            \n                \n                    Update the duration of the measures based on the RythmComponent#signature and the RythmComponent#tempo\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endTapVar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Default value : new Date()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:73\n                            \n                        \n\n                \n                    \n                        The instant a TAP is released\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isPlayingTracks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:78\n                            \n                        \n\n                \n                    \n                        If the tracks are playing\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            measureDuration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:83\n                            \n                        \n\n                \n                    \n                        The duration of the measures (in seconds)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nbOfSoloTracks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:58\n                            \n                        \n\n                \n                    \n                        The number of tracks stated as solo\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recording\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:53\n                            \n                        \n\n                \n                    \n                        If we are recording the inputs\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedTrackId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:38\n                            \n                        \n\n                \n                    \n                        The id of the track that's being selected\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedTrackIndex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : -1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:43\n                            \n                        \n\n                \n                    \n                        The index of the selected track in the list of all the tracks\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            signature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Signature\n\n                        \n                    \n                    \n                        \n                            Default value : new Signature()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:28\n                            \n                        \n\n                \n                    \n                        The general signature, being used when a measure doesn't have its own\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startRecord\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Default value : new Date()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:63\n                            \n                        \n\n                \n                    \n                        The instant of the beginning of the recording\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startTapVar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Default value : new Date()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:68\n                            \n                        \n\n                \n                    \n                        The instant a TAP is held\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tempo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tempo\n\n                        \n                    \n                    \n                        \n                            Default value : new Tempo()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:33\n                            \n                        \n\n                \n                    \n                        The general tempo of the tracks\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tracks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Track[]\n\n                        \n                    \n                    \n                        \n                            Default value : new Array()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:23\n                            \n                        \n\n                \n                    \n                        A list of all the tracks\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            waitingRecord\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/rhythm/rhythm.component.ts:48\n                            \n                        \n\n                \n                    \n                        If we need to wait 2 measure before actually recording the inputs\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\nimport { Track } from \"../classes/track\";\nimport { Note } from \"../classes/note\";\nimport { Tempo } from \"../classes/tempo\";\nimport { Signature } from \"../classes/signature\";\nimport {EventEmitter, Output, Input} from '@angular/core';\n\n\n/**\n* The component that holds all the interface for the first tab\n*/\n@Component({\n  selector: 'app-rhythm',\n  templateUrl: './rhythm.component.html',\n  styleUrls: ['./rhythm.component.sass']\n})\nexport class RhythmComponent implements OnInit {\n\n  /**\n  * A list of all the tracks\n  */\n  tracks: Track[] = new Array();\n\n  /**\n  * The general signature, being used when a measure doesn't have its own\n  */\n  signature: Signature = new Signature();\n\n  /**\n  * The general tempo of the tracks\n  */\n  tempo: Tempo = new Tempo();\n\n  /**\n  * The id of the track that's being selected\n  */\n  selectedTrackId: number | null = null;\n\n  /**\n  * The index of the selected track in the list of all the tracks\n  */\n  selectedTrackIndex: number = -1;\n\n  /**\n  * If we need to wait 2 measure before actually recording the inputs\n  */\n  waitingRecord: boolean = false;\n\n  /**\n  * If we are recording the inputs\n  */\n  recording: boolean = false\n\n  /**\n  * The number of tracks stated as solo\n  */\n  nbOfSoloTracks: number = 0;\n\n  /**\n  * The instant of the beginning of the recording\n  */\n  startRecord: Date = new Date();\n\n  /**\n  * The instant a TAP is held\n  */\n  startTapVar: Date = new Date();\n\n  /**\n  * The instant a TAP is released\n  */\n  endTapVar: Date = new Date();\n\n  /**\n  * If the tracks are playing\n  */\n  isPlayingTracks: boolean = false;\n\n  /**\n   * The duration of the measures (in seconds)\n   */\n  measureDuration: number = 0;\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  /**\n  * @ignore\n  */\n  ngOnInit(): void {\n    this.updateMeasureDuration();\n  }\n\n  /**\n  * Add a new track to the list of tracks\n  * @param {boolean} bool Should the track actually be added\n  */\n  addTrack(bool: boolean): void {\n    if(bool) {\n      this.tracks.push(new Track());\n    }\n  }\n\n  /**\n  * Toggle if the inputs are being recorded\n  * @returns {Promise} A promise to await for\n  */\n  async toggleRecording(): Promise {\n    if(this.selectedTrackId) {\n      this.recording = !this.recording;\n      if(!this.recording) {\n        this.waitingRecord = false;\n      } else {\n        console.log(\"new\")\n        this.startRecord = new Date();\n        this.waitingRecord = true;\n        let time = this.measureDuration * 2 * 1000; // Two measures time in ms\n        await new Promise(function(resolve) {\n          setTimeout(function () {\n            resolve();\n          }, time);\n        });\n        this.waitingRecord = false;\n        this.startRecord = new Date();\n      }\n      //this.startRecord = new Date();\n\n    }\n  }\n\n  /**\n   * Add a note to the selected track \n   * TODO\n   */\n  addNote(evt: Event): void {\n\n  }\n\n  /**\n  * Update the duration of the measures based on the {@link RythmComponent#signature} and the {@link RythmComponent#tempo}\n  */\n  updateMeasureDuration(): void {\n    this.measureDuration = (((this.signature.getTop() * (this.tempo.getNoteNumber() / this.signature.getBottomNumber())) / this.tempo.getBPM()) * 60);\n  }\n\n  /**\n  * Get the number of the measure that currently being recorded (based on the start of the recording)\n  * @returns {number} the number of the measure\n  */\n  atMeasure(): number {\n    let result = Math.floor(( (Date.now() - this.startRecord.getTime()) / 1000) / this.measureDuration) + 1;\n    console.log(result);\n    if(this.waitingRecord) {\n      if(result == 1) {\n        return -2;\n      }\n      return -1;\n    }\n    return result;\n  }\n\n  /**\n  * State that a TAP has begun\n  * @param {Event} evt the TAP button is held\n  */\n  startTap(evt: Event): void {\n    this.startTapVar = new Date();\n  }\n\n  /**\n  * State that a TAP has ended\n  * @param {Event} evt the TAP button is released\n  */\n  endTap(evt: Event): void {\n    this.endTapVar = new Date();\n\n      // In seconds\n    let timecode: number = (this.startTapVar.getTime() - this.startRecord.getTime()) / 1000;\n    let duration: number = (this.endTapVar.getTime() - this.startTapVar.getTime()) / 1000;\n\n    this.tracks[this.selectedTrackIndex].addNote(new Note(timecode, duration));\n  }\n\n  /**\n  * Set the {@link RhythmComponent#tempo}\n  * @param {Tempo} tempo The tempo to set with\n  */\n  setTempo(tempo: Tempo):void {\n      // Must be set this way for being send to the child components after modification\n    this.tempo = new Tempo(tempo.getNote(), tempo.getBPM());\n    this.updateMeasureDuration();\n  }\n\n  /**\n  * Set the {@link RhythmComponent#signature}\n  * @param {Signature} signature The signature to set with\n  */\n  setSignature(signature: Signature): void {\n    this.signature = new Signature(signature.getTop(), signature.getBottom());\n    this.updateMeasureDuration();\n  }\n\n  /**\n  * Set the {@link RhythmComponent#selectedTrackId}\n  * @param {number|null} id The id of the selected track (null if none)\n  */\n  setSelectedTrackId(id: number | null): void {\n    if(!this.recording) {\n      // Put the last selected (this.selectedTrackId) track component's inside attribute isSelected as false\n      this.selectedTrackId = id;\n\n      if(id) {\n        this.selectedTrackIndex = this.getTrackIndex(id);\n      } else {\n        this.selectedTrackIndex = -1;\n      }\n    } else {\n      // Reput the (id) track component's inside attribute isSelected as false\n    }\n  }\n\n\n  /**\n   * Get the index of a track inside the componenet's tracks array attribute knowing it's id\n   *\n   * @example\n   * let index: number = getTrackIndex(track.getId());\n   *\n   * @param {number} id The id of the track to find in the compoenent's tracks array\n   * @returns {number} The ondex of the track which id was given in parameter inside the component's tracks array attribute\n   */\n  getTrackIndex(id: number): number {\n    for(let i = 0 ; i \n  * (Should be the correct format for conversion)\n  * @returns {String} A stringified version of the rhythm\n  */\n  toString(): String {\n    let rythmStr: String = \"\";\n    rythmStr += \"{\";\n    rythmStr += this.tempo.toString()+\",\";\n    //Anacrouse wuold go there\n    rythmStr += this.signature.toString()+\",\";\n    //Number of \"mesures\" would go there\n    //A json array of modiified \"mesures\" would go there\n    rythmStr += \"\\\"Tracks\\\":[\";\n    for(let aTrack of this.tracks) {\n      rythmStr += aTrack.toString() + \",\";\n    }\n    rythmStr = rythmStr.slice(0, -1);\n    rythmStr += \"]}\";\n\n    return rythmStr;\n  }\n\n}\n\n    \n\n    \n        Créer une polyrythmie\n\n\n  \n  \n\n\n\n  \n    \n      \n      \n    \n\n    \n      \n      \n        \n        \n      \n    \n\n    \n      \n      \n    \n  \n\n  START\n  WAIT\n  TAP\n\n  \n    \n      STOP\n      \n        Mesure : {{ atMeasure() }}\n      \n    \n    \n\n    \n    \n      \n      \n    \n\n  \n\n\n    \n\n    \n                \n                    ./rhythm.component.sass\n                \n                @use \"~sass/vars\"\n\n$TAP_BUTTON_SIZE: 8rem\n\n$CONTROLS_HEIGHT: 12rem\n\n$BUTTON_SIZE: 3rem\n\n:host\n  display: flex\n  flex-direction: column\n  width: 100%\n  max-width: 100%\n  flex-grow: 1\n  max-height: 100vh\n\n\nsection\n  width: 100%\n\n#tracks\n  padding: 0.5rem 0\n  overflow-y: auto\n  overflow-x: hidden\n  max-width: 100%\n  scroll-behavior: smooth\n  max-height: calc(100vh - $CONTROLS_HEIGHT)\n\n  &::-webkit-scrollbar\n    height: 0px\n    width: 0px\n    background: transparent\n\n#controls\n  margin-top: auto\n  margin-bottom: 2rem\n  padding-top: 0.5rem\n  display: flex\n  height: $CONTROLS_HEIGHT\n  align-items: center\n\n  &>div\n    flex-grow: 1\n\n  button\n    height: $BUTTON_SIZE\n    width: $BUTTON_SIZE\n\n    &>img\n      height: 100%\n      width: 100%\n\n  #generals, #measure-and-track\n    width: calc(100% - 3.5rem)\n    // = 100% - $TAP_BUTTON_SIZE / 2 - 0.5rem\n\n  #generals\n    display: flex\n    justify-content: space-evenly\n    margin-right: 0.5rem\n\n    &>div\n      flex-grow: 1\n      display: flex\n      flex-direction: column\n      justify-content: space-between\n      align-items: center\n    &>div:nth-child(1), &>div:nth-child(2)\n      margin: 2rem 0\n\n      .anacrouse\n        width: 6rem\n\n    app-signature\n      margin-bottom: 0.5rem\n\n  #start-button, #tap-button\n    height: $TAP_BUTTON_SIZE\n    width: $TAP_BUTTON_SIZE\n\n    border-width: 0.75rem\n    border-style: solid\n    border-radius: 50%\n    flex-shrink: 0\n\n  #start-button\n    font-size: 1.8em\n    border-color: vars.$ORANGE\n\n  #tap-button\n    font-size: 2.4em\n    border-color: vars.$RED\n\n  #wait\n    display: flex\n    justify-content: center\n    align-items: center\n    height: $TAP_BUTTON_SIZE\n    width: $TAP_BUTTON_SIZE\n    flex-shrink: 0\n    border-radius: 50%\n    background-image: linear-gradient(to top, vars.$RED 50%, vars.$ORANGE 50%)\n    background-size: 100% 200%\n    font-size: 1.8em\n    text-align: center\n    //backgrond-position: 50%\n\n    &>span\n      height: $TAP_BUTTON_SIZE - 1.5rem\n      width: $TAP_BUTTON_SIZE - 1.5rem\n      border-radius: 50%\n      background-color: vars.$GRAY\n      line-height: $TAP_BUTTON_SIZE - 1.5rem\n\n\n  #measure-and-track\n    margin-left: 0.5rem\n    display: flex\n    justify-content: flex-end\n\n    #record-menu\n      display: flex\n      justify-content: space-around\n      align-items: center\n      font-size: 1.2em\n      flex-grow: 1\n\n      &>button\n        height: $TAP_BUTTON_SIZE / 1.75\n        width: $TAP_BUTTON_SIZE / 1.75\n        border: 0.5rem solid vars.$RED\n        border-radius: 0.5rem\n        display: flex\n        justify-content: center\n        align-items: center\n\n      &>div\n        display: flex\n        flex-direction: column\n        align-items: center\n\n        span:first-child\n          margin-bottom: 0.75rem\n        span:last-child\n          font-size: 1.2em\n          font-weight: bold\n\n\n\n@mixin keyframes-animation($name)\n  @-webkit-keyframes #{$name}\n    @content\n\n  @keyframes #{$name}\n    @content\n\n@mixin prefix-property($name, $value1, $value2)\n  #{$name}: $value1 $value2\n          #{$name}: $value1 $value2\n\n@include keyframes-animation(record-timer)\n  0%\n    @include prefix-property(background-position, top, center)\n  /*25%\n    @include prefix-property(transform, translateX(-50%) rotate(0deg) linear)*/\n  /*50%\n    @include prefix-property(transform, translateX(-50%) rotate(45deg))*/\n  /*75%\n    @include prefix-property(transform, translateX(-50%) rotate(0deg) linear)*/\n  100%\n    @include prefix-property(background-position, bottom, center)\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Créer une polyrythmie                                                                                            START  WAIT  TAP            STOP              Mesure : {{ atMeasure() }}                                        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RhythmComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SaveMenuComponent.html":{"url":"components/SaveMenuComponent.html","title":"component - SaveMenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SaveMenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/save-menu/save-menu.component.ts\n\n\n    \n        Description\n    \n    \n        The save-menu component \nTODO\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-save-menu\n            \n\n            \n                styleUrls\n                ./save-menu.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./save-menu.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n/**\n* The save-menu component \n* TODO\n*/\n@Component({\n  selector: 'app-save-menu',\n  templateUrl: './save-menu.component.html',\n  styleUrls: ['./save-menu.component.sass']\n})\nexport class SaveMenuComponent implements OnInit {\n  /**\n   * @ignore\n   */\n  constructor() { }\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n}\n\n    \n\n    \n        \n  \n  \n    \n    \n  \n\n\n    \n\n    \n                \n                    ./save-menu.component.sass\n                \n                @use \"../styles/menu-parts\"\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '              '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SaveMenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Signature.html":{"url":"classes/Signature.html","title":"class - Signature","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Signature\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/signature.ts\n        \n\n            \n                Description\n            \n            \n                This class represents a signature\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bottom\n                            \n                            \n                                    Private\n                                top\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBottom\n                            \n                            \n                                getBottomImgPath\n                            \n                            \n                                getBottomName\n                            \n                            \n                                getBottomNumber\n                            \n                            \n                                getTop\n                            \n                            \n                                    Private\n                                isCompatible\n                            \n                            \n                                setBottom\n                            \n                            \n                                setTop\n                            \n                            \n                                setTopAndBottom\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(top: number, bottom: BasicNote)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/signature.ts:15\n                            \n                        \n\n                \n                    \n                            Create a signature object. If top and bottom are not compatible, both are set to default value.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        top\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                (optional) The top of the signature\n\n                                                        \n                                                \n                                                \n                                                        bottom\n                                                  \n                                                        \n                                                                        BasicNote\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            bottom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BasicNote\n\n                        \n                    \n                    \n                        \n                            Default value : BasicNote.QUARTER_NOTE\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/signature.ts:15\n                            \n                        \n\n                \n                    \n                        The note used as time base\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            top\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 4\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/signature.ts:10\n                            \n                        \n\n                \n                    \n                        The number of times of each measure\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBottom\n                        \n                        \n                    \n                \n            \n            \n                \ngetBottom()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:56\n                \n            \n\n\n            \n                \n                    Get the bottom's value\n\n\n                    \n                    \n                    \n                        Returns :         BasicNote\n\n                    \n                    \n                        The bottom of the signature\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBottomImgPath\n                        \n                        \n                    \n                \n            \n            \n                \ngetBottomImgPath()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:119\n                \n            \n\n\n            \n                \n                    Get the image path associated to the note of the bottom of the signature\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The image path of the signature's bottom\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBottomName\n                        \n                        \n                    \n                \n            \n            \n                \ngetBottomName()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:110\n                \n            \n\n\n            \n                \n                    Get the name associated to the note of the bottom of the signature\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The name of the signature's bottom\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBottomNumber\n                        \n                        \n                    \n                \n            \n            \n                \ngetBottomNumber()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:101\n                \n            \n\n\n            \n                \n                    Get the number associated to the note of the bottom of the signature\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The number of the signature's bottom\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTop\n                        \n                        \n                    \n                \n            \n            \n                \ngetTop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:37\n                \n            \n\n\n            \n                \n                    Get the top's value\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The top of the signature\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isCompatible\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isCompatible(top: number, bottom: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:88\n                \n            \n\n\n            \n                \n                    Check if the top and bottom\n   number of the signature are compatible\nNOT FINISHED\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    top\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bottom\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setBottom\n                        \n                        \n                    \n                \n            \n            \n                \nsetBottom(bottom: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:65\n                \n            \n\n\n            \n                \n                    Set the bottom's value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bottom\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new bottom of the signature\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTop\n                        \n                        \n                    \n                \n            \n            \n                \nsetTop(top: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:45\n                \n            \n\n\n            \n                \n                    Set the top's value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    top\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new top of the signature\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTopAndBottom\n                        \n                        \n                    \n                \n            \n            \n                \nsetTopAndBottom(top: number, bottom: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/signature.ts:76\n                \n            \n\n\n            \n                \n                    Set both top and\n   bottom values of the signature\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    top\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bottom\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BasicNote } from \"../enums/basic-note\";\n\n/**\n * This class represents a signature\n */\nexport class Signature {\n  /**\n   * The number of times of each measure\n   */\n  private top: number = 4;\n\n  /**\n   * The note used as time base\n   */\n  private bottom: BasicNote = BasicNote.QUARTER_NOTE;\n\n  /**\n   * Create a signature object. If {@link SignatureComponent#top|top} and {@link SignatureComponent#bottom|bottom} are not compatible, both are set to default value.\n   *\n   * @param {number} top (optional) The top of the signature\n   * @param {BasicNote} top (optional) The bottom of the signature\n   */\n  constructor(top: number = 4, bottom: BasicNote = BasicNote.QUARTER_NOTE) {\n    if(!this.isCompatible(top, bottom)) {\n      this.top = 4;\n      this.bottom = BasicNote.QUARTER_NOTE;\n    }\n    this.top = top;\n    this.bottom = bottom;\n  }\n\n  /**\n   * Get the {@link SignatureComponent#top|top}'s value\n   *\n   * @returns The top of the signature\n   */\n  getTop(): number {\n    return this.top;\n  }\n  /**\n   * Set the {@link SignatureComponent#top|top}'s value\n   *\n   * @param {number} top The new top of the signature\n   */\n  setTop(top: number): void {\n    if(this.isCompatible(top, this.bottom)) {\n      this.top = top;\n    }\n  }\n\n  /**\n   * Get the {@link SignatureComponent#bottom|bottom}'s value\n   *\n   * @returns The bottom of the signature\n   */\n  getBottom(): BasicNote {\n    return this.bottom;\n  }\n\n  /**\n   * Set the {@link SignatureComponent#bottom|bottom}'s value\n   *\n   * @param {BasicNote} bottom The new bottom of the signature\n   */\n  setBottom(bottom: BasicNote): void {\n    if(this.isCompatible(this.top, bottom)) {\n\n      this.bottom = bottom;\n    }\n  }\n\n  /**\n   * Set both {@link SignatureComponent#top|top} and\n   *   {@link SignatureComponent#bottom|bottom} values of the signature\n   */\n  setTopAndBottom(top: number, bottom: BasicNote) {\n    if(this.isCompatible(top, bottom)) {\n      this.top = top;\n      this.bottom = bottom;\n    }\n  }\n\n  /**\n   * Check if the {@link SignatureComponent#top|top} and {@link SignatureComponent#bottom|bottom}\n   *   number of the signature are compatible\n   * NOT FINISHED\n   */\n  private isCompatible(top: number, bottom: BasicNote): boolean {\n    if(top >= 1 && top % 1 == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Get the {@link BasicNote#getNumber|number} associated to the {@link BasicNote|note} of the {@link SignatureComponent#bottom|bottom} of the signature\n   *\n   * @returns The number of the signature's bottom\n   */\n  getBottomNumber(): number {\n    return BasicNote.getNumber(this.bottom);\n  }\n\n  /**\n   * Get the {@link BasicNote#name|name} associated to the {@link BasicNote|note} of the {@link SignatureComponent#bottom|bottom} of the signature\n   *\n   * @returns The name of the signature's bottom\n   */\n  getBottomName(): string {\n    return BasicNote.getName(this.bottom);\n  }\n\n  /**\n   * Get the {@link BasicNote#imgPath|image path} associated to the {@link BasicNote|note} of the {@link SignatureComponent#bottom|bottom} of the signature\n   *\n   * @returns The image path of the signature's bottom\n   */\n  getBottomImgPath(): string {\n    return BasicNote.getImgPath(this.bottom);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignatureComponent.html":{"url":"components/SignatureComponent.html","title":"component - SignatureComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SignatureComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/signature/signature.component.ts\n\n\n    \n        Description\n    \n    \n        TODO. Kind of similar to TempoComponent\nUsed to define the signature of a project or measure\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signature\n            \n\n            \n                styleUrls\n                ./signature.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./signature.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isModifyingBottomSignature\n                            \n                            \n                                isModifyingTopSignature\n                            \n                            \n                                modifiableBottom\n                            \n                            \n                                modifiableTop\n                            \n                            \n                                signature\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBasicNoteList\n                            \n                            \n                                getImgPath\n                            \n                            \n                                getName\n                            \n                            \n                                setNoteToBottom\n                            \n                            \n                                toggleModifyBottomSignature\n                            \n                            \n                                toggleModifyTopSignature\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBasicNoteList\n                        \n                        \n                    \n                \n            \n            \n                \ngetBasicNoteList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/signature/signature.component.ts:89\n                \n            \n\n\n            \n                \n                    Get all the notes that the user can chose as the tempo's note\n\n\n                    \n                    \n                    \n                        Returns :         BasicNote[]\n\n                    \n                    \n                        The notes that the user can chose\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getImgPath\n                        \n                        \n                    \n                \n            \n            \n                \ngetImgPath(note: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/signature/signature.component.ts:98\n                \n            \n\n\n            \n                \n                    Get the path to the image of a note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note we want the path to its image\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The path to the image of the note\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getName\n                        \n                        \n                    \n                \n            \n            \n                \ngetName(note: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/signature/signature.component.ts:106\n                \n            \n\n\n            \n                \n                    Get the name of a note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note we want the name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The name of the note\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setNoteToBottom\n                        \n                        \n                    \n                \n            \n            \n                \nsetNoteToBottom(note: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/signature/signature.component.ts:114\n                \n            \n\n\n            \n                \n                    Set the note for the bottom number of the SignatureComponent\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the note to use as base\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleModifyBottomSignature\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleModifyBottomSignature()\n                \n            \n\n\n            \n                \n                    Defined in src/app/signature/signature.component.ts:75\n                \n            \n\n\n            \n                \n                    Toggle if the SignatureComponent is being modified or not\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleModifyTopSignature\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleModifyTopSignature()\n                \n            \n\n\n            \n                \n                    Defined in src/app/signature/signature.component.ts:61\n                \n            \n\n\n            \n                \n                    Toggle if the SignatureComponent is being modified or not\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isModifyingBottomSignature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/signature/signature.component.ts:41\n                            \n                        \n\n                \n                    \n                        Is SignatureComponent being modified\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isModifyingTopSignature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/signature/signature.component.ts:36\n                            \n                        \n\n                \n                    \n                        Is SignatureComponent being modified\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modifiableBottom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BasicNote\n\n                        \n                    \n                    \n                        \n                            Default value : this.signature.getBottom()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/signature/signature.component.ts:31\n                            \n                        \n\n                \n                    \n                        The bottom note based number of the signature\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modifiableTop\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : this.signature.getTop()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/signature/signature.component.ts:26\n                            \n                        \n\n                \n                    \n                        The top number of the signature\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            signature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Signature\n\n                        \n                    \n                    \n                        \n                            Default value : new Signature(4, BasicNote.QUARTER_NOTE)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/signature/signature.component.ts:21\n                            \n                        \n\n                \n                    \n                        The  signature associated to the component\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit , Output, EventEmitter} from '@angular/core';\n\nimport { BasicNote } from \"../enums/basic-note\";\nimport { Signature } from \"../classes/signature\";\n\n\n/**\n * TODO. Kind of similar to {@link TempoComponent|TempoComponent}\n * Used to define the signature of a project or measure\n */\n@Component({\n  selector: 'app-signature',\n  templateUrl: './signature.component.html',\n  styleUrls: ['./signature.component.sass']\n})\nexport class SignatureComponent implements OnInit {\n\n  /**\n   * The  {@link Signature|signature} associated to the component\n   */\n  signature: Signature = new Signature(4, BasicNote.QUARTER_NOTE);\n\n  /**\n  * The top number of the signature\n  */\n  modifiableTop: number = this.signature.getTop();\n\n  /**\n  * The bottom note based number of the signature\n  */\n  modifiableBottom: BasicNote = this.signature.getBottom();\n\n  /**\n  * Is {@link SignatureComponent#modifiableTop} being modified\n  */\n  isModifyingTopSignature: boolean = false;\n\n  /**\n  * Is {@link SignatureComponent#modifiableBottom} being modified\n  */\n  isModifyingBottomSignature: boolean = false;\n\n  /**\n  * @ignore\n  */\n  @Output() signatureOut: EventEmitter = new EventEmitter();\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n  * Toggle if the {@link SignatureComponent#modifiableTop} is being modified or not\n  */\n  toggleModifyTopSignature(): void {\n    if(!this.isModifyingBottomSignature){\n      this.isModifyingTopSignature = !this.isModifyingTopSignature;\n      if(!this.isModifyingTopSignature) {\n        this.signature.setTop(this.modifiableTop);\n      }\n      this.signatureOut.emit(this.signature);\n    }\n  }\n\n\n  /**\n  * Toggle if the {@link SignatureComponent#modifiableBottom} is being modified or not\n  */\n  toggleModifyBottomSignature(): void {\n    if(!this.isModifyingTopSignature){\n      this.isModifyingBottomSignature = !this.isModifyingBottomSignature;\n      if(!this.isModifyingBottomSignature) {\n        this.signature.setBottom(this.modifiableBottom);\n      }\n      this.signatureOut.emit(this.signature);\n    }\n  }\n\n  /**\n   * Get all the notes that the user can chose as the {@link Tempo|tempo}'s {@link Tempo#note|note}\n   * @returns The notes that the user can chose\n   */\n  getBasicNoteList(): BasicNote[] {\n    return BasicNote.values();\n  }\n\n  /**\n   * Get the path to the image of a {@link BasicNote|note}\n   * @param {BasicNote} note The note we want the path to its image\n   * @returns The path to the image of the note\n   */\n  getImgPath(note: BasicNote): string {\n    return BasicNote.getImgPath(note);\n  }\n  /**\n   * Get the name of a {@link BasicNote|note}\n   * @param {BasicNote} note The note we want the name\n   * @returns The name of the note\n   */\n  getName(note: BasicNote): string {\n    return BasicNote.getName(note);\n  }\n\n  /**\n  * Set the note for the bottom number of the {@link SignatureComponent#signature}\n  * @param {BasicNote} note the note to use as base\n  */\n  setNoteToBottom(note: BasicNote){\n    this.toggleModifyBottomSignature();\n    this.signature.setBottom(note);\n  }\n}\n\n    \n\n    \n        \n  Signature\n  \n    {{ signature.getTop() }}\n    {{ signature.getBottomNumber() }}\n\n    \n      \n      ➤\n    \n\n    \n      \n    \n\n  \n\n\n    \n\n    \n                \n                    ./signature.component.sass\n                \n                @use \"~sass/vars\"\n\n.sig-root\n  background-color: vars.$LIGHT_GRAY\n  border-radius: 1.5rem\n  padding: 0.75rem 1rem\n\n  p\n   margin: 0 0 0.75rem 0\n   text-align: center\n\n  div\n    display: flex\n    flex-direction: column\n    justify-content: center\n    align-items: center\n\n    span\n      font-size: 1.3em\n      padding: 0.25rem\n      cursor: pointer\n\n    span:first-child\n      margin-bottom: 0.25rem\n.selectNote\n  img\n    height: 1.5em\n    padding: 0.25rem\n    cursor: pointer\n  img:hover\n    -webkit-filter: drop-shadow(0 0 0.05rem rgba(255, 255, 255, .7))\n    filter: drop-shadow(0 0 0.1rem rgba(255, 255, 255, .7))\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Signature      {{ signature.getTop() }}    {{ signature.getBottomNumber() }}                ➤                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignatureComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SoundPlayerComponent.html":{"url":"components/SoundPlayerComponent.html","title":"component - SoundPlayerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SoundPlayerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/sound-player/sound-player.component.ts\n\n\n    \n        Description\n    \n    \n        This component represent a sound-player, never to be displayed to plays sound\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-sound-player\n            \n\n            \n                styleUrls\n                ./sound-player.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./sound-player.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                sound\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                pause\n                            \n                            \n                                playFromTime\n                            \n                            \n                                playSound\n                            \n                            \n                                setVolume\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isPlaying\n                            \n                            \n                                soundName\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isPlaying\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/sound-player/sound-player.component.ts:33\n                            \n                        \n                \n                    \n                        Is the player playing sound\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        soundName\n                    \n                \n                \n                    \n                        Type :         String\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/sound-player/sound-player.component.ts:28\n                            \n                        \n                \n                    \n                        The name of the sound file played\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            pause\n                        \n                        \n                    \n                \n            \n            \n                \npause()\n                \n            \n\n\n            \n                \n                    Defined in src/app/sound-player/sound-player.component.ts:97\n                \n            \n\n\n            \n                \n                    Pause the audio if playing\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            playFromTime\n                        \n                        \n                    \n                \n            \n            \n                \nplayFromTime(startTime: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/sound-player/sound-player.component.ts:87\n                \n            \n\n\n            \n                \n                    Play the sound from a certain point in time\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    startTime\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                    \n                                        The time in seconds from which the sound starts playing. If unspecified, the sound starts from the beginning (StartTime = 0s)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            playSound\n                        \n                        \n                    \n                \n            \n            \n                \nplaySound()\n                \n            \n\n\n            \n                \n                    Defined in src/app/sound-player/sound-player.component.ts:77\n                \n            \n\n\n            \n                \n                    Play the audio\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setVolume\n                        \n                        \n                    \n                \n            \n            \n                \nsetVolume(volume: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/sound-player/sound-player.component.ts:108\n                \n            \n\n\n            \n                \n                    Set the volume of the sound\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    volume\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value of the volume that will be set. Should be included between [0;1]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sound\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/sound-player/sound-player.component.ts:18\n                            \n                        \n\n                \n                    \n                        The sound played by the player\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, SimpleChanges, OnChanges, EventEmitter, Output, Input } from '@angular/core';\n\nimport { environment } from \"./../../environments/environment\";\n\n/**\n* This component represent a sound-player, never to be displayed to plays sound\n*/\n@Component({\n  selector: 'app-sound-player',\n  templateUrl: './sound-player.component.html',\n  styleUrls: ['./sound-player.component.sass']\n})\nexport class SoundPlayerComponent implements OnInit, OnChanges {\n\n  /**\n  * The sound played by the player\n  */\n  private sound: any;\n\n  /**\n  * @ignore\n  */\n  @Output() finishedPlayingTrack: EventEmitter = new EventEmitter();\n\n  /**\n  * The name of the sound file played\n  */\n  @Input() soundName: String = \"\";\n\n  /**\n  * Is the player playing sound\n  */\n  @Input() isPlaying: boolean = false;\n\n  /**\n  * @ignore\n  */\n  constructor() {\n    this.sound = new Audio();\n  }\n\n  /**\n  * @ignore\n  */\n  ngOnInit(): void {\n\n      this.sound = new Audio(\"../\"+environment.pathsFromApp.sounds+this.soundName);\n      this.sound.onended = (err:any) => {\n        this.finishedPlayingTrack.emit(false);\n        //this.isPlaying = false;\n      }\n      //this.sound.play();\n  }\n\n  /**\n  * @ignore\n  */\n  ngOnChanges(changes: SimpleChanges){\n     for(const propName in changes) {\n       if(changes.hasOwnProperty(propName)) {\n         if(propName === \"isPlaying\") {\n           if(changes[\"isPlaying\"].currentValue) {\n             this.playSound();\n           } else {\n             if(changes[\"isPlaying\"].previousValue) {\n               this.pause();\n             }\n           }\n         }\n       }\n     }\n  }\n\n  /**\n  * Play the audio\n  */\n  playSound() {\n    if(this.sound){\n      this.sound.play();\n    }\n  }\n\n  /**\n  * Play the sound from a certain point in time\n  * @param {number} startTime The time in seconds from which the sound starts playing. If unspecified, the sound starts from the beginning (StartTime = 0s)\n  */\n  playFromTime(startTime: number = 0) {\n    this.sound.currentTime = startTime;\n  //  this.isPlaying = true;\n    this.sound.play();\n  }\n\n\n  /**\n  * Pause the audio if playing\n  */\n  pause() {\n    if(!this.sound.paused){\n  //      this.isPlaying = false;\n      this.sound.pause();\n    }\n  }\n\n  /**\n  *  Set the volume of the sound\n  * @param {float} volume The value of the volume that will be set. Should be included between [0;1]\n  */\n  setVolume(volume: number) {\n    if(volume 1){\n        console.log(\"Tried to set the volume to an amount that exceeds 1. Volume should be included between [0;1]\");\n      }else{\n        this.sound.volume = volume;\n        this.sound.load();\n      }\n    }\n  }\n\n\n}\n\n    \n\n    \n        \n    \n\n    \n                \n                    ./sound-player.component.sass\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SoundPlayerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tempo.html":{"url":"classes/Tempo.html","title":"class - Tempo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tempo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/tempo.ts\n        \n\n            \n                Description\n            \n            \n                This class represent a tempo\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bpm\n                            \n                            \n                                    Private\n                                note\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBPM\n                            \n                            \n                                getNote\n                            \n                            \n                                getNoteImgPath\n                            \n                            \n                                getNoteName\n                            \n                            \n                                getNoteNumber\n                            \n                            \n                                setBPM\n                            \n                            \n                                setNote\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(note: BasicNote, bpm: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/tempo.ts:14\n                            \n                        \n\n                \n                    \n                            Create a tempo object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        note\n                                                  \n                                                        \n                                                                        BasicNote\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The {\n\n                                                        \n                                                \n                                                \n                                                        bpm\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The {\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            bpm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/tempo.ts:14\n                            \n                        \n\n                \n                    \n                        The BPM or Beat Per Minute\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            note\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BasicNote\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/tempo.ts:10\n                            \n                        \n\n                \n                    \n                        The note that is beat. See BasicNote for more details\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBPM\n                        \n                        \n                    \n                \n            \n            \n                \ngetBPM()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/tempo.ts:49\n                \n            \n\n\n            \n                \n                    Get the BPM of the tempo\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNote\n                        \n                        \n                    \n                \n            \n            \n                \ngetNote()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/tempo.ts:32\n                \n            \n\n\n            \n                \n                    Get the note of the tempo\n\n\n                    \n                    \n                    \n                        Returns :         BasicNote\n\n                    \n                    \n                        The {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNoteImgPath\n                        \n                        \n                    \n                \n            \n            \n                \ngetNoteImgPath()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/tempo.ts:78\n                \n            \n\n\n            \n                \n                    Get the image path of the note associated to the tempo\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNoteName\n                        \n                        \n                    \n                \n            \n            \n                \ngetNoteName()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/tempo.ts:86\n                \n            \n\n\n            \n                \n                    Get the name of the note associated to the tempo\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNoteNumber\n                        \n                        \n                    \n                \n            \n            \n                \ngetNoteNumber()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/tempo.ts:70\n                \n            \n\n\n            \n                \n                    Get the number of the note associated to the tempo\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setBPM\n                        \n                        \n                    \n                \n            \n            \n                \nsetBPM(bpm: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/tempo.ts:57\n                \n            \n\n\n            \n                \n                    Set the BPM of the tempo\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bpm\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new tempo's {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setNote\n                        \n                        \n                    \n                \n            \n            \n                \nsetNote(note: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/tempo.ts:40\n                \n            \n\n\n            \n                \n                    Set the note of the tempo\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new tempo's {\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BasicNote } from \"../enums/basic-note\";\n\n/**\n * This class represent a tempo\n */\nexport class Tempo {\n  /**\n   * The note that is beat. See {@link BasicNote|BasicNote} for more details\n   */\n  private note: BasicNote;\n  /**\n   * The BPM or Beat Per Minute\n   */\n  private bpm: number;\n\n  /**\n   * Create a tempo object\n   *\n   * @param {BasicNote|null} note The {@link Tempo#note|note} of the new tempo\n   * @param {number|null} bpm The {@link Tempo#bpm|BPM} of the new tempo\n   */\n  constructor(note: BasicNote = BasicNote.QUARTER_NOTE, bpm: number = 60) {\n    this.note = note;\n    this.bpm = bpm;\n  }\n\n  /**\n   * Get the {@link Tempo#note|note} of the tempo\n   *\n   * @returns The {@link Tempo#note|note} of the tempo\n   */\n  getNote(): BasicNote {\n    return this.note;\n  }\n  /**\n   * Set the {@link Tempo#note|note} of the tempo\n   *\n   * @param {BasicNote} note The new tempo's {@link Tempo#note|note}\n   */\n  setNote(note: BasicNote): void {\n    this.note = note;\n  }\n\n  /**\n   * Get the {@link Tempo#bpm|BPM} of the tempo\n   *\n   * @returns The {@link Tempo#bpm|BPM} of the tempo\n   */\n  getBPM(): number {\n    return this.bpm;\n  }\n  /**\n   * Set the {@link Tempo#bpm|BPM} of the tempo\n   *\n   * @param {number} bpm The new tempo's {@link Tempo#bpm|BPM}\n   */\n  setBPM(bpm: number): boolean {\n    if(bpm >= 1 && bpm % 1 == 0) {\n      this.bpm = bpm;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get the {@link BasicNote#number|number} of the {@link Tempo#note|note} associated to the tempo\n   *\n   * @returns The {@link BasicNote#number|number} associated to the tempo's {@link Tempo#note|note}\n   */\n  getNoteNumber(): number {\n    return BasicNote.getNumber(this.note);\n  }\n  /**\n   * Get the {@link BasicNote#imgPath|image path} of the {@link Tempo#note|note} associated to the tempo\n   *\n   * @returns The {@link BasicNote#imgPath|image path} associated to the tempo's {@link Tempo#note|note}\n   */\n  getNoteImgPath(): string {\n    return BasicNote.getImgPath(this.note);\n  }\n  /**\n   * Get the {@link BasicNote#name|name} of the {@link Tempo#note|note} associated to the tempo\n   *\n   * @returns The {@link BasicNote#name|name} associated to the tempo's {@link Tempo#note|note}\n   */\n  getNoteName(): string {\n    return BasicNote.getName(this.note);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TempoComponent.html":{"url":"components/TempoComponent.html","title":"component - TempoComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TempoComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tempo/tempo.component.ts\n\n\n    \n        Description\n    \n    \n        This component allow the user to modify the tempo\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-tempo\n            \n\n            \n                styleUrls\n                ./tempo.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./tempo.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isModifyingBPM\n                            \n                            \n                                isModifyingNote\n                            \n                            \n                                modifiableBPM\n                            \n                            \n                                tempo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBasicNoteList\n                            \n                            \n                                getImgPath\n                            \n                            \n                                getName\n                            \n                            \n                                setBPM\n                            \n                            \n                                setNote\n                            \n                            \n                                toggleModifyBPM\n                            \n                            \n                                toggleModifyNote\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                tempoOutput\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        tempoOutput\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/tempo/tempo.component.ts:38\n                            \n                        \n                \n                    \n                        The attribute that notify the parent component of the new tempo when it is changed\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBasicNoteList\n                        \n                        \n                    \n                \n            \n            \n                \ngetBasicNoteList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/tempo/tempo.component.ts:102\n                \n            \n\n\n            \n                \n                    Get all the notes that the user can chose as the tempo's note\n\n\n                    \n                    \n                    \n                        Returns :         BasicNote[]\n\n                    \n                    \n                        The notes that the user can chose\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getImgPath\n                        \n                        \n                    \n                \n            \n            \n                \ngetImgPath(note: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/tempo/tempo.component.ts:112\n                \n            \n\n\n            \n                \n                    Get the path to the image of a note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note we want the path to its image\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The path to the image of the note\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getName\n                        \n                        \n                    \n                \n            \n            \n                \ngetName(note: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/tempo/tempo.component.ts:121\n                \n            \n\n\n            \n                \n                    Get the name of a note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note we want the name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The name of the note\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setBPM\n                        \n                        \n                    \n                \n            \n            \n                \nsetBPM(bpm: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/tempo/tempo.component.ts:71\n                \n            \n\n\n            \n                \n                    Set the BPM of the tempo\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bpm\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new tempo's BPM\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setNote\n                        \n                        \n                    \n                \n            \n            \n                \nsetNote(note: BasicNote)\n                \n            \n\n\n            \n                \n                    Defined in src/app/tempo/tempo.component.ts:58\n                \n            \n\n\n            \n                \n                    Set the note of the tempo\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                BasicNote\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new tempo's note\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleModifyBPM\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleModifyBPM()\n                \n            \n\n\n            \n                \n                    Defined in src/app/tempo/tempo.component.ts:87\n                \n            \n\n\n            \n                \n                    Toggle if the tempo's BPM is being modified, and modify it if it's the end of the modification\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleModifyNote\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleModifyNote()\n                \n            \n\n\n            \n                \n                    Defined in src/app/tempo/tempo.component.ts:79\n                \n            \n\n\n            \n                \n                    Toggle if the tempo's note is being modified\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isModifyingBPM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tempo/tempo.component.ts:33\n                            \n                        \n\n                \n                    \n                        Whether or note the user is modigying the BPM of the tempo\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isModifyingNote\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tempo/tempo.component.ts:29\n                            \n                        \n\n                \n                    \n                        Whether or note the user is modigying the note of the tempo\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modifiableBPM\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"0\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tempo/tempo.component.ts:24\n                            \n                        \n\n                \n                    \n                        The BPM that can be directly modified by the user\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tempo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Tempo\n\n                        \n                    \n                    \n                        \n                            Default value : new Tempo()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tempo/tempo.component.ts:19\n                            \n                        \n\n                \n                    \n                        The current tempo\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, EventEmitter, Output } from '@angular/core';\n\nimport { Tempo } from \"../classes/tempo\";\nimport { BasicNote } from \"../enums/basic-note\";\n\n\n/**\n * This component allow the user to modify the tempo\n */\n@Component({\n  selector: 'app-tempo',\n  templateUrl: './tempo.component.html',\n  styleUrls: ['./tempo.component.sass']\n})\nexport class TempoComponent implements OnInit {\n  /**\n   * The current tempo\n   */\n  tempo: Tempo = new Tempo();\n\n  /**\n   * The BPM that can be directly modified by the user\n   */\n  modifiableBPM: string = \"0\";\n\n  /**\n   * Whether or note the user is modigying the {@link Tempo#note|note} of the {@link Tempo|tempo}\n   */\n  isModifyingNote: boolean = false;\n  /**\n   * Whether or note the user is modigying the {@link Tempo#bpm|BPM} of the {@link Tempo|tempo}\n   */\n  isModifyingBPM: boolean = false;\n\n  /**\n   * The attribute that notify the parent component of the new tempo when it is changed\n   */\n  @Output() tempoOutput: EventEmitter = new EventEmitter();\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n    this.modifiableBPM = this.tempo.getBPM().toString();\n    this.tempoOutput.emit(this.tempo);\n  }\n\n  /**\n   * Set the {@link Tempo#note|note} of the {@link Tempo|tempo}\n   *\n   * @param {BasicNote} note The new tempo's note\n   */\n  setNote(note: BasicNote): void {\n    this.tempo.setNote(note);\n    if(this.isModifyingNote) {\n      this.isModifyingNote = false;\n    }\n    this.tempoOutput.emit(this.tempo);\n  }\n\n  /**\n   * Set the {@link Tempo#bpm|BPM} of the {@link Tempo|tempo}\n   *\n   * @param {number} bpm The new tempo's BPM\n   */\n  setBPM(bpm: number): void {\n    this.tempo.setBPM(bpm);\n    this.tempoOutput.emit(this.tempo);\n  }\n\n  /**\n   * Toggle if the tempo's note is being modified\n   */\n  toggleModifyNote(): void {\n    if(!this.isModifyingBPM) {\n      this.isModifyingNote = !this.isModifyingNote;\n    }\n  }\n  /**\n   * Toggle if the tempo's BPM is being modified, and modify it if it's the end of the modification\n   */\n  toggleModifyBPM(): void {\n    if(!this.isModifyingNote) {\n      this.isModifyingBPM = !this.isModifyingBPM;\n      //if(!this.isModifyingBPM) {\n        this.tempo.setBPM(parseInt(this.modifiableBPM, 10));\n      //}\n      this.tempoOutput.emit(this.tempo);\n    }\n  }\n\n  /**\n   * Get all the notes that the user can chose as the {@link Tempo|tempo}'s {@link Tempo#note|note}\n   *\n   * @returns The notes that the user can chose\n   */\n  getBasicNoteList(): BasicNote[] {\n    return BasicNote.values();\n  }\n\n  /**\n   * Get the path to the image of a {@link BasicNote|note}\n   *\n   * @param {BasicNote} note The note we want the path to its image\n   * @returns The path to the image of the note\n   */\n  getImgPath(note: BasicNote): string {\n    return BasicNote.getImgPath(note);\n  }\n  /**\n   * Get the name of a {@link BasicNote|note}\n   *\n   * @param {BasicNote} note The note we want the name\n   * @returns The name of the note\n   */\n  getName(note: BasicNote): string {\n    return BasicNote.getName(note);\n  }\n}\n\n    \n\n    \n        \n  Tempo\n  \n    \n    = {{ tempo.getBPM() }}\n\n    \n      \n      ➤\n    \n  \n  \n    \n  \n\n\n    \n\n    \n                \n                    ./tempo.component.sass\n                \n                @use \"~sass/vars\"\n\n.tempo-root\n  background-color: vars.$LIGHT_GRAY\n  border-radius: 1.5rem\n  padding: 0.75rem 1.5rem\n\n  p\n   margin: 0 0 0.75rem 0\n   text-align: center\n\n  div\n    display: flex\n    justify-content: center\n    align-items: center\n\n    img, img+span\n      padding: 0.25rem\n    img, span>span\n      cursor: pointer\n\n    img\n      height: 1.5em\n\n    img+span\n      font-size: 1.3em\n\n    input\n      max-width: 5rem\n\n.selectNote\n  img\n    height: 1.5em\n    padding: 0.25rem\n    cursor: pointer\n  img:hover\n    -webkit-filter: drop-shadow(0 0 0.05rem rgba(255, 255, 255, .7))\n    filter: drop-shadow(0 0 0.1rem rgba(255, 255, 255, .7))\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Tempo          = {{ tempo.getBPM() }}                ➤              '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TempoComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Track.html":{"url":"classes/Track.html","title":"class - Track","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Track\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/track.ts\n        \n\n            \n                Description\n            \n            \n                A class that represents a Track\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                id\n                            \n                            \n                                    Private\n                                instrument\n                            \n                            \n                                    Private\n                                measures\n                            \n                            \n                                    Private\n                                    Static\n                                nextId\n                            \n                            \n                                    Private\n                                notes\n                            \n                            \n                                    Private\n                                plan\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNote\n                            \n                            \n                                clearNotes\n                            \n                            \n                                deleteNotesBetweenTimecodes\n                            \n                            \n                                getId\n                            \n                            \n                                getInstrument\n                            \n                            \n                                getMeasures\n                            \n                            \n                                getNoteAtIndex\n                            \n                            \n                                getNoteAtTimecode\n                            \n                            \n                                getNotes\n                            \n                            \n                                getPlan\n                            \n                            \n                                planToString\n                            \n                            \n                                setInstrument\n                            \n                            \n                                setNotes\n                            \n                            \n                                setPlan\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(instrument: string, plan: number, measures: Measure[], notes: Note[])\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/track.ts:37\n                            \n                        \n\n                \n                    \n                            The constructor : Create a new track whose attributes corresponds to the parameters. Its id is auto-incremented\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        instrument\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                (optional) The {\n\n                                                        \n                                                \n                                                \n                                                        plan\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                (optional) The {\n\n                                                        \n                                                \n                                                \n                                                        measures\n                                                  \n                                                        \n                                                                        Measure[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        notes\n                                                  \n                                                        \n                                                                        Note[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                (optional) The {\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/track.ts:16\n                            \n                        \n\n                \n                    \n                        The id of the track\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            instrument\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/track.ts:20\n                            \n                        \n\n                \n                    \n                        The instrument used for the sound of the track\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            measures\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Measure[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/track.ts:32\n                            \n                        \n\n                \n                    \n                        A list of the measures in this track\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            nextId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/track.ts:11\n                            \n                        \n\n                \n                    \n                        The auto-increment value for the tracks' ids\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            notes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Note[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/track.ts:37\n                            \n                        \n\n                \n                    \n                        The notes inside the track\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            plan\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/classes/track.ts:27\n                            \n                        \n\n                \n                    \n                        The sound plan of the track\n0 -> \"Normal\" (not solo nor mute)\n1 -> Solo\n2 -> Mute\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addNote\n                        \n                        \n                    \n                \n            \n            \n                \naddNote(note: Note)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:167\n                \n            \n\n\n            \n                \n                    Add a note on the track\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                Note\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the note to add\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearNotes\n                        \n                        \n                    \n                \n            \n            \n                \nclearNotes()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:174\n                \n            \n\n\n            \n                \n                    Clear the list of notes of the track\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteNotesBetweenTimecodes\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteNotesBetweenTimecodes(from: number, to: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:183\n                \n            \n\n\n            \n                \n                    Delete all notes that begins in an interval of timecodes\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    from\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the start of the interval\n\n                                    \n                                \n                                \n                                    to\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the end of the interval\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getId\n                        \n                        \n                    \n                \n            \n            \n                \ngetId()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:64\n                \n            \n\n\n            \n                \n                    Get the id of the track Track\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        the id of the track\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInstrument\n                        \n                        \n                    \n                \n            \n            \n                \ngetInstrument()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:72\n                \n            \n\n\n            \n                \n                    Get the instrument playing on this track Track\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The instrument playing\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMeasures\n                        \n                        \n                    \n                \n            \n            \n                \ngetMeasures()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:120\n                \n            \n\n\n            \n                \n                    Get a list of all the measures of this track Track\n\n\n                    \n                    \n                    \n                        Returns :         Measure[]\n\n                    \n                    \n                        A lsit of the measures\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNoteAtIndex\n                        \n                        \n                    \n                \n            \n            \n                \ngetNoteAtIndex(i: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:137\n                \n            \n\n\n            \n                \n                    Get a note based on the index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the index of the note\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Note\n\n                    \n                    \n                        the note\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNoteAtTimecode\n                        \n                        \n                    \n                \n            \n            \n                \ngetNoteAtTimecode(timecode: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:146\n                \n            \n\n\n            \n                \n                    Get the note based on its timecode\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    timecode\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the timecode of the note\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Note | null\n\n                    \n                    \n                        the note\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNotes\n                        \n                        \n                    \n                \n            \n            \n                \ngetNotes()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:128\n                \n            \n\n\n            \n                \n                    Get a list of the notes in the track Track\n\n\n                    \n                    \n                    \n                        Returns :         Note[]\n\n                    \n                    \n                        A list of the notes\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPlan\n                        \n                        \n                    \n                \n            \n            \n                \ngetPlan()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:88\n                \n            \n\n\n            \n                \n                    Get the plan on this track\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The plan {\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            planToString\n                        \n                        \n                    \n                \n            \n            \n                \nplanToString()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:106\n                \n            \n\n\n            \n                \n                    Get the name of the plan of this track Track\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The name of the plan\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInstrument\n                        \n                        \n                    \n                \n            \n            \n                \nsetInstrument(instrument: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:80\n                \n            \n\n\n            \n                \n                    Set the instrument that plays on this track Track\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    instrument\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The instrument to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setNotes\n                        \n                        \n                    \n                \n            \n            \n                \nsetNotes(notes: Note[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:159\n                \n            \n\n\n            \n                \n                    Set the list of notes of the track Track\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    notes\n                                    \n                                                Note[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the list of notes to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setPlan\n                        \n                        \n                    \n                \n            \n            \n                \nsetPlan(plan: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:96\n                \n            \n\n\n            \n                \n                    Set the plan of this track Track\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The plan to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/track.ts:196\n                \n            \n\n\n            \n                \n                    Return the track in string form\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        a stringified version of the track\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Measure } from \"./measure\";\nimport { Note } from \"./note\";\n\n/**\n* A class that represents a Track\n*/\nexport class Track {\n  /**\n   * The auto-increment value for the tracks' ids\n   */\n  private static nextId: number = 1;\n\n  /**\n   * The id of the track\n   */\n  private id: number;\n  /**\n   * The instrument used for the sound of the track\n   */\n  private instrument: string;\n  /**\n   * The sound plan of the track\n   * 0 -> \"Normal\" (not solo nor mute)\n   * 1 -> Solo\n   * 2 -> Mute\n   */\n  private plan: number;\n\n  /**\n   * A list of the measures in this track\n   */\n private measures: Measure[];\n\n  /**\n   * The notes inside the track\n   */\n  private notes: Note[];\n\n  /**\n   * The constructor : Create a new track whose attributes corresponds to the parameters. Its id is auto-incremented\n   *\n   * @param {string} instrument (optional) The {@link Track#instrument|instrument} of the track\n   * @param {number} plan (optional) The {@link Track#plan|plan sound} of the track. Must be 0, 1 or 2. If incorrect set to 0\n   * @param {Note[]} notes (optional) The {@link Track#notes|notes} of the track.\n   */\n  constructor(instrument: string = \"\", plan: number = 0, measures: Measure[] = new Array(), notes: Note[] = new Array()) {\n    this.id = Track.nextId;\n    this.measures = measures;\n    ++Track.nextId;\n\n    this.instrument = instrument;\n    if(plan  2 || plan % 1 != 0) {\n      plan = 0;\n    }\n    this.plan = plan;\n    //this.measures = measures;\n    this.notes = notes;\n  }\n\n  /**\n  * Get the id of the track {@link Track#id}\n  * @returns {number} the id of the track\n  */\n  getId(): number {\n    return this.id;\n  }\n\n  /**\n  * Get the instrument playing on this track {@link Track#instrument}\n  * @returns {String} The instrument playing\n  */\n  getInstrument(): string {\n    return this.instrument;\n  }\n\n  /**\n  * Set the instrument that plays on this track {@link Track#instrument}\n  * @param {String} instrument The instrument to set\n  */\n  setInstrument(instrument: string): void {\n    this.instrument = instrument;\n  }\n\n  /**\n  * Get the plan on this track\n  * @returns {number} The plan {@link Track#plan}\n  */\n  getPlan(): number {\n    return this.plan;\n  }\n\n  /**\n  * Set the plan of this track {@link Track#plan}\n  * @param {number} plan The plan to set\n  */\n  setPlan(plan: number): void {\n    if(plan >= 0 && plan ();\n  }\n\n  /**\n  * Delete all notes that begins in an interval of timecodes\n  * @param {number} from the start of the interval\n  * @param {number} to the end of the interval\n  */\n  deleteNotesBetweenTimecodes(from: number, to: number): void {\n    for(let i = 0 ; i = from && timecode \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TrackComponent.html":{"url":"components/TrackComponent.html","title":"component - TrackComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TrackComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/track/track.component.ts\n\n\n    \n        Description\n    \n    \n        A component that represents a single track. Added together, they are to form the rhythm\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-track\n            \n\n            \n                styleUrls\n                ./track.component.sass\n            \n\n\n\n            \n                templateUrl\n                ./track.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isSelected\n                            \n                            \n                                modifiableInstrument\n                            \n                            \n                                modifyInstrument\n                            \n                            \n                                volume\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeSoundPlan\n                            \n                            \n                                endOfTrack\n                            \n                            \n                                getId\n                            \n                            \n                                mute\n                            \n                            \n                                selectTrack\n                            \n                            \n                                setSoloMuted\n                            \n                            \n                                setVolume\n                            \n                            \n                                toggleModifyInstrument\n                            \n                            \n                                toggleSoloMuted\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isPlaying\n                            \n                            \n                                signature\n                            \n                            \n                                soloMuted\n                            \n                            \n                                tempo\n                            \n                            \n                                track\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isPlaying\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:44\n                            \n                        \n                \n                    \n                        Is the track playing\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        signature\n                    \n                \n                \n                    \n                        Type :         Signature\n\n                    \n                \n                \n                    \n                        Default value : new Signature()\n                    \n                \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:82\n                            \n                        \n                \n                    \n                        The general signature of the track\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        soloMuted\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:60\n                            \n                        \n                \n                    \n                        Is the track to be played as solo\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        tempo\n                    \n                \n                \n                    \n                        Type :         Tempo\n\n                    \n                \n                \n                    \n                        Default value : new Tempo()\n                    \n                \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:87\n                            \n                        \n                \n                    \n                        The general tempo of the track\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        track\n                    \n                \n                \n                    \n                        Type :         Track\n\n                    \n                \n                \n                    \n                        Default value : new Track()\n                    \n                \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:27\n                            \n                        \n                \n                    \n                        The track\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            changeSoundPlan\n                        \n                        \n                    \n                \n            \n            \n                \nchangeSoundPlan()\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:112\n                \n            \n\n\n            \n                \n                    Change the track's Track\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            endOfTrack\n                        \n                        \n                    \n                \n            \n            \n                \nendOfTrack(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:204\n                \n            \n\n\n            \n                \n                    Event triggered when the track stops playing\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getId\n                        \n                        \n                    \n                \n            \n            \n                \ngetId()\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:196\n                \n            \n\n\n            \n                \n                    Get the id of the Track\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mute\n                        \n                        \n                    \n                \n            \n            \n                \nmute()\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:145\n                \n            \n\n\n            \n                \n                    Set the TrackComponent to 0\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selectTrack\n                        \n                        \n                    \n                \n            \n            \n                \nselectTrack()\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:184\n                \n            \n\n\n            \n                \n                    Toggle the TrackComponent condition\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSoloMuted\n                        \n                        \n                    \n                \n            \n            \n                \nsetSoloMuted(bool: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:138\n                \n            \n\n\n            \n                \n                    Set TrackComponent condition\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bool\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new value of the condition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setVolume\n                        \n                        \n                    \n                \n            \n            \n                \nsetVolume(volume: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:153\n                \n            \n\n\n            \n                \n                    Set the TrackComponent to a specific amount\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    volume\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new volume to apply to the track. Note that this should be set between [0;1]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleModifyInstrument\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleModifyInstrument()\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:165\n                \n            \n\n\n            \n                \n                    Toggle TrackComponent condition\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleSoloMuted\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleSoloMuted()\n                \n            \n\n\n            \n                \n                    Defined in src/app/track/track.component.ts:130\n                \n            \n\n\n            \n                \n                    Toggle TrackComponent condition\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isSelected\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:70\n                            \n                        \n\n                \n                    \n                        Is the track selected\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modifiableInstrument\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:32\n                            \n                        \n\n                \n                    \n                        The instrument played for the track\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modifyInstrument\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:37\n                            \n                        \n\n                \n                    \n                        Is TrackComponent being modified\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            volume\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/track/track.component.ts:55\n                            \n                        \n\n                \n                    \n                        The volume of the track\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit, OnChanges, SimpleChanges, Input, EventEmitter, Output, ViewChild//, ElementRef\n } from \"@angular/core\";\n\nimport { Track } from \"../classes/track\";\nimport { Note } from \"../classes/note\";\nimport { NoteRepresentation } from \"../classes/note-representation\";\n//import { SoundPlayer } from \"../classes/sound-player\";\nimport { SoundPlayerComponent } from \"../sound-player/sound-player.component\";\n\n\nimport { Signature } from \"../classes/signature\";\nimport { Tempo } from \"../classes/tempo\";\n\n/**\n* A component that represents a single track. Added together, they are to form the rhythm\n*/\n@Component({\n  selector: \"app-track\",\n  templateUrl: \"./track.component.html\",\n  styleUrls: [\"./track.component.sass\"]\n})\nexport class TrackComponent implements OnInit, OnChanges {\n\n  /**\n  * The track\n  */\n  @Input() track: Track = new Track();\n\n  /**\n  * The instrument played for the track\n  */\n  modifiableInstrument: string = \"\";\n\n  /**\n  * Is {@link TrackComponent#modifiableInstrument} being modified\n  */\n  modifyInstrument = false;\n\n//  soundPlayer: SoundPlayer = new SoundPlayer(\"exampleout.mid.wav\");\n\n  /**\n  * Is the track playing\n  */\n  @Input() isPlaying: boolean = false;\n\n  /**\n  * @ignore\n  */\n  @Output() isPlayingOutput: EventEmitter = new EventEmitter();\n\n    // Must be between 0 (mute) and 1 (max)\n  /**\n  * The volume of the track\n  */\n  volume: number = 1;\n\n  /**\n  * Is the track to be played as solo\n  */\n  @Input() soloMuted: boolean = false;\n\n  /**\n  * @ignore\n  */\n  @Output() isSolo: EventEmitter = new EventEmitter();\n\n  /**\n  * Is the track selected\n  */\n  isSelected: boolean = false;\n\n  /**\n  * @ignore\n  */\n  @Output() selectedTrack: EventEmitter = new EventEmitter();\n\n  //@ViewChild('instruInput', { static: true }) intrumentInput: ElementRef;\n\n  /**\n  * The general signature of the track\n  */\n  @Input() signature: Signature = new Signature();\n\n  /**\n  * The general tempo of the track\n  */\n  @Input() tempo: Tempo = new Tempo();\n\n\n  //test: NoteRepresentation = new NoteRepresentation([\"8N\"], null);\n\n  /**\n  * @ignore\n  */\n  constructor() { }\n\n  /**\n  * @ignore\n  */\n  ngOnInit(): void {\n    this.modifiableInstrument = this.track.getInstrument();\n  }\n  /**\n  * @ignore\n  */\n  ngOnChanges(changes: SimpleChanges): void { }\n\n\n  /**\n  * Change the track's {@link Track#plan}\n  */\n  changeSoundPlan(): void {\n      // Change the number of the selected sound plan\n    this.track.setPlan((this.track.getPlan() + 1) % 3);\n\n      // TODO: change the sound track behaviour\n    if(this.track.getPlan() == 2) {\n      this.mute();\n      this.isSolo.emit(false);\n    } else if(this.track.getPlan() == 0) {\n      this.volume = 1;\n    } else {\n      this.isSolo.emit(true);\n    }\n  }\n\n  /**\n  * Toggle {@link TrackComponent#soloMuted} condition\n  */\n  toggleSoloMuted(): void {\n    this.soloMuted = !this.soloMuted;\n  }\n\n  /**\n  * Set {@link TrackComponent#soloMuted} condition\n  * @param {boolean} bool The new value of the condition\n  */\n  setSoloMuted(bool: boolean): void {\n    this.soloMuted = bool;\n  }\n\n  /**\n  * Set the {@link TrackComponent#volume} to 0\n  */\n  mute(): void {\n    this.volume = 0;\n  }\n\n  /**\n  * Set the {@link TrackComponent#volume} to a specific amount\n  * @param {number} volume The new volume to apply to the track. Note that this should be set between [0;1]\n  */\n  setVolume(volume: number): void {\n    if(volume >= 0 && volume {\n        this.intrumentInput.nativeElement.focus();\n      }, 0);*/\n    }\n\n      // TODO: change the sound track's behaviour (with the musical librairy part)\n  }\n\n  /**\n  * Toggle the {@link TrackComponent#isSelected} condition\n  */\n  selectTrack(): void {\n    this.isSelected = !this.isSelected;\n    if(this.isSelected) {\n      this.selectedTrack.emit(this.track.getId());\n    } else {\n      this.selectedTrack.emit(null);\n    }\n  }\n\n  /**\n  * Get the id of the Track\n  */\n  getId(): number {\n    return this.track.getId();\n  }\n\n  /**\n  * Event triggered when the track stops playing\n  * @param {Event} evt The end of track event\n  */\n  endOfTrack(event: any){\n    this.isPlaying = false;\n    this.isPlayingOutput.emit(false);\n  }\n\n}\n\n    \n\n    \n        \n\n  \n\n  \n    \n    \n    \n  \n  \n    \n      \n      \n    \n    \n    -->\n    -->\n  \n  \n      {{ track.getInstrument() }}\n      Défaut\n    \n      \n      ➤\n    \n  \n\n\n    \n\n    \n                \n                    ./track.component.sass\n                \n                @use \"~sass/vars\"\n\n$HEIGHT: 3rem\n\n$INSTRUMENT_WIDTH: 9rem\n$INSTR_INPUT_HEIGHT: 2rem\n\n$BORDER_WIDTH: 0.25rem\n\n@mixin create-gradient($property, $exterior-color, $interior-color)\n  #{$property}: linear-gradient(to right, $exterior-color, $interior-color 5%, $interior-color 87%, $exterior-color)\n\n%absVertCenteredInteractive\n  cursor: pointer\n  position: absolute\n  top: 50%\n  transform: translateY(-50%)\n\n:host\n  display: block\n  width: 100%\n  max-width: 100%\n\n  &.selected>article\n    @include create-gradient(border-image-source, vars.$TRANSPARENT_ORANGE, vars.$ORANGE)\n    border-image-slice: 100% 0 100% 0\n    border-image-width: $BORDER_WIDTH 0 $BORDER_WIDTH 0\n    border-image-repeat: stretch\n\n  &.recording>article\n    @include create-gradient(border-image-source, vars.$TRANSPARENT_RED, vars.$RED)\n\n\narticle\n  display: flex\n  height: $HEIGHT\n  width: 100%\n  max-width: 100%\n  @include create-gradient(background-image, vars.$TRANSPARENT_MIDDLE_DARK_GRAY, vars.$MIDDLE_DARK_GRAY)\n  margin: 0.75rem 0\n  padding: 0 0.5rem\n\n  background-clip: padding-box\n\n  border-style: solid\n  border-width: $BORDER_WIDTH 0\n  border-color: transparent\n\n  &>div\n    height: 100%\n\n.sound-plan\n  position: relative\n  justify-content: center\n  width: $HEIGHT\n  flex-shrink: 0\n  //margin-right: $BORDER_WIDTH\n\n\n  img\n    @extend %absVertCenteredInteractive\n\n.track-content\n  flex-grow: 1\n  margin: 0 $BORDER_WIDTH\n  display: flex\n  align-items: center\n  overflow-x: auto\n  scroll-behavior: smooth\n  box-sizing: border-box\n\n  &::-webkit-scrollbar\n    height: 0px\n    width: 0px\n    background: transparent\n\n  .content-wrapper\n    position: relative\n    //flex-grow: 1\n    height: 80%\n    //max-width: 100%\n    display: flex\n    justify-content: flex-start\n    align-items: center\n    border-left: 0.2rem solid vars.$LIGHT_GRAY\n    background-image: linear-gradient(vars.$LIGHT_GRAY, vars.$LIGHT-GRAY)\n    background-size: 100% 0.2rem\n    background-repeat: no-repeat\n    background-position: center\n\n    .cursor\n      position: absolute\n      top: 50%\n      transform: translateY(-50%)\n      height: 100%\n      width: 0.2rem\n      background-color: vars.$ORANGE\n\n  img\n    display: inline-block\n    max-height: $HEIGHT\n    max-width: $HEIGHT\n    height: 80%\n    width: auto\n\n.instrument\n  flex-shrink: 0\n  position: relative\n  min-width: $INSTRUMENT_WIDTH\n\n  div, span\n    @extend %absVertCenteredInteractive\n  &>div\n    cursor: default\n    width: 100%\n    height: $INSTR_INPUT_HEIGHT\n    display: flex\n\n    input\n      flex-grow: 1\n      max-width: $INSTRUMENT_WIDTH - $INSTR_INPUT_HEIGHT - 1rem\n      border-top-right-radius: 0\n      border-bottom-right-radius: 0\n    button\n      height: 100%\n      width: $INSTR_INPUT_HEIGHT\n      background: vars.$DEEP_DARK_GRAY\n      border-top-left-radius: 0\n      border-bottom-left-radius: 0\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                -->    -->          {{ track.getInstrument() }}      Défaut                ➤      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateTrackComponent', 'selector': 'app-create-track'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'ExportMenuComponent', 'selector': 'app-export-menu'},{'name': 'MainMenuComponent', 'selector': 'app-main-menu'},{'name': 'MeasureComponent', 'selector': 'app-measure'},{'name': 'MetronomeComponent', 'selector': 'app-metronome'},{'name': 'MetronomeSoundComponent', 'selector': 'app-metronome-sound'},{'name': 'NoteComponent', 'selector': 'app-note'},{'name': 'PlaybarComponent', 'selector': 'app-playbar'},{'name': 'RhythmComponent', 'selector': 'app-rhythm'},{'name': 'SaveMenuComponent', 'selector': 'app-save-menu'},{'name': 'SignatureComponent', 'selector': 'app-signature'},{'name': 'SoundPlayerComponent', 'selector': 'app-sound-player'},{'name': 'TempoComponent', 'selector': 'app-tempo'},{'name': 'TrackComponent', 'selector': 'app-track'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TrackComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/classes/measure.ts\n            \n            class\n            Measure\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/classes/metronome.ts\n            \n            function\n            getPath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/classes/metronome.ts\n            \n            function\n            getSoundNameByPath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/classes/metronome.ts\n            \n            function\n            values\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/classes/note-representation.ts\n            \n            class\n            AddOn\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/app/classes/note-representation.ts\n            \n            class\n            NoteRepresentation\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/app/classes/note.ts\n            \n            class\n            Note\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/classes/signature.ts\n            \n            class\n            Signature\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/classes/tempo.ts\n            \n            class\n            Tempo\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/classes/track.ts\n            \n            class\n            Track\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/app/create-track/create-track.component.ts\n            \n            component\n            CreateTrackComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/dashboard/dashboard.component.ts\n            \n            component\n            DashboardComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/enums/basic-note.ts\n            \n            function\n            getImgPath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/enums/basic-note.ts\n            \n            function\n            getJSON\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/enums/basic-note.ts\n            \n            function\n            getName\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/enums/basic-note.ts\n            \n            function\n            getNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/enums/basic-note.ts\n            \n            function\n            values\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/enums/binary-note.ts\n            \n            function\n            getRepresentation\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/export-menu/export-menu.component.ts\n            \n            component\n            ExportMenuComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/main-menu/main-menu.component.ts\n            \n            component\n            MainMenuComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/measure/measure.component.ts\n            \n            component\n            MeasureComponent\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/metronome-sound/metronome-sound.component.ts\n            \n            component\n            MetronomeSoundComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/metronome/metronome.component.ts\n            \n            component\n            MetronomeComponent\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/app/note/note.component.ts\n            \n            component\n            NoteComponent\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/playbar/playbar.component.ts\n            \n            component\n            PlaybarComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/rhythm/rhythm.component.ts\n            \n            component\n            RhythmComponent\n            \n                100 %\n                (28/28)\n            \n        \n        \n            \n                \n                src/app/save-menu/save-menu.component.ts\n            \n            component\n            SaveMenuComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/signature/signature.component.ts\n            \n            component\n            SignatureComponent\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/app/sound-player/sound-player.component.ts\n            \n            component\n            SoundPlayerComponent\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/app/tempo/tempo.component.ts\n            \n            component\n            TempoComponent\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/track/track.component.ts\n            \n            component\n            TrackComponent\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~11.0.4\n        \n            @angular/common : ~11.0.4\n        \n            @angular/compiler : ~11.0.4\n        \n            @angular/core : ~11.0.4\n        \n            @angular/forms : ~11.0.4\n        \n            @angular/platform-browser : ~11.0.4\n        \n            @angular/platform-browser-dynamic : ~11.0.4\n        \n            @angular/router : ~11.0.4\n        \n            @types/events : ^3.0.0\n        \n            events : ^3.2.0\n        \n            rxjs : ~6.6.0\n        \n            tslib : ^2.0.0\n        \n            zone.js : ~0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BasicNote   (src/.../basic-note.ts)\n                        \n                        \n                            BinaryNote   (src/.../binary-note.ts)\n                        \n                        \n                            Intrument   (src/.../instrument.ts)\n                        \n                        \n                            Sound   (src/.../metronome.ts)\n                        \n                        \n                            TernaryNote   (src/.../ternary-note.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/enums/basic-note.ts\n    \n        \n            \n                \n                    \n                        \n                        BasicNote\n                    \n                \n                    \n                        \n                            The enum that stores the primal notes from the whole note to sixteen note\n\n                        \n                    \n                        \n                            \n                                 WHOLE_NOTE\n                            \n                        \n                        \n                            \n                                Value : {\"number\": 1, \"name\": \"Whole note\", \"img\": \"whole-note.svg\"}\n                            \n                        \n                        \n                            \n                                 HALF_NOTE\n                            \n                        \n                        \n                            \n                                Value : {\"number\": 2, \"name\": \"Half note\", \"img\": \"half-note.svg\"}\n                            \n                        \n                        \n                            \n                                 QUARTER_NOTE\n                            \n                        \n                        \n                            \n                                Value : {\"number\": 4, \"name\": \"Quarter note\", \"img\": \"quarter-note.svg\"}\n                            \n                        \n                        \n                            \n                                 HEIGHT_NOTE\n                            \n                        \n                        \n                            \n                                Value : {\"number\": 8, \"name\": \"Height note\", \"img\": \"height-note.svg\"}\n                            \n                        \n                        \n                            \n                                 SIXTEEN_NOTE\n                            \n                        \n                        \n                            \n                                Value : {\"number\": 16, \"name\": \"Sixteen note\", \"img\": \"sixteen-note.svg\"}\n                            \n                        \n            \n        \n\n    src/app/enums/binary-note.ts\n    \n        \n            \n                \n                    \n                        \n                        BinaryNote\n                    \n                \n                    \n                        \n                            This enum list every note type that can be visually created.\nVALUES NOTATION :\n   All values start by _ due to the fact that a value cannot start by a number.\n   R -> rest\n   D -> dotted\n   TR -> triplet\n   1N -> whole note\n   2N -> half note\n   4N -> quarter note\n   8N -> eight note\n   16N -> sixteenth note\n   A number not followed by a N but by an _ specify the number of linked notes after it\n   following themselves. ex : 28N = two eight note or eight note eight note.\n\n                        \n                    \n                        \n                            \n                                 _4N\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 _4N_TR\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 _4_8N\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n                        \n                            \n                                 _2_8N\n                            \n                        \n                        \n                            \n                                Value : 4\n                            \n                        \n                        \n                            \n                                 _2_16N\n                            \n                        \n                        \n                            \n                                Value : 5\n                            \n                        \n                        \n                            \n                                 _16N_8N_16N\n                            \n                        \n                        \n                            \n                                Value : 6\n                            \n                        \n                        \n                            \n                                 _8N_2_16N\n                            \n                        \n                        \n                            \n                                Value : 7\n                            \n                        \n                        \n                            \n                                 _2_16N_8N\n                            \n                        \n                        \n                            \n                                Value : 8\n                            \n                        \n                        \n                            \n                                 _4_16N\n                            \n                        \n                        \n                            \n                                Value : 9\n                            \n                        \n                        \n                            \n                                 _1N_R\n                            \n                        \n                        \n                            \n                                Value : 10\n                            \n                        \n                        \n                            \n                                 _2N_R\n                            \n                        \n                        \n                            \n                                Value : 11\n                            \n                        \n                        \n                            \n                                 _4N_R\n                            \n                        \n                        \n                            \n                                Value : 12\n                            \n                        \n                        \n                            \n                                 _8N_R\n                            \n                        \n                        \n                            \n                                Value : 13\n                            \n                        \n                        \n                            \n                                 _16N_R\n                            \n                        \n                        \n                            \n                                Value : 14\n                            \n                        \n            \n        \n\n    src/app/enums/instrument.ts\n    \n        \n            \n                \n                    \n                        \n                        Intrument\n                    \n                \n                        \n                            \n                                 ACOUSTIC_GRAND_PIANO\n                            \n                        \n                        \n                            \n                                 BRIGHT_ACOUSTIC_PIANO\n                            \n                        \n                        \n                            \n                                 ELECTRIC_GRAND_PIANO\n                            \n                        \n                        \n                            \n                                 HONKYTONK_PIANO\n                            \n                        \n                        \n                            \n                                 ELECTRIC_PIANO_1\n                            \n                        \n                        \n                            \n                                 ELECTRIC_PIANO_2\n                            \n                        \n                        \n                            \n                                 HARPSICHORD\n                            \n                        \n                        \n                            \n                                 CLAVINET\n                            \n                        \n                        \n                            \n                                 CELESTA\n                            \n                        \n                        \n                            \n                                 GLOCKENSPIEL\n                            \n                        \n                        \n                            \n                                 MUSIC_BOX\n                            \n                        \n                        \n                            \n                                 VIBRAPHONE\n                            \n                        \n                        \n                            \n                                 MARIMBA\n                            \n                        \n                        \n                            \n                                 XYLOPHONE\n                            \n                        \n                        \n                            \n                                 TUBULAR_BELLS\n                            \n                        \n                        \n                            \n                                 DULCIMER\n                            \n                        \n                        \n                            \n                                 DRAWBAR_ORGAN\n                            \n                        \n                        \n                            \n                                 PERCUSSIVE_ORGAN\n                            \n                        \n                        \n                            \n                                 ROCK_ORGAN\n                            \n                        \n                        \n                            \n                                 CHURCH_ORGAN\n                            \n                        \n                        \n                            \n                                 REED_ORGAN\n                            \n                        \n                        \n                            \n                                 ACCORDION\n                            \n                        \n                        \n                            \n                                 HARMONICA\n                            \n                        \n                        \n                            \n                                 TANGO_ACCORDION\n                            \n                        \n                        \n                            \n                                 ACOUSTIC_GUITAR_NYLON\n                            \n                        \n                        \n                            \n                                 ACOUSTIC_GUITAR_STEEL\n                            \n                        \n                        \n                            \n                                 ELECTRIC_GUITAR_JAZZ\n                            \n                        \n                        \n                            \n                                 ELECTRIC_GUITAR_CLEAN\n                            \n                        \n                        \n                            \n                                 ELECTRIC_GUITAR_MUTED\n                            \n                        \n                        \n                            \n                                 OVERDRIVEN_GUITAR\n                            \n                        \n                        \n                            \n                                 DISTORTION_GUITAR\n                            \n                        \n                        \n                            \n                                 GUITAR_HARMONICS\n                            \n                        \n                        \n                            \n                                 ACOUSTIC_BASS\n                            \n                        \n                        \n                            \n                                 ELECTRIC_BASS_FINGER\n                            \n                        \n                        \n                            \n                                 ELECTRIC_BASS_PICK\n                            \n                        \n                        \n                            \n                                 FRETLESS_BASS\n                            \n                        \n                        \n                            \n                                 SLAP_BASS_1\n                            \n                        \n                        \n                            \n                                 SLAP_BASS_2\n                            \n                        \n                        \n                            \n                                 SYNTH_BASS_1\n                            \n                        \n                        \n                            \n                                 SYNTH_BASS_2\n                            \n                        \n                        \n                            \n                                 VIOLIN\n                            \n                        \n                        \n                            \n                                 VIOLA\n                            \n                        \n                        \n                            \n                                 CELLO\n                            \n                        \n                        \n                            \n                                 CONTRABASS\n                            \n                        \n                        \n                            \n                                 TREMOLO_STRINGS\n                            \n                        \n                        \n                            \n                                 PIZZICATO_STRINGS\n                            \n                        \n                        \n                            \n                                 ORCHESTRAL_HARP\n                            \n                        \n                        \n                            \n                                 TIMPANI\n                            \n                        \n                        \n                            \n                                 STRING_ENSEMBLE_1\n                            \n                        \n                        \n                            \n                                 STRING_ENSEMBLE_2\n                            \n                        \n                        \n                            \n                                 SYNTH_STRINGS_1\n                            \n                        \n                        \n                            \n                                 SYNTH_STRINGS_2\n                            \n                        \n                        \n                            \n                                 CHOIR_AAHS\n                            \n                        \n                        \n                            \n                                 VOICE_OOHS\n                            \n                        \n                        \n                            \n                                 SYNTH_CHOIR\n                            \n                        \n                        \n                            \n                                 ORCHESTRA_HIT\n                            \n                        \n                        \n                            \n                                 TRUMPET\n                            \n                        \n                        \n                            \n                                 TROMBONE\n                            \n                        \n                        \n                            \n                                 TUBA\n                            \n                        \n                        \n                            \n                                 MUTED_TRUMPET\n                            \n                        \n                        \n                            \n                                 FRENCH_HORN\n                            \n                        \n                        \n                            \n                                 BRASS_SECTION\n                            \n                        \n                        \n                            \n                                 SYNTH_BRASS_1\n                            \n                        \n                        \n                            \n                                 SYNTH_BRASS_2\n                            \n                        \n                        \n                            \n                                 SOPRANO_SAX\n                            \n                        \n                        \n                            \n                                 ALTO_SAX\n                            \n                        \n                        \n                            \n                                 TENOR_SAX\n                            \n                        \n                        \n                            \n                                 BARITONE_SAX\n                            \n                        \n                        \n                            \n                                 OBOE\n                            \n                        \n                        \n                            \n                                 ENGLISH_HORN\n                            \n                        \n                        \n                            \n                                 BASSOON\n                            \n                        \n                        \n                            \n                                 CLARINET\n                            \n                        \n                        \n                            \n                                 PICCOLO\n                            \n                        \n                        \n                            \n                                 FLUTE\n                            \n                        \n                        \n                            \n                                 RECORDER\n                            \n                        \n                        \n                            \n                                 PAN_FLUTE\n                            \n                        \n                        \n                            \n                                 BLOWN_BOTTLE\n                            \n                        \n                        \n                            \n                                 SHAKUHACHI\n                            \n                        \n                        \n                            \n                                 WHISTLE\n                            \n                        \n                        \n                            \n                                 OCARINA\n                            \n                        \n                        \n                            \n                                 LEAD_1_SQUARE\n                            \n                        \n                        \n                            \n                                 LEAD_2_SAWTOOTH\n                            \n                        \n                        \n                            \n                                 LEAD_3_CALLIOPE\n                            \n                        \n                        \n                            \n                                 LEAD_4_CHIFF\n                            \n                        \n                        \n                            \n                                 LEAD_5_CHARANG\n                            \n                        \n                        \n                            \n                                 LEAD_6_VOICE\n                            \n                        \n                        \n                            \n                                 LEAD_7_FIFTHS\n                            \n                        \n                        \n                            \n                                 LEAD_8_BASS_AND_LEAD\n                            \n                        \n                        \n                            \n                                 PAD_1_NEW_AGE\n                            \n                        \n                        \n                            \n                                 PAD_2_WARM\n                            \n                        \n                        \n                            \n                                 PAD_3_POLYSYNTH\n                            \n                        \n                        \n                            \n                                 PAD_4_CHOIR\n                            \n                        \n                        \n                            \n                                 PAD_5_BOWED\n                            \n                        \n                        \n                            \n                                 PAD_6_METALLIC\n                            \n                        \n                        \n                            \n                                 PAD_7_HALO\n                            \n                        \n                        \n                            \n                                 PAD_8_SWEEP\n                            \n                        \n                        \n                            \n                                 FX_1_RAIN\n                            \n                        \n                        \n                            \n                                 FX_2_SOUNDTRACK\n                            \n                        \n                        \n                            \n                                 FX_3_CRYSTAL\n                            \n                        \n                        \n                            \n                                 FX_4_ATMOSPHERE\n                            \n                        \n                        \n                            \n                                 FX_5_BRIGHTNESS\n                            \n                        \n                        \n                            \n                                 FX_6_GOBLINS\n                            \n                        \n                        \n                            \n                                 FX_7_ECHOES\n                            \n                        \n                        \n                            \n                                 FX_8_SCIFI\n                            \n                        \n                        \n                            \n                                 SITAR\n                            \n                        \n                        \n                            \n                                 BANJO\n                            \n                        \n                        \n                            \n                                 SHAMISEN\n                            \n                        \n                        \n                            \n                                 KOTO\n                            \n                        \n                        \n                            \n                                 KALIMBA\n                            \n                        \n                        \n                            \n                                 BAGPIPE\n                            \n                        \n                        \n                            \n                                 FIDDLE\n                            \n                        \n                        \n                            \n                                 SHANAI\n                            \n                        \n                        \n                            \n                                 TINKLE_BELL\n                            \n                        \n                        \n                            \n                                 AGOGO\n                            \n                        \n                        \n                            \n                                 STEEL_DRUMS\n                            \n                        \n                        \n                            \n                                 WOODBLOCK\n                            \n                        \n                        \n                            \n                                 TAIKO_DRUM\n                            \n                        \n                        \n                            \n                                 MELODIC_TOM\n                            \n                        \n                        \n                            \n                                 SYNTH_DRUM\n                            \n                        \n                        \n                            \n                                 REVERSE_CYMBAL\n                            \n                        \n                        \n                            \n                                 GUITAR_FRET_NOISE\n                            \n                        \n                        \n                            \n                                 BREATH_NOISE\n                            \n                        \n                        \n                            \n                                 SEASHORE\n                            \n                        \n                        \n                            \n                                 BIRD_TWEET\n                            \n                        \n                        \n                            \n                                 TELEPHONE_RING\n                            \n                        \n                        \n                            \n                                 HELICOPTER\n                            \n                        \n                        \n                            \n                                 APPLAUSE\n                            \n                        \n                        \n                            \n                                 GUNSHOT\n                            \n                        \n            \n        \n\n    src/app/classes/metronome.ts\n    \n        \n            \n                \n                    \n                        \n                        Sound\n                    \n                \n                    \n                        \n                            An enum of the different sounds possible\n\n                        \n                    \n                        \n                            \n                                 TOC\n                            \n                        \n                        \n                            \n                                Value : ../../assets/sounds/metronome/toc.wav\n                            \n                        \n                        \n                            \n                                 CLOCK_1\n                            \n                        \n                        \n                            \n                                Value : ../../assets/sounds/metronome/clock-1.wav\n                            \n                        \n                        \n                            \n                                 CLOCK_2\n                            \n                        \n                        \n                            \n                                Value : ../../assets/sounds/metronome/clock-2.wav\n                            \n                        \n            \n        \n\n    src/app/enums/ternary-note.ts\n    \n        \n            \n                \n                    \n                        \n                        TernaryNote\n                    \n                \n                    \n                        \n                            This enum list every ternary note that can be visually created.\nVALUES NOTATION :\n   All values start by _ due to the fact that a value cannot start by a number.\n   R -> rest\n   D -> dotted\n   DU -> duplet\n   2N -> half note\n   4N -> quarter note\n   8N -> eight note\n   16N -> sixteenth note\n   A number not followed by a N but by an _ specify the number of linked notes after it\n   following themselves. ex : 28N = two eight note or eight note eight note.\n\n                        \n                    \n                        \n                            \n                                 _4N\n                            \n                        \n                        \n                            \n                                 _D_4N\n                            \n                        \n                        \n                            \n                                 _8N\n                            \n                        \n                        \n                            \n                                 _3_8N\n                            \n                        \n                        \n                            \n                                 _2_16N\n                            \n                        \n                        \n                            \n                                 _6_16N\n                            \n                        \n                        \n                            \n                                 _8N_4_16N\n                            \n                        \n                        \n                            \n                                 _4_16N_8N\n                            \n                        \n                        \n                            \n                                 _8N_2_16N_8N\n                            \n                        \n                        \n                            \n                                 _8N_16N_8N\n                            \n                        \n                        \n                            \n                                 _2_8N_2_16N\n                            \n                        \n                        \n                            \n                                 _2_16N_2_8N\n                            \n                        \n                        \n                            \n                                 _D_8N_3_16N\n                            \n                        \n                        \n                            \n                                 _3_16N_D_8N\n                            \n                        \n                        \n                            \n                                 _2_16N_8N_2_16N\n                            \n                        \n                        \n                            \n                                 _DU\n                            \n                        \n                        \n                            \n                                 _8N_R\n                            \n                        \n                        \n                            \n                                 _16N_R\n                            \n                        \n                        \n                            \n                                 _D_2N_R\n                            \n                        \n                        \n                            \n                                 _D_4N_R\n                            \n                        \n                        \n                            \n                                 _D_8N_R\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getImgPath   (src/.../basic-note.ts)\n                        \n                        \n                            getJSON   (src/.../basic-note.ts)\n                        \n                        \n                            getName   (src/.../basic-note.ts)\n                        \n                        \n                            getNumber   (src/.../basic-note.ts)\n                        \n                        \n                            getPath   (src/.../metronome.ts)\n                        \n                        \n                            getRepresentation   (src/.../binary-note.ts)\n                        \n                        \n                            getSoundNameByPath   (src/.../metronome.ts)\n                        \n                        \n                            values   (src/.../metronome.ts)\n                        \n                        \n                            values   (src/.../basic-note.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/enums/basic-note.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getImgPath\n                        \n                        \n                    \n                \n            \n            \n                \ngetImgPath(note)\n                \n            \n\n\n\n\n            \n                \n                    Get the path to the image of the note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note that we want the image path to\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The complete path to the image of the note, from the app repertory\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getJSON\n                        \n                        \n                    \n                \n            \n            \n                \ngetJSON(note)\n                \n            \n\n\n\n\n            \n                \n                    Get the value of the BasicNote on its JSON form\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note that we want the JSON value of\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The JSON associated to the note. It's form is {number: {number}, name: {string}, img: {string}}, were img is the name of the image with it's extension, that doesn't include the path to the image\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getName\n                        \n                        \n                    \n                \n            \n            \n                \ngetName(note)\n                \n            \n\n\n\n\n            \n                \n                    Get the name of the note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note that we want the name of\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The name of the note, in english, starting with a capital..\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNumber\n                        \n                        \n                    \n                \n            \n            \n                \ngetNumber(note)\n                \n            \n\n\n\n\n            \n                \n                    Get the number associated to the note\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note that we want the number of\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The number of the note, as the denominator of it's time duration. Whole note is 1, half note 2...\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            values\n                        \n                        \n                    \n                \n            \n            \n                \nvalues()\n                \n            \n\n\n\n\n            \n                \n                    Get all the BasicNote values\nTO CHANGE FOR SOMETHING DYNAMIC\n\n\n                    \n                    \n                    \n                        Returns :         BasicNote[]\n\n                    \n                    \n                        All the possible BasicNote's values\n\n                    \n                \n            \n        \n    \n    src/app/classes/metronome.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getPath\n                        \n                        \n                    \n                \n            \n            \n                \ngetPath(soundName)\n                \n            \n\n\n\n\n            \n                \n                    Get the path of a sound using its name\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    soundName\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the path\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Metronome.Sound\n\n                    \n                    \n                        The path to the sound\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSoundNameByPath\n                        \n                        \n                    \n                \n            \n            \n                \ngetSoundNameByPath(soundPath)\n                \n            \n\n\n\n\n            \n                \n                    Get the name of a sound using its path\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    soundPath\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Tha path to the sound\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         String\n\n                    \n                    \n                        The name of the sound\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            values\n                        \n                        \n                    \n                \n            \n            \n                \nvalues()\n                \n            \n\n\n\n\n            \n                \n                    Get all the possible sounds names\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        A list of the possible sound's name\n\n                    \n                \n            \n        \n    \n    src/app/enums/binary-note.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getRepresentation\n                        \n                        \n                    \n                \n            \n            \n                \ngetRepresentation(note)\n                \n            \n\n\n\n\n            \n                \n                    Get the representation of the binary note.\nTO COMPLETE\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note we wants the representation of\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     NoteRepresentation | null\n\n                    \n                    \n                        The {\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPolyrythmique\nThis project was generated with Angular CLI version 11.0.4.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nCreateTrackComponent\n\nCreateTrackComponent\n\nAppModule -->\n\nCreateTrackComponent->AppModule\n\n\n\n\n\nDashboardComponent\n\nDashboardComponent\n\nAppModule -->\n\nDashboardComponent->AppModule\n\n\n\n\n\nExportMenuComponent\n\nExportMenuComponent\n\nAppModule -->\n\nExportMenuComponent->AppModule\n\n\n\n\n\nMainMenuComponent\n\nMainMenuComponent\n\nAppModule -->\n\nMainMenuComponent->AppModule\n\n\n\n\n\nMeasureComponent\n\nMeasureComponent\n\nAppModule -->\n\nMeasureComponent->AppModule\n\n\n\n\n\nMetronomeComponent\n\nMetronomeComponent\n\nAppModule -->\n\nMetronomeComponent->AppModule\n\n\n\n\n\nMetronomeSoundComponent\n\nMetronomeSoundComponent\n\nAppModule -->\n\nMetronomeSoundComponent->AppModule\n\n\n\n\n\nNoteComponent\n\nNoteComponent\n\nAppModule -->\n\nNoteComponent->AppModule\n\n\n\n\n\nPlaybarComponent\n\nPlaybarComponent\n\nAppModule -->\n\nPlaybarComponent->AppModule\n\n\n\n\n\nRhythmComponent\n\nRhythmComponent\n\nAppModule -->\n\nRhythmComponent->AppModule\n\n\n\n\n\nSaveMenuComponent\n\nSaveMenuComponent\n\nAppModule -->\n\nSaveMenuComponent->AppModule\n\n\n\n\n\nSignatureComponent\n\nSignatureComponent\n\nAppModule -->\n\nSignatureComponent->AppModule\n\n\n\n\n\nSoundPlayerComponent\n\nSoundPlayerComponent\n\nAppModule -->\n\nSoundPlayerComponent->AppModule\n\n\n\n\n\nTempoComponent\n\nTempoComponent\n\nAppModule -->\n\nTempoComponent->AppModule\n\n\n\n\n\nTrackComponent\n\nTrackComponent\n\nAppModule -->\n\nTrackComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    16 Components\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        6 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AddOnJson   (src/.../note-representation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/classes/note-representation.ts\n    \n    \n        \n            \n                \n                    \n                    AddOnJson\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n                \n                    \n                        The environment variables when the application is in production\n\n                    \n                \n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false,\n\n  pathsFromApp: {\n    img: \"../assets/images/\",\n    rythmsImg: \"../assets/images/rythms/\",\n    notesImg: \"../assets/images/notes/\",\n    sounds: \"../assets/sounds/\"\n  }\n}\n                        \n                    \n\n                \n                    \n                        The environment variables when the application is in debug mode\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
